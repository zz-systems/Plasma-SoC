// de1_soc_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.0 614

`timescale 1 ps / 1 ps
module de1_soc_mm_interconnect_3 (
		input  wire        sys_sdram_pll_0_sys_clk_clk,                         //                       sys_sdram_pll_0_sys_clk.clk
		input  wire        hps_to_plasma_dma_reset_reset_bridge_in_reset_reset, // hps_to_plasma_dma_reset_reset_bridge_in_reset.reset
		input  wire [31:0] hps_to_plasma_dma_write_master_address,              //                hps_to_plasma_dma_write_master.address
		output wire        hps_to_plasma_dma_write_master_waitrequest,          //                                              .waitrequest
		input  wire [7:0]  hps_to_plasma_dma_write_master_burstcount,           //                                              .burstcount
		input  wire [3:0]  hps_to_plasma_dma_write_master_byteenable,           //                                              .byteenable
		input  wire        hps_to_plasma_dma_write_master_chipselect,           //                                              .chipselect
		input  wire        hps_to_plasma_dma_write_master_write,                //                                              .write
		input  wire [31:0] hps_to_plasma_dma_write_master_writedata,            //                                              .writedata
		output wire [31:0] plasma_soc_0_avalon_slave_0_address,                 //                   plasma_soc_0_avalon_slave_0.address
		output wire        plasma_soc_0_avalon_slave_0_write,                   //                                              .write
		output wire        plasma_soc_0_avalon_slave_0_read,                    //                                              .read
		input  wire [31:0] plasma_soc_0_avalon_slave_0_readdata,                //                                              .readdata
		output wire [31:0] plasma_soc_0_avalon_slave_0_writedata,               //                                              .writedata
		output wire [3:0]  plasma_soc_0_avalon_slave_0_byteenable,              //                                              .byteenable
		input  wire        plasma_soc_0_avalon_slave_0_waitrequest,             //                                              .waitrequest
		input  wire [1:0]  plasma_soc_0_avalon_slave_0_response                 //                                              .response
	);

	wire          hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_waitrequest;   // hps_to_plasma_dma_write_master_agent:av_waitrequest -> hps_to_plasma_dma_write_master_translator:uav_waitrequest
	wire   [31:0] hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_readdata;      // hps_to_plasma_dma_write_master_agent:av_readdata -> hps_to_plasma_dma_write_master_translator:uav_readdata
	wire          hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_debugaccess;   // hps_to_plasma_dma_write_master_translator:uav_debugaccess -> hps_to_plasma_dma_write_master_agent:av_debugaccess
	wire   [33:0] hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_address;       // hps_to_plasma_dma_write_master_translator:uav_address -> hps_to_plasma_dma_write_master_agent:av_address
	wire          hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_read;          // hps_to_plasma_dma_write_master_translator:uav_read -> hps_to_plasma_dma_write_master_agent:av_read
	wire    [3:0] hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_byteenable;    // hps_to_plasma_dma_write_master_translator:uav_byteenable -> hps_to_plasma_dma_write_master_agent:av_byteenable
	wire          hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_readdatavalid; // hps_to_plasma_dma_write_master_agent:av_readdatavalid -> hps_to_plasma_dma_write_master_translator:uav_readdatavalid
	wire          hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_lock;          // hps_to_plasma_dma_write_master_translator:uav_lock -> hps_to_plasma_dma_write_master_agent:av_lock
	wire          hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_write;         // hps_to_plasma_dma_write_master_translator:uav_write -> hps_to_plasma_dma_write_master_agent:av_write
	wire   [31:0] hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_writedata;     // hps_to_plasma_dma_write_master_translator:uav_writedata -> hps_to_plasma_dma_write_master_agent:av_writedata
	wire    [9:0] hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_burstcount;    // hps_to_plasma_dma_write_master_translator:uav_burstcount -> hps_to_plasma_dma_write_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                 // rsp_mux:src_valid -> hps_to_plasma_dma_write_master_agent:rp_valid
	wire  [110:0] rsp_mux_src_data;                                                                  // rsp_mux:src_data -> hps_to_plasma_dma_write_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                 // hps_to_plasma_dma_write_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [0:0] rsp_mux_src_channel;                                                               // rsp_mux:src_channel -> hps_to_plasma_dma_write_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                         // rsp_mux:src_startofpacket -> hps_to_plasma_dma_write_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                           // rsp_mux:src_endofpacket -> hps_to_plasma_dma_write_master_agent:rp_endofpacket
	wire   [31:0] plasma_soc_0_avalon_slave_0_agent_m0_readdata;                                     // plasma_soc_0_avalon_slave_0_translator:uav_readdata -> plasma_soc_0_avalon_slave_0_agent:m0_readdata
	wire          plasma_soc_0_avalon_slave_0_agent_m0_waitrequest;                                  // plasma_soc_0_avalon_slave_0_translator:uav_waitrequest -> plasma_soc_0_avalon_slave_0_agent:m0_waitrequest
	wire          plasma_soc_0_avalon_slave_0_agent_m0_debugaccess;                                  // plasma_soc_0_avalon_slave_0_agent:m0_debugaccess -> plasma_soc_0_avalon_slave_0_translator:uav_debugaccess
	wire   [33:0] plasma_soc_0_avalon_slave_0_agent_m0_address;                                      // plasma_soc_0_avalon_slave_0_agent:m0_address -> plasma_soc_0_avalon_slave_0_translator:uav_address
	wire    [3:0] plasma_soc_0_avalon_slave_0_agent_m0_byteenable;                                   // plasma_soc_0_avalon_slave_0_agent:m0_byteenable -> plasma_soc_0_avalon_slave_0_translator:uav_byteenable
	wire          plasma_soc_0_avalon_slave_0_agent_m0_read;                                         // plasma_soc_0_avalon_slave_0_agent:m0_read -> plasma_soc_0_avalon_slave_0_translator:uav_read
	wire          plasma_soc_0_avalon_slave_0_agent_m0_readdatavalid;                                // plasma_soc_0_avalon_slave_0_translator:uav_readdatavalid -> plasma_soc_0_avalon_slave_0_agent:m0_readdatavalid
	wire    [1:0] plasma_soc_0_avalon_slave_0_agent_m0_response;                                     // plasma_soc_0_avalon_slave_0_translator:uav_response -> plasma_soc_0_avalon_slave_0_agent:m0_response
	wire          plasma_soc_0_avalon_slave_0_agent_m0_lock;                                         // plasma_soc_0_avalon_slave_0_agent:m0_lock -> plasma_soc_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] plasma_soc_0_avalon_slave_0_agent_m0_writedata;                                    // plasma_soc_0_avalon_slave_0_agent:m0_writedata -> plasma_soc_0_avalon_slave_0_translator:uav_writedata
	wire          plasma_soc_0_avalon_slave_0_agent_m0_write;                                        // plasma_soc_0_avalon_slave_0_agent:m0_write -> plasma_soc_0_avalon_slave_0_translator:uav_write
	wire    [2:0] plasma_soc_0_avalon_slave_0_agent_m0_burstcount;                                   // plasma_soc_0_avalon_slave_0_agent:m0_burstcount -> plasma_soc_0_avalon_slave_0_translator:uav_burstcount
	wire          plasma_soc_0_avalon_slave_0_agent_rf_source_valid;                                 // plasma_soc_0_avalon_slave_0_agent:rf_source_valid -> plasma_soc_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [111:0] plasma_soc_0_avalon_slave_0_agent_rf_source_data;                                  // plasma_soc_0_avalon_slave_0_agent:rf_source_data -> plasma_soc_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          plasma_soc_0_avalon_slave_0_agent_rf_source_ready;                                 // plasma_soc_0_avalon_slave_0_agent_rsp_fifo:in_ready -> plasma_soc_0_avalon_slave_0_agent:rf_source_ready
	wire          plasma_soc_0_avalon_slave_0_agent_rf_source_startofpacket;                         // plasma_soc_0_avalon_slave_0_agent:rf_source_startofpacket -> plasma_soc_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          plasma_soc_0_avalon_slave_0_agent_rf_source_endofpacket;                           // plasma_soc_0_avalon_slave_0_agent:rf_source_endofpacket -> plasma_soc_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_valid;                              // plasma_soc_0_avalon_slave_0_agent_rsp_fifo:out_valid -> plasma_soc_0_avalon_slave_0_agent:rf_sink_valid
	wire  [111:0] plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_data;                               // plasma_soc_0_avalon_slave_0_agent_rsp_fifo:out_data -> plasma_soc_0_avalon_slave_0_agent:rf_sink_data
	wire          plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_ready;                              // plasma_soc_0_avalon_slave_0_agent:rf_sink_ready -> plasma_soc_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                      // plasma_soc_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> plasma_soc_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                        // plasma_soc_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> plasma_soc_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          hps_to_plasma_dma_write_master_agent_cp_valid;                                     // hps_to_plasma_dma_write_master_agent:cp_valid -> router:sink_valid
	wire  [110:0] hps_to_plasma_dma_write_master_agent_cp_data;                                      // hps_to_plasma_dma_write_master_agent:cp_data -> router:sink_data
	wire          hps_to_plasma_dma_write_master_agent_cp_ready;                                     // router:sink_ready -> hps_to_plasma_dma_write_master_agent:cp_ready
	wire          hps_to_plasma_dma_write_master_agent_cp_startofpacket;                             // hps_to_plasma_dma_write_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          hps_to_plasma_dma_write_master_agent_cp_endofpacket;                               // hps_to_plasma_dma_write_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                  // router:src_valid -> cmd_demux:sink_valid
	wire  [110:0] router_src_data;                                                                   // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                  // cmd_demux:sink_ready -> router:src_ready
	wire    [0:0] router_src_channel;                                                                // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                          // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                            // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          plasma_soc_0_avalon_slave_0_agent_rp_valid;                                        // plasma_soc_0_avalon_slave_0_agent:rp_valid -> router_001:sink_valid
	wire  [110:0] plasma_soc_0_avalon_slave_0_agent_rp_data;                                         // plasma_soc_0_avalon_slave_0_agent:rp_data -> router_001:sink_data
	wire          plasma_soc_0_avalon_slave_0_agent_rp_ready;                                        // router_001:sink_ready -> plasma_soc_0_avalon_slave_0_agent:rp_ready
	wire          plasma_soc_0_avalon_slave_0_agent_rp_startofpacket;                                // plasma_soc_0_avalon_slave_0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire          plasma_soc_0_avalon_slave_0_agent_rp_endofpacket;                                  // plasma_soc_0_avalon_slave_0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                              // router_001:src_valid -> rsp_demux:sink_valid
	wire  [110:0] router_001_src_data;                                                               // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                              // rsp_demux:sink_ready -> router_001:src_ready
	wire    [0:0] router_001_src_channel;                                                            // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                                      // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                                        // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                 // cmd_mux:src_valid -> plasma_soc_0_avalon_slave_0_burst_adapter:sink0_valid
	wire  [110:0] cmd_mux_src_data;                                                                  // cmd_mux:src_data -> plasma_soc_0_avalon_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                 // plasma_soc_0_avalon_slave_0_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [0:0] cmd_mux_src_channel;                                                               // cmd_mux:src_channel -> plasma_soc_0_avalon_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                         // cmd_mux:src_startofpacket -> plasma_soc_0_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                           // cmd_mux:src_endofpacket -> plasma_soc_0_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire          plasma_soc_0_avalon_slave_0_burst_adapter_source0_valid;                           // plasma_soc_0_avalon_slave_0_burst_adapter:source0_valid -> plasma_soc_0_avalon_slave_0_agent:cp_valid
	wire  [110:0] plasma_soc_0_avalon_slave_0_burst_adapter_source0_data;                            // plasma_soc_0_avalon_slave_0_burst_adapter:source0_data -> plasma_soc_0_avalon_slave_0_agent:cp_data
	wire          plasma_soc_0_avalon_slave_0_burst_adapter_source0_ready;                           // plasma_soc_0_avalon_slave_0_agent:cp_ready -> plasma_soc_0_avalon_slave_0_burst_adapter:source0_ready
	wire    [0:0] plasma_soc_0_avalon_slave_0_burst_adapter_source0_channel;                         // plasma_soc_0_avalon_slave_0_burst_adapter:source0_channel -> plasma_soc_0_avalon_slave_0_agent:cp_channel
	wire          plasma_soc_0_avalon_slave_0_burst_adapter_source0_startofpacket;                   // plasma_soc_0_avalon_slave_0_burst_adapter:source0_startofpacket -> plasma_soc_0_avalon_slave_0_agent:cp_startofpacket
	wire          plasma_soc_0_avalon_slave_0_burst_adapter_source0_endofpacket;                     // plasma_soc_0_avalon_slave_0_burst_adapter:source0_endofpacket -> plasma_soc_0_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                              // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [110:0] cmd_demux_src0_data;                                                               // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                              // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [0:0] cmd_demux_src0_channel;                                                            // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                      // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                        // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                              // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [110:0] rsp_demux_src0_data;                                                               // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                              // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [0:0] rsp_demux_src0_channel;                                                            // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                      // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                        // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          plasma_soc_0_avalon_slave_0_agent_rdata_fifo_src_valid;                            // plasma_soc_0_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] plasma_soc_0_avalon_slave_0_agent_rdata_fifo_src_data;                             // plasma_soc_0_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          plasma_soc_0_avalon_slave_0_agent_rdata_fifo_src_ready;                            // avalon_st_adapter:in_0_ready -> plasma_soc_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                     // avalon_st_adapter:out_0_valid -> plasma_soc_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                      // avalon_st_adapter:out_0_data -> plasma_soc_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                     // plasma_soc_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                     // avalon_st_adapter:out_0_error -> plasma_soc_0_avalon_slave_0_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (34),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) hps_to_plasma_dma_write_master_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                                       //                       clk.clk
		.reset                  (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address            (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (hps_to_plasma_dma_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (hps_to_plasma_dma_write_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (hps_to_plasma_dma_write_master_burstcount),                                         //                          .burstcount
		.av_byteenable          (hps_to_plasma_dma_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect          (hps_to_plasma_dma_write_master_chipselect),                                         //                          .chipselect
		.av_write               (hps_to_plasma_dma_write_master_write),                                              //                          .write
		.av_writedata           (hps_to_plasma_dma_write_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                                              //               (terminated)
		.av_read                (1'b0),                                                                              //               (terminated)
		.av_readdata            (),                                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                                  //               (terminated)
		.av_lock                (1'b0),                                                                              //               (terminated)
		.av_debugaccess         (1'b0),                                                                              //               (terminated)
		.uav_clken              (),                                                                                  //               (terminated)
		.av_clken               (1'b1),                                                                              //               (terminated)
		.uav_response           (2'b00),                                                                             //               (terminated)
		.av_response            (),                                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (32),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (34),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (1),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) plasma_soc_0_avalon_slave_0_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                         //                      clk.clk
		.reset                  (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (plasma_soc_0_avalon_slave_0_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (plasma_soc_0_avalon_slave_0_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (plasma_soc_0_avalon_slave_0_agent_m0_read),           //                         .read
		.uav_write              (plasma_soc_0_avalon_slave_0_agent_m0_write),          //                         .write
		.uav_waitrequest        (plasma_soc_0_avalon_slave_0_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (plasma_soc_0_avalon_slave_0_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (plasma_soc_0_avalon_slave_0_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (plasma_soc_0_avalon_slave_0_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (plasma_soc_0_avalon_slave_0_agent_m0_writedata),      //                         .writedata
		.uav_lock               (plasma_soc_0_avalon_slave_0_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (plasma_soc_0_avalon_slave_0_agent_m0_debugaccess),    //                         .debugaccess
		.uav_response           (plasma_soc_0_avalon_slave_0_agent_m0_response),       //                         .response
		.av_address             (plasma_soc_0_avalon_slave_0_address),                 //      avalon_anti_slave_0.address
		.av_write               (plasma_soc_0_avalon_slave_0_write),                   //                         .write
		.av_read                (plasma_soc_0_avalon_slave_0_read),                    //                         .read
		.av_readdata            (plasma_soc_0_avalon_slave_0_readdata),                //                         .readdata
		.av_writedata           (plasma_soc_0_avalon_slave_0_writedata),               //                         .writedata
		.av_byteenable          (plasma_soc_0_avalon_slave_0_byteenable),              //                         .byteenable
		.av_waitrequest         (plasma_soc_0_avalon_slave_0_waitrequest),             //                         .waitrequest
		.av_response            (plasma_soc_0_avalon_slave_0_response),                //                         .response
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (110),
		.PKT_ORI_BURST_SIZE_L      (108),
		.PKT_RESPONSE_STATUS_H     (107),
		.PKT_RESPONSE_STATUS_L     (106),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (105),
		.PKT_CACHE_L               (102),
		.PKT_THREAD_ID_H           (98),
		.PKT_THREAD_ID_L           (98),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (75),
		.PKT_TRANS_LOCK            (74),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (101),
		.PKT_PROTECTION_L          (99),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (76),
		.PKT_ADDR_H                (69),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (70),
		.PKT_TRANS_POSTED          (71),
		.PKT_TRANS_WRITE           (72),
		.PKT_TRANS_READ            (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (97),
		.PKT_DEST_ID_L             (97),
		.ST_DATA_W                 (111),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hps_to_plasma_dma_write_master_agent (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                                                       //       clk.clk
		.reset                 (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address            (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (hps_to_plasma_dma_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (hps_to_plasma_dma_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (hps_to_plasma_dma_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (hps_to_plasma_dma_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (hps_to_plasma_dma_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (hps_to_plasma_dma_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                 //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                  //          .data
		.rp_channel            (rsp_mux_src_channel),                                                               //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                           //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                 //          .ready
		.av_response           (),                                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (110),
		.PKT_ORI_BURST_SIZE_L      (108),
		.PKT_RESPONSE_STATUS_H     (107),
		.PKT_RESPONSE_STATUS_L     (106),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (74),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (101),
		.PKT_PROTECTION_L          (99),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (86),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (76),
		.PKT_ADDR_H                (69),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (70),
		.PKT_TRANS_POSTED          (71),
		.PKT_TRANS_WRITE           (72),
		.PKT_TRANS_READ            (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (97),
		.PKT_DEST_ID_L             (97),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (111),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (1),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) plasma_soc_0_avalon_slave_0_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                     //             clk.clk
		.reset                   (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (plasma_soc_0_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (plasma_soc_0_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (plasma_soc_0_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (plasma_soc_0_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (plasma_soc_0_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (plasma_soc_0_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (plasma_soc_0_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (plasma_soc_0_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (plasma_soc_0_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (plasma_soc_0_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (plasma_soc_0_avalon_slave_0_agent_m0_write),                      //                .write
		.m0_response             (plasma_soc_0_avalon_slave_0_agent_m0_response),                   //                .response
		.rp_endofpacket          (plasma_soc_0_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (plasma_soc_0_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (plasma_soc_0_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (plasma_soc_0_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (plasma_soc_0_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (plasma_soc_0_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (plasma_soc_0_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (plasma_soc_0_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (plasma_soc_0_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (plasma_soc_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (plasma_soc_0_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (plasma_soc_0_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (plasma_soc_0_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (plasma_soc_0_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (plasma_soc_0_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (plasma_soc_0_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (plasma_soc_0_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (plasma_soc_0_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (plasma_soc_0_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (112),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) plasma_soc_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                  //       clk.clk
		.reset             (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (plasma_soc_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (plasma_soc_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (plasma_soc_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (plasma_soc_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (plasma_soc_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (plasma_soc_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	de1_soc_mm_interconnect_3_router router (
		.sink_ready         (hps_to_plasma_dma_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (hps_to_plasma_dma_write_master_agent_cp_valid),         //          .valid
		.sink_data          (hps_to_plasma_dma_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (hps_to_plasma_dma_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_to_plasma_dma_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                           //       clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_src_ready),                                      //       src.ready
		.src_valid          (router_src_valid),                                      //          .valid
		.src_data           (router_src_data),                                       //          .data
		.src_channel        (router_src_channel),                                    //          .channel
		.src_startofpacket  (router_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                 //          .endofpacket
	);

	de1_soc_mm_interconnect_3_router_001 router_001 (
		.sink_ready         (plasma_soc_0_avalon_slave_0_agent_rp_ready),          //      sink.ready
		.sink_valid         (plasma_soc_0_avalon_slave_0_agent_rp_valid),          //          .valid
		.sink_data          (plasma_soc_0_avalon_slave_0_agent_rp_data),           //          .data
		.sink_startofpacket (plasma_soc_0_avalon_slave_0_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (plasma_soc_0_avalon_slave_0_agent_rp_endofpacket),    //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                //       src.ready
		.src_valid          (router_001_src_valid),                                //          .valid
		.src_data           (router_001_src_data),                                 //          .data
		.src_channel        (router_001_src_channel),                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (69),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (85),
		.PKT_BYTE_CNT_L            (76),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (86),
		.PKT_TRANS_COMPRESSED_READ (70),
		.PKT_TRANS_WRITE           (72),
		.PKT_TRANS_READ            (73),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (111),
		.ST_CHANNEL_W              (1),
		.OUT_BYTE_CNT_H            (78),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) plasma_soc_0_avalon_slave_0_burst_adapter (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                                     //       cr0.clk
		.reset                 (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                               //          .ready
		.source0_valid         (plasma_soc_0_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (plasma_soc_0_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (plasma_soc_0_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (plasma_soc_0_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (plasma_soc_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (plasma_soc_0_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	de1_soc_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                    //      sink.ready
		.sink_channel       (router_src_channel),                                  //          .channel
		.sink_data          (router_src_data),                                     //          .data
		.sink_startofpacket (router_src_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                              //          .endofpacket
		.sink_valid         (router_src_valid),                                    //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                //          .valid
		.src0_data          (cmd_demux_src0_data),                                 //          .data
		.src0_channel       (cmd_demux_src0_channel),                              //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                           //          .endofpacket
	);

	de1_soc_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset               (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                   //          .valid
		.src_data            (cmd_mux_src_data),                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                              //          .channel
		.sink0_data          (cmd_demux_src0_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                           //          .endofpacket
	);

	de1_soc_mm_interconnect_3_cmd_demux rsp_demux (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                //      sink.ready
		.sink_channel       (router_001_src_channel),                              //          .channel
		.sink_data          (router_001_src_data),                                 //          .data
		.sink_startofpacket (router_001_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_001_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                           //          .endofpacket
	);

	de1_soc_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset               (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                   //          .valid
		.src_data            (rsp_mux_src_data),                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                              //          .channel
		.sink0_data          (rsp_demux_src0_data),                                 //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                           //          .endofpacket
	);

	de1_soc_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (plasma_soc_0_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (plasma_soc_0_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (plasma_soc_0_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

endmodule
