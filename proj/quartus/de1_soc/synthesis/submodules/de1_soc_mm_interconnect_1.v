// de1_soc_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.0 614

`timescale 1 ps / 1 ps
module de1_soc_mm_interconnect_1 (
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire        sys_sdram_pll_0_sys_clk_clk,                                         //                                       sys_sdram_pll_0_sys_clk.clk
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        hps_to_plasma_dma_reset_reset_bridge_in_reset_reset,                 //                 hps_to_plasma_dma_reset_reset_bridge_in_reset.reset
		input  wire [5:0]  hps_to_plasma_dma_read_master_address,                               //                                 hps_to_plasma_dma_read_master.address
		output wire        hps_to_plasma_dma_read_master_waitrequest,                           //                                                              .waitrequest
		input  wire        hps_to_plasma_dma_read_master_chipselect,                            //                                                              .chipselect
		input  wire        hps_to_plasma_dma_read_master_read,                                  //                                                              .read
		output wire [31:0] hps_to_plasma_dma_read_master_readdata,                              //                                                              .readdata
		output wire        hps_to_plasma_dma_read_master_readdatavalid,                         //                                                              .readdatavalid
		output wire [2:0]  dma_0_control_port_slave_address,                                    //                                      dma_0_control_port_slave.address
		output wire        dma_0_control_port_slave_write,                                      //                                                              .write
		input  wire [31:0] dma_0_control_port_slave_readdata,                                   //                                                              .readdata
		output wire [31:0] dma_0_control_port_slave_writedata,                                  //                                                              .writedata
		output wire        dma_0_control_port_slave_chipselect,                                 //                                                              .chipselect
		output wire [2:0]  hps_to_plasma_dma_control_port_slave_address,                        //                          hps_to_plasma_dma_control_port_slave.address
		output wire        hps_to_plasma_dma_control_port_slave_write,                          //                                                              .write
		input  wire [31:0] hps_to_plasma_dma_control_port_slave_readdata,                       //                                                              .readdata
		output wire [31:0] hps_to_plasma_dma_control_port_slave_writedata,                      //                                                              .writedata
		output wire        hps_to_plasma_dma_control_port_slave_chipselect,                     //                                                              .chipselect
		output wire [1:0]  keys_s1_address,                                                     //                                                       keys_s1.address
		output wire        keys_s1_write,                                                       //                                                              .write
		input  wire [31:0] keys_s1_readdata,                                                    //                                                              .readdata
		output wire [31:0] keys_s1_writedata,                                                   //                                                              .writedata
		output wire        keys_s1_chipselect,                                                  //                                                              .chipselect
		output wire [1:0]  switches_s1_address,                                                 //                                                   switches_s1.address
		output wire        switches_s1_write,                                                   //                                                              .write
		input  wire [31:0] switches_s1_readdata,                                                //                                                              .readdata
		output wire [31:0] switches_s1_writedata,                                               //                                                              .writedata
		output wire        switches_s1_chipselect                                               //                                                              .chipselect
	);

	wire          hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_waitrequest;   // hps_to_plasma_dma_read_master_agent:av_waitrequest -> hps_to_plasma_dma_read_master_translator:uav_waitrequest
	wire   [31:0] hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_readdata;      // hps_to_plasma_dma_read_master_agent:av_readdata -> hps_to_plasma_dma_read_master_translator:uav_readdata
	wire          hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_debugaccess;   // hps_to_plasma_dma_read_master_translator:uav_debugaccess -> hps_to_plasma_dma_read_master_agent:av_debugaccess
	wire   [20:0] hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_address;       // hps_to_plasma_dma_read_master_translator:uav_address -> hps_to_plasma_dma_read_master_agent:av_address
	wire          hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_read;          // hps_to_plasma_dma_read_master_translator:uav_read -> hps_to_plasma_dma_read_master_agent:av_read
	wire    [3:0] hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_byteenable;    // hps_to_plasma_dma_read_master_translator:uav_byteenable -> hps_to_plasma_dma_read_master_agent:av_byteenable
	wire          hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_readdatavalid; // hps_to_plasma_dma_read_master_agent:av_readdatavalid -> hps_to_plasma_dma_read_master_translator:uav_readdatavalid
	wire          hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_lock;          // hps_to_plasma_dma_read_master_translator:uav_lock -> hps_to_plasma_dma_read_master_agent:av_lock
	wire          hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_write;         // hps_to_plasma_dma_read_master_translator:uav_write -> hps_to_plasma_dma_read_master_agent:av_write
	wire   [31:0] hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_writedata;     // hps_to_plasma_dma_read_master_translator:uav_writedata -> hps_to_plasma_dma_read_master_agent:av_writedata
	wire    [2:0] hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_burstcount;    // hps_to_plasma_dma_read_master_translator:uav_burstcount -> hps_to_plasma_dma_read_master_agent:av_burstcount
	wire   [31:0] hps_to_plasma_dma_control_port_slave_agent_m0_readdata;                           // hps_to_plasma_dma_control_port_slave_translator:uav_readdata -> hps_to_plasma_dma_control_port_slave_agent:m0_readdata
	wire          hps_to_plasma_dma_control_port_slave_agent_m0_waitrequest;                        // hps_to_plasma_dma_control_port_slave_translator:uav_waitrequest -> hps_to_plasma_dma_control_port_slave_agent:m0_waitrequest
	wire          hps_to_plasma_dma_control_port_slave_agent_m0_debugaccess;                        // hps_to_plasma_dma_control_port_slave_agent:m0_debugaccess -> hps_to_plasma_dma_control_port_slave_translator:uav_debugaccess
	wire   [20:0] hps_to_plasma_dma_control_port_slave_agent_m0_address;                            // hps_to_plasma_dma_control_port_slave_agent:m0_address -> hps_to_plasma_dma_control_port_slave_translator:uav_address
	wire    [3:0] hps_to_plasma_dma_control_port_slave_agent_m0_byteenable;                         // hps_to_plasma_dma_control_port_slave_agent:m0_byteenable -> hps_to_plasma_dma_control_port_slave_translator:uav_byteenable
	wire          hps_to_plasma_dma_control_port_slave_agent_m0_read;                               // hps_to_plasma_dma_control_port_slave_agent:m0_read -> hps_to_plasma_dma_control_port_slave_translator:uav_read
	wire          hps_to_plasma_dma_control_port_slave_agent_m0_readdatavalid;                      // hps_to_plasma_dma_control_port_slave_translator:uav_readdatavalid -> hps_to_plasma_dma_control_port_slave_agent:m0_readdatavalid
	wire          hps_to_plasma_dma_control_port_slave_agent_m0_lock;                               // hps_to_plasma_dma_control_port_slave_agent:m0_lock -> hps_to_plasma_dma_control_port_slave_translator:uav_lock
	wire   [31:0] hps_to_plasma_dma_control_port_slave_agent_m0_writedata;                          // hps_to_plasma_dma_control_port_slave_agent:m0_writedata -> hps_to_plasma_dma_control_port_slave_translator:uav_writedata
	wire          hps_to_plasma_dma_control_port_slave_agent_m0_write;                              // hps_to_plasma_dma_control_port_slave_agent:m0_write -> hps_to_plasma_dma_control_port_slave_translator:uav_write
	wire    [2:0] hps_to_plasma_dma_control_port_slave_agent_m0_burstcount;                         // hps_to_plasma_dma_control_port_slave_agent:m0_burstcount -> hps_to_plasma_dma_control_port_slave_translator:uav_burstcount
	wire          hps_to_plasma_dma_control_port_slave_agent_rf_source_valid;                       // hps_to_plasma_dma_control_port_slave_agent:rf_source_valid -> hps_to_plasma_dma_control_port_slave_agent_rsp_fifo:in_valid
	wire  [114:0] hps_to_plasma_dma_control_port_slave_agent_rf_source_data;                        // hps_to_plasma_dma_control_port_slave_agent:rf_source_data -> hps_to_plasma_dma_control_port_slave_agent_rsp_fifo:in_data
	wire          hps_to_plasma_dma_control_port_slave_agent_rf_source_ready;                       // hps_to_plasma_dma_control_port_slave_agent_rsp_fifo:in_ready -> hps_to_plasma_dma_control_port_slave_agent:rf_source_ready
	wire          hps_to_plasma_dma_control_port_slave_agent_rf_source_startofpacket;               // hps_to_plasma_dma_control_port_slave_agent:rf_source_startofpacket -> hps_to_plasma_dma_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire          hps_to_plasma_dma_control_port_slave_agent_rf_source_endofpacket;                 // hps_to_plasma_dma_control_port_slave_agent:rf_source_endofpacket -> hps_to_plasma_dma_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire          hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_valid;                    // hps_to_plasma_dma_control_port_slave_agent_rsp_fifo:out_valid -> hps_to_plasma_dma_control_port_slave_agent:rf_sink_valid
	wire  [114:0] hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_data;                     // hps_to_plasma_dma_control_port_slave_agent_rsp_fifo:out_data -> hps_to_plasma_dma_control_port_slave_agent:rf_sink_data
	wire          hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_ready;                    // hps_to_plasma_dma_control_port_slave_agent:rf_sink_ready -> hps_to_plasma_dma_control_port_slave_agent_rsp_fifo:out_ready
	wire          hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_startofpacket;            // hps_to_plasma_dma_control_port_slave_agent_rsp_fifo:out_startofpacket -> hps_to_plasma_dma_control_port_slave_agent:rf_sink_startofpacket
	wire          hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_endofpacket;              // hps_to_plasma_dma_control_port_slave_agent_rsp_fifo:out_endofpacket -> hps_to_plasma_dma_control_port_slave_agent:rf_sink_endofpacket
	wire          hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_src_valid;                  // hps_to_plasma_dma_control_port_slave_agent:rdata_fifo_src_valid -> hps_to_plasma_dma_control_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_src_data;                   // hps_to_plasma_dma_control_port_slave_agent:rdata_fifo_src_data -> hps_to_plasma_dma_control_port_slave_agent_rdata_fifo:in_data
	wire          hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_src_ready;                  // hps_to_plasma_dma_control_port_slave_agent_rdata_fifo:in_ready -> hps_to_plasma_dma_control_port_slave_agent:rdata_fifo_src_ready
	wire   [31:0] dma_0_control_port_slave_agent_m0_readdata;                                       // dma_0_control_port_slave_translator:uav_readdata -> dma_0_control_port_slave_agent:m0_readdata
	wire          dma_0_control_port_slave_agent_m0_waitrequest;                                    // dma_0_control_port_slave_translator:uav_waitrequest -> dma_0_control_port_slave_agent:m0_waitrequest
	wire          dma_0_control_port_slave_agent_m0_debugaccess;                                    // dma_0_control_port_slave_agent:m0_debugaccess -> dma_0_control_port_slave_translator:uav_debugaccess
	wire   [20:0] dma_0_control_port_slave_agent_m0_address;                                        // dma_0_control_port_slave_agent:m0_address -> dma_0_control_port_slave_translator:uav_address
	wire    [3:0] dma_0_control_port_slave_agent_m0_byteenable;                                     // dma_0_control_port_slave_agent:m0_byteenable -> dma_0_control_port_slave_translator:uav_byteenable
	wire          dma_0_control_port_slave_agent_m0_read;                                           // dma_0_control_port_slave_agent:m0_read -> dma_0_control_port_slave_translator:uav_read
	wire          dma_0_control_port_slave_agent_m0_readdatavalid;                                  // dma_0_control_port_slave_translator:uav_readdatavalid -> dma_0_control_port_slave_agent:m0_readdatavalid
	wire          dma_0_control_port_slave_agent_m0_lock;                                           // dma_0_control_port_slave_agent:m0_lock -> dma_0_control_port_slave_translator:uav_lock
	wire   [31:0] dma_0_control_port_slave_agent_m0_writedata;                                      // dma_0_control_port_slave_agent:m0_writedata -> dma_0_control_port_slave_translator:uav_writedata
	wire          dma_0_control_port_slave_agent_m0_write;                                          // dma_0_control_port_slave_agent:m0_write -> dma_0_control_port_slave_translator:uav_write
	wire    [2:0] dma_0_control_port_slave_agent_m0_burstcount;                                     // dma_0_control_port_slave_agent:m0_burstcount -> dma_0_control_port_slave_translator:uav_burstcount
	wire          dma_0_control_port_slave_agent_rf_source_valid;                                   // dma_0_control_port_slave_agent:rf_source_valid -> dma_0_control_port_slave_agent_rsp_fifo:in_valid
	wire  [114:0] dma_0_control_port_slave_agent_rf_source_data;                                    // dma_0_control_port_slave_agent:rf_source_data -> dma_0_control_port_slave_agent_rsp_fifo:in_data
	wire          dma_0_control_port_slave_agent_rf_source_ready;                                   // dma_0_control_port_slave_agent_rsp_fifo:in_ready -> dma_0_control_port_slave_agent:rf_source_ready
	wire          dma_0_control_port_slave_agent_rf_source_startofpacket;                           // dma_0_control_port_slave_agent:rf_source_startofpacket -> dma_0_control_port_slave_agent_rsp_fifo:in_startofpacket
	wire          dma_0_control_port_slave_agent_rf_source_endofpacket;                             // dma_0_control_port_slave_agent:rf_source_endofpacket -> dma_0_control_port_slave_agent_rsp_fifo:in_endofpacket
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_valid;                                // dma_0_control_port_slave_agent_rsp_fifo:out_valid -> dma_0_control_port_slave_agent:rf_sink_valid
	wire  [114:0] dma_0_control_port_slave_agent_rsp_fifo_out_data;                                 // dma_0_control_port_slave_agent_rsp_fifo:out_data -> dma_0_control_port_slave_agent:rf_sink_data
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_ready;                                // dma_0_control_port_slave_agent:rf_sink_ready -> dma_0_control_port_slave_agent_rsp_fifo:out_ready
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket;                        // dma_0_control_port_slave_agent_rsp_fifo:out_startofpacket -> dma_0_control_port_slave_agent:rf_sink_startofpacket
	wire          dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket;                          // dma_0_control_port_slave_agent_rsp_fifo:out_endofpacket -> dma_0_control_port_slave_agent:rf_sink_endofpacket
	wire          dma_0_control_port_slave_agent_rdata_fifo_src_valid;                              // dma_0_control_port_slave_agent:rdata_fifo_src_valid -> dma_0_control_port_slave_agent_rdata_fifo:in_valid
	wire   [33:0] dma_0_control_port_slave_agent_rdata_fifo_src_data;                               // dma_0_control_port_slave_agent:rdata_fifo_src_data -> dma_0_control_port_slave_agent_rdata_fifo:in_data
	wire          dma_0_control_port_slave_agent_rdata_fifo_src_ready;                              // dma_0_control_port_slave_agent_rdata_fifo:in_ready -> dma_0_control_port_slave_agent:rdata_fifo_src_ready
	wire   [31:0] switches_s1_agent_m0_readdata;                                                    // switches_s1_translator:uav_readdata -> switches_s1_agent:m0_readdata
	wire          switches_s1_agent_m0_waitrequest;                                                 // switches_s1_translator:uav_waitrequest -> switches_s1_agent:m0_waitrequest
	wire          switches_s1_agent_m0_debugaccess;                                                 // switches_s1_agent:m0_debugaccess -> switches_s1_translator:uav_debugaccess
	wire   [20:0] switches_s1_agent_m0_address;                                                     // switches_s1_agent:m0_address -> switches_s1_translator:uav_address
	wire    [3:0] switches_s1_agent_m0_byteenable;                                                  // switches_s1_agent:m0_byteenable -> switches_s1_translator:uav_byteenable
	wire          switches_s1_agent_m0_read;                                                        // switches_s1_agent:m0_read -> switches_s1_translator:uav_read
	wire          switches_s1_agent_m0_readdatavalid;                                               // switches_s1_translator:uav_readdatavalid -> switches_s1_agent:m0_readdatavalid
	wire          switches_s1_agent_m0_lock;                                                        // switches_s1_agent:m0_lock -> switches_s1_translator:uav_lock
	wire   [31:0] switches_s1_agent_m0_writedata;                                                   // switches_s1_agent:m0_writedata -> switches_s1_translator:uav_writedata
	wire          switches_s1_agent_m0_write;                                                       // switches_s1_agent:m0_write -> switches_s1_translator:uav_write
	wire    [2:0] switches_s1_agent_m0_burstcount;                                                  // switches_s1_agent:m0_burstcount -> switches_s1_translator:uav_burstcount
	wire          switches_s1_agent_rf_source_valid;                                                // switches_s1_agent:rf_source_valid -> switches_s1_agent_rsp_fifo:in_valid
	wire  [114:0] switches_s1_agent_rf_source_data;                                                 // switches_s1_agent:rf_source_data -> switches_s1_agent_rsp_fifo:in_data
	wire          switches_s1_agent_rf_source_ready;                                                // switches_s1_agent_rsp_fifo:in_ready -> switches_s1_agent:rf_source_ready
	wire          switches_s1_agent_rf_source_startofpacket;                                        // switches_s1_agent:rf_source_startofpacket -> switches_s1_agent_rsp_fifo:in_startofpacket
	wire          switches_s1_agent_rf_source_endofpacket;                                          // switches_s1_agent:rf_source_endofpacket -> switches_s1_agent_rsp_fifo:in_endofpacket
	wire          switches_s1_agent_rsp_fifo_out_valid;                                             // switches_s1_agent_rsp_fifo:out_valid -> switches_s1_agent:rf_sink_valid
	wire  [114:0] switches_s1_agent_rsp_fifo_out_data;                                              // switches_s1_agent_rsp_fifo:out_data -> switches_s1_agent:rf_sink_data
	wire          switches_s1_agent_rsp_fifo_out_ready;                                             // switches_s1_agent:rf_sink_ready -> switches_s1_agent_rsp_fifo:out_ready
	wire          switches_s1_agent_rsp_fifo_out_startofpacket;                                     // switches_s1_agent_rsp_fifo:out_startofpacket -> switches_s1_agent:rf_sink_startofpacket
	wire          switches_s1_agent_rsp_fifo_out_endofpacket;                                       // switches_s1_agent_rsp_fifo:out_endofpacket -> switches_s1_agent:rf_sink_endofpacket
	wire          switches_s1_agent_rdata_fifo_src_valid;                                           // switches_s1_agent:rdata_fifo_src_valid -> switches_s1_agent_rdata_fifo:in_valid
	wire   [33:0] switches_s1_agent_rdata_fifo_src_data;                                            // switches_s1_agent:rdata_fifo_src_data -> switches_s1_agent_rdata_fifo:in_data
	wire          switches_s1_agent_rdata_fifo_src_ready;                                           // switches_s1_agent_rdata_fifo:in_ready -> switches_s1_agent:rdata_fifo_src_ready
	wire   [31:0] keys_s1_agent_m0_readdata;                                                        // keys_s1_translator:uav_readdata -> keys_s1_agent:m0_readdata
	wire          keys_s1_agent_m0_waitrequest;                                                     // keys_s1_translator:uav_waitrequest -> keys_s1_agent:m0_waitrequest
	wire          keys_s1_agent_m0_debugaccess;                                                     // keys_s1_agent:m0_debugaccess -> keys_s1_translator:uav_debugaccess
	wire   [20:0] keys_s1_agent_m0_address;                                                         // keys_s1_agent:m0_address -> keys_s1_translator:uav_address
	wire    [3:0] keys_s1_agent_m0_byteenable;                                                      // keys_s1_agent:m0_byteenable -> keys_s1_translator:uav_byteenable
	wire          keys_s1_agent_m0_read;                                                            // keys_s1_agent:m0_read -> keys_s1_translator:uav_read
	wire          keys_s1_agent_m0_readdatavalid;                                                   // keys_s1_translator:uav_readdatavalid -> keys_s1_agent:m0_readdatavalid
	wire          keys_s1_agent_m0_lock;                                                            // keys_s1_agent:m0_lock -> keys_s1_translator:uav_lock
	wire   [31:0] keys_s1_agent_m0_writedata;                                                       // keys_s1_agent:m0_writedata -> keys_s1_translator:uav_writedata
	wire          keys_s1_agent_m0_write;                                                           // keys_s1_agent:m0_write -> keys_s1_translator:uav_write
	wire    [2:0] keys_s1_agent_m0_burstcount;                                                      // keys_s1_agent:m0_burstcount -> keys_s1_translator:uav_burstcount
	wire          keys_s1_agent_rf_source_valid;                                                    // keys_s1_agent:rf_source_valid -> keys_s1_agent_rsp_fifo:in_valid
	wire  [114:0] keys_s1_agent_rf_source_data;                                                     // keys_s1_agent:rf_source_data -> keys_s1_agent_rsp_fifo:in_data
	wire          keys_s1_agent_rf_source_ready;                                                    // keys_s1_agent_rsp_fifo:in_ready -> keys_s1_agent:rf_source_ready
	wire          keys_s1_agent_rf_source_startofpacket;                                            // keys_s1_agent:rf_source_startofpacket -> keys_s1_agent_rsp_fifo:in_startofpacket
	wire          keys_s1_agent_rf_source_endofpacket;                                              // keys_s1_agent:rf_source_endofpacket -> keys_s1_agent_rsp_fifo:in_endofpacket
	wire          keys_s1_agent_rsp_fifo_out_valid;                                                 // keys_s1_agent_rsp_fifo:out_valid -> keys_s1_agent:rf_sink_valid
	wire  [114:0] keys_s1_agent_rsp_fifo_out_data;                                                  // keys_s1_agent_rsp_fifo:out_data -> keys_s1_agent:rf_sink_data
	wire          keys_s1_agent_rsp_fifo_out_ready;                                                 // keys_s1_agent:rf_sink_ready -> keys_s1_agent_rsp_fifo:out_ready
	wire          keys_s1_agent_rsp_fifo_out_startofpacket;                                         // keys_s1_agent_rsp_fifo:out_startofpacket -> keys_s1_agent:rf_sink_startofpacket
	wire          keys_s1_agent_rsp_fifo_out_endofpacket;                                           // keys_s1_agent_rsp_fifo:out_endofpacket -> keys_s1_agent:rf_sink_endofpacket
	wire          keys_s1_agent_rdata_fifo_src_valid;                                               // keys_s1_agent:rdata_fifo_src_valid -> keys_s1_agent_rdata_fifo:in_valid
	wire   [33:0] keys_s1_agent_rdata_fifo_src_data;                                                // keys_s1_agent:rdata_fifo_src_data -> keys_s1_agent_rdata_fifo:in_data
	wire          keys_s1_agent_rdata_fifo_src_ready;                                               // keys_s1_agent_rdata_fifo:in_ready -> keys_s1_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                                     // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [113:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                                      // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                                     // router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;                             // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                               // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                                      // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [113:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                                       // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                                      // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                              // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                                // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          hps_to_plasma_dma_read_master_agent_cp_valid;                                     // hps_to_plasma_dma_read_master_agent:cp_valid -> router_002:sink_valid
	wire  [113:0] hps_to_plasma_dma_read_master_agent_cp_data;                                      // hps_to_plasma_dma_read_master_agent:cp_data -> router_002:sink_data
	wire          hps_to_plasma_dma_read_master_agent_cp_ready;                                     // router_002:sink_ready -> hps_to_plasma_dma_read_master_agent:cp_ready
	wire          hps_to_plasma_dma_read_master_agent_cp_startofpacket;                             // hps_to_plasma_dma_read_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          hps_to_plasma_dma_read_master_agent_cp_endofpacket;                               // hps_to_plasma_dma_read_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          hps_to_plasma_dma_control_port_slave_agent_rp_valid;                              // hps_to_plasma_dma_control_port_slave_agent:rp_valid -> router_003:sink_valid
	wire  [113:0] hps_to_plasma_dma_control_port_slave_agent_rp_data;                               // hps_to_plasma_dma_control_port_slave_agent:rp_data -> router_003:sink_data
	wire          hps_to_plasma_dma_control_port_slave_agent_rp_ready;                              // router_003:sink_ready -> hps_to_plasma_dma_control_port_slave_agent:rp_ready
	wire          hps_to_plasma_dma_control_port_slave_agent_rp_startofpacket;                      // hps_to_plasma_dma_control_port_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          hps_to_plasma_dma_control_port_slave_agent_rp_endofpacket;                        // hps_to_plasma_dma_control_port_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                             // router_003:src_valid -> rsp_demux:sink_valid
	wire  [113:0] router_003_src_data;                                                              // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                             // rsp_demux:sink_ready -> router_003:src_ready
	wire    [3:0] router_003_src_channel;                                                           // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                     // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                       // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          dma_0_control_port_slave_agent_rp_valid;                                          // dma_0_control_port_slave_agent:rp_valid -> router_004:sink_valid
	wire  [113:0] dma_0_control_port_slave_agent_rp_data;                                           // dma_0_control_port_slave_agent:rp_data -> router_004:sink_data
	wire          dma_0_control_port_slave_agent_rp_ready;                                          // router_004:sink_ready -> dma_0_control_port_slave_agent:rp_ready
	wire          dma_0_control_port_slave_agent_rp_startofpacket;                                  // dma_0_control_port_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          dma_0_control_port_slave_agent_rp_endofpacket;                                    // dma_0_control_port_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                             // router_004:src_valid -> rsp_demux_001:sink_valid
	wire  [113:0] router_004_src_data;                                                              // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                             // rsp_demux_001:sink_ready -> router_004:src_ready
	wire    [3:0] router_004_src_channel;                                                           // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                     // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                       // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          switches_s1_agent_rp_valid;                                                       // switches_s1_agent:rp_valid -> router_005:sink_valid
	wire  [113:0] switches_s1_agent_rp_data;                                                        // switches_s1_agent:rp_data -> router_005:sink_data
	wire          switches_s1_agent_rp_ready;                                                       // router_005:sink_ready -> switches_s1_agent:rp_ready
	wire          switches_s1_agent_rp_startofpacket;                                               // switches_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          switches_s1_agent_rp_endofpacket;                                                 // switches_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                             // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [113:0] router_005_src_data;                                                              // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                             // rsp_demux_002:sink_ready -> router_005:src_ready
	wire    [3:0] router_005_src_channel;                                                           // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                     // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                       // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          keys_s1_agent_rp_valid;                                                           // keys_s1_agent:rp_valid -> router_006:sink_valid
	wire  [113:0] keys_s1_agent_rp_data;                                                            // keys_s1_agent:rp_data -> router_006:sink_data
	wire          keys_s1_agent_rp_ready;                                                           // router_006:sink_ready -> keys_s1_agent:rp_ready
	wire          keys_s1_agent_rp_startofpacket;                                                   // keys_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          keys_s1_agent_rp_endofpacket;                                                     // keys_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                             // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [113:0] router_006_src_data;                                                              // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                             // rsp_demux_003:sink_ready -> router_006:src_ready
	wire    [3:0] router_006_src_channel;                                                           // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                     // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                       // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_src_valid;                                                                 // router:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [113:0] router_src_data;                                                                  // router:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                                 // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [3:0] router_src_channel;                                                               // router:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                         // router:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                           // router:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [113:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                                  // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                                 // cmd_demux:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire    [3:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                               // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                         // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                           // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                // rsp_mux:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [113:0] rsp_mux_src_data;                                                                 // rsp_mux:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [3:0] rsp_mux_src_channel;                                                              // rsp_mux:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                        // rsp_mux:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                          // rsp_mux:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                                 // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [113:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                                  // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                                 // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire    [3:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                               // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                         // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                           // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                             // router_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [113:0] router_001_src_data;                                                              // router_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                             // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [3:0] router_001_src_channel;                                                           // router_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                     // router_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                       // router_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [113:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                                  // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                                 // cmd_demux_001:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire    [3:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                               // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                         // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                           // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                            // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [113:0] rsp_mux_001_src_data;                                                             // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                            // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [3:0] rsp_mux_001_src_channel;                                                          // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                    // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                      // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                                 // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [113:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                                  // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                                 // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire    [3:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                               // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                         // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                           // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          router_002_src_valid;                                                             // router_002:src_valid -> hps_to_plasma_dma_read_master_limiter:cmd_sink_valid
	wire  [113:0] router_002_src_data;                                                              // router_002:src_data -> hps_to_plasma_dma_read_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                             // hps_to_plasma_dma_read_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [3:0] router_002_src_channel;                                                           // router_002:src_channel -> hps_to_plasma_dma_read_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                     // router_002:src_startofpacket -> hps_to_plasma_dma_read_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                       // router_002:src_endofpacket -> hps_to_plasma_dma_read_master_limiter:cmd_sink_endofpacket
	wire  [113:0] hps_to_plasma_dma_read_master_limiter_cmd_src_data;                               // hps_to_plasma_dma_read_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          hps_to_plasma_dma_read_master_limiter_cmd_src_ready;                              // cmd_demux_002:sink_ready -> hps_to_plasma_dma_read_master_limiter:cmd_src_ready
	wire    [3:0] hps_to_plasma_dma_read_master_limiter_cmd_src_channel;                            // hps_to_plasma_dma_read_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          hps_to_plasma_dma_read_master_limiter_cmd_src_startofpacket;                      // hps_to_plasma_dma_read_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          hps_to_plasma_dma_read_master_limiter_cmd_src_endofpacket;                        // hps_to_plasma_dma_read_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                            // rsp_mux_002:src_valid -> hps_to_plasma_dma_read_master_limiter:rsp_sink_valid
	wire  [113:0] rsp_mux_002_src_data;                                                             // rsp_mux_002:src_data -> hps_to_plasma_dma_read_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                            // hps_to_plasma_dma_read_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire    [3:0] rsp_mux_002_src_channel;                                                          // rsp_mux_002:src_channel -> hps_to_plasma_dma_read_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                    // rsp_mux_002:src_startofpacket -> hps_to_plasma_dma_read_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                      // rsp_mux_002:src_endofpacket -> hps_to_plasma_dma_read_master_limiter:rsp_sink_endofpacket
	wire          hps_to_plasma_dma_read_master_limiter_rsp_src_valid;                              // hps_to_plasma_dma_read_master_limiter:rsp_src_valid -> hps_to_plasma_dma_read_master_agent:rp_valid
	wire  [113:0] hps_to_plasma_dma_read_master_limiter_rsp_src_data;                               // hps_to_plasma_dma_read_master_limiter:rsp_src_data -> hps_to_plasma_dma_read_master_agent:rp_data
	wire          hps_to_plasma_dma_read_master_limiter_rsp_src_ready;                              // hps_to_plasma_dma_read_master_agent:rp_ready -> hps_to_plasma_dma_read_master_limiter:rsp_src_ready
	wire    [3:0] hps_to_plasma_dma_read_master_limiter_rsp_src_channel;                            // hps_to_plasma_dma_read_master_limiter:rsp_src_channel -> hps_to_plasma_dma_read_master_agent:rp_channel
	wire          hps_to_plasma_dma_read_master_limiter_rsp_src_startofpacket;                      // hps_to_plasma_dma_read_master_limiter:rsp_src_startofpacket -> hps_to_plasma_dma_read_master_agent:rp_startofpacket
	wire          hps_to_plasma_dma_read_master_limiter_rsp_src_endofpacket;                        // hps_to_plasma_dma_read_master_limiter:rsp_src_endofpacket -> hps_to_plasma_dma_read_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                // cmd_mux:src_valid -> hps_to_plasma_dma_control_port_slave_burst_adapter:sink0_valid
	wire  [113:0] cmd_mux_src_data;                                                                 // cmd_mux:src_data -> hps_to_plasma_dma_control_port_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                // hps_to_plasma_dma_control_port_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [3:0] cmd_mux_src_channel;                                                              // cmd_mux:src_channel -> hps_to_plasma_dma_control_port_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                        // cmd_mux:src_startofpacket -> hps_to_plasma_dma_control_port_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                          // cmd_mux:src_endofpacket -> hps_to_plasma_dma_control_port_slave_burst_adapter:sink0_endofpacket
	wire          hps_to_plasma_dma_control_port_slave_burst_adapter_source0_valid;                 // hps_to_plasma_dma_control_port_slave_burst_adapter:source0_valid -> hps_to_plasma_dma_control_port_slave_agent:cp_valid
	wire  [113:0] hps_to_plasma_dma_control_port_slave_burst_adapter_source0_data;                  // hps_to_plasma_dma_control_port_slave_burst_adapter:source0_data -> hps_to_plasma_dma_control_port_slave_agent:cp_data
	wire          hps_to_plasma_dma_control_port_slave_burst_adapter_source0_ready;                 // hps_to_plasma_dma_control_port_slave_agent:cp_ready -> hps_to_plasma_dma_control_port_slave_burst_adapter:source0_ready
	wire    [3:0] hps_to_plasma_dma_control_port_slave_burst_adapter_source0_channel;               // hps_to_plasma_dma_control_port_slave_burst_adapter:source0_channel -> hps_to_plasma_dma_control_port_slave_agent:cp_channel
	wire          hps_to_plasma_dma_control_port_slave_burst_adapter_source0_startofpacket;         // hps_to_plasma_dma_control_port_slave_burst_adapter:source0_startofpacket -> hps_to_plasma_dma_control_port_slave_agent:cp_startofpacket
	wire          hps_to_plasma_dma_control_port_slave_burst_adapter_source0_endofpacket;           // hps_to_plasma_dma_control_port_slave_burst_adapter:source0_endofpacket -> hps_to_plasma_dma_control_port_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                            // cmd_mux_001:src_valid -> dma_0_control_port_slave_burst_adapter:sink0_valid
	wire  [113:0] cmd_mux_001_src_data;                                                             // cmd_mux_001:src_data -> dma_0_control_port_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                            // dma_0_control_port_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [3:0] cmd_mux_001_src_channel;                                                          // cmd_mux_001:src_channel -> dma_0_control_port_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                    // cmd_mux_001:src_startofpacket -> dma_0_control_port_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                      // cmd_mux_001:src_endofpacket -> dma_0_control_port_slave_burst_adapter:sink0_endofpacket
	wire          dma_0_control_port_slave_burst_adapter_source0_valid;                             // dma_0_control_port_slave_burst_adapter:source0_valid -> dma_0_control_port_slave_agent:cp_valid
	wire  [113:0] dma_0_control_port_slave_burst_adapter_source0_data;                              // dma_0_control_port_slave_burst_adapter:source0_data -> dma_0_control_port_slave_agent:cp_data
	wire          dma_0_control_port_slave_burst_adapter_source0_ready;                             // dma_0_control_port_slave_agent:cp_ready -> dma_0_control_port_slave_burst_adapter:source0_ready
	wire    [3:0] dma_0_control_port_slave_burst_adapter_source0_channel;                           // dma_0_control_port_slave_burst_adapter:source0_channel -> dma_0_control_port_slave_agent:cp_channel
	wire          dma_0_control_port_slave_burst_adapter_source0_startofpacket;                     // dma_0_control_port_slave_burst_adapter:source0_startofpacket -> dma_0_control_port_slave_agent:cp_startofpacket
	wire          dma_0_control_port_slave_burst_adapter_source0_endofpacket;                       // dma_0_control_port_slave_burst_adapter:source0_endofpacket -> dma_0_control_port_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                            // cmd_mux_002:src_valid -> switches_s1_burst_adapter:sink0_valid
	wire  [113:0] cmd_mux_002_src_data;                                                             // cmd_mux_002:src_data -> switches_s1_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                            // switches_s1_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [3:0] cmd_mux_002_src_channel;                                                          // cmd_mux_002:src_channel -> switches_s1_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                    // cmd_mux_002:src_startofpacket -> switches_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                      // cmd_mux_002:src_endofpacket -> switches_s1_burst_adapter:sink0_endofpacket
	wire          switches_s1_burst_adapter_source0_valid;                                          // switches_s1_burst_adapter:source0_valid -> switches_s1_agent:cp_valid
	wire  [113:0] switches_s1_burst_adapter_source0_data;                                           // switches_s1_burst_adapter:source0_data -> switches_s1_agent:cp_data
	wire          switches_s1_burst_adapter_source0_ready;                                          // switches_s1_agent:cp_ready -> switches_s1_burst_adapter:source0_ready
	wire    [3:0] switches_s1_burst_adapter_source0_channel;                                        // switches_s1_burst_adapter:source0_channel -> switches_s1_agent:cp_channel
	wire          switches_s1_burst_adapter_source0_startofpacket;                                  // switches_s1_burst_adapter:source0_startofpacket -> switches_s1_agent:cp_startofpacket
	wire          switches_s1_burst_adapter_source0_endofpacket;                                    // switches_s1_burst_adapter:source0_endofpacket -> switches_s1_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                            // cmd_mux_003:src_valid -> keys_s1_burst_adapter:sink0_valid
	wire  [113:0] cmd_mux_003_src_data;                                                             // cmd_mux_003:src_data -> keys_s1_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                            // keys_s1_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [3:0] cmd_mux_003_src_channel;                                                          // cmd_mux_003:src_channel -> keys_s1_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                    // cmd_mux_003:src_startofpacket -> keys_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                      // cmd_mux_003:src_endofpacket -> keys_s1_burst_adapter:sink0_endofpacket
	wire          keys_s1_burst_adapter_source0_valid;                                              // keys_s1_burst_adapter:source0_valid -> keys_s1_agent:cp_valid
	wire  [113:0] keys_s1_burst_adapter_source0_data;                                               // keys_s1_burst_adapter:source0_data -> keys_s1_agent:cp_data
	wire          keys_s1_burst_adapter_source0_ready;                                              // keys_s1_agent:cp_ready -> keys_s1_burst_adapter:source0_ready
	wire    [3:0] keys_s1_burst_adapter_source0_channel;                                            // keys_s1_burst_adapter:source0_channel -> keys_s1_agent:cp_channel
	wire          keys_s1_burst_adapter_source0_startofpacket;                                      // keys_s1_burst_adapter:source0_startofpacket -> keys_s1_agent:cp_startofpacket
	wire          keys_s1_burst_adapter_source0_endofpacket;                                        // keys_s1_burst_adapter:source0_endofpacket -> keys_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                             // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [113:0] cmd_demux_src0_data;                                                              // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                             // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [3:0] cmd_demux_src0_channel;                                                           // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                     // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                       // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                             // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [113:0] cmd_demux_src1_data;                                                              // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                             // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [3:0] cmd_demux_src1_channel;                                                           // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                     // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                       // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                             // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [113:0] cmd_demux_src2_data;                                                              // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                             // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [3:0] cmd_demux_src2_channel;                                                           // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                     // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                       // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                             // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [113:0] cmd_demux_src3_data;                                                              // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                             // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire    [3:0] cmd_demux_src3_channel;                                                           // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                     // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                       // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                         // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [113:0] cmd_demux_001_src0_data;                                                          // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                         // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [3:0] cmd_demux_001_src0_channel;                                                       // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                 // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                   // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                         // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [113:0] cmd_demux_001_src1_data;                                                          // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                         // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [3:0] cmd_demux_001_src1_channel;                                                       // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                 // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                   // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                         // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [113:0] cmd_demux_001_src2_data;                                                          // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                         // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [3:0] cmd_demux_001_src2_channel;                                                       // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                 // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                   // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                         // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [113:0] cmd_demux_001_src3_data;                                                          // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                                         // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire    [3:0] cmd_demux_001_src3_channel;                                                       // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                 // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                   // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                         // cmd_demux_002:src0_valid -> cmd_mux_002:sink2_valid
	wire  [113:0] cmd_demux_002_src0_data;                                                          // cmd_demux_002:src0_data -> cmd_mux_002:sink2_data
	wire          cmd_demux_002_src0_ready;                                                         // cmd_mux_002:sink2_ready -> cmd_demux_002:src0_ready
	wire    [3:0] cmd_demux_002_src0_channel;                                                       // cmd_demux_002:src0_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                 // cmd_demux_002:src0_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                   // cmd_demux_002:src0_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                         // cmd_demux_002:src1_valid -> cmd_mux_003:sink2_valid
	wire  [113:0] cmd_demux_002_src1_data;                                                          // cmd_demux_002:src1_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_002_src1_ready;                                                         // cmd_mux_003:sink2_ready -> cmd_demux_002:src1_ready
	wire    [3:0] cmd_demux_002_src1_channel;                                                       // cmd_demux_002:src1_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                                 // cmd_demux_002:src1_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                   // cmd_demux_002:src1_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                             // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [113:0] rsp_demux_src0_data;                                                              // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                             // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [3:0] rsp_demux_src0_channel;                                                           // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                     // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                       // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                             // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [113:0] rsp_demux_src1_data;                                                              // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                             // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [3:0] rsp_demux_src1_channel;                                                           // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                     // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                       // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                         // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [113:0] rsp_demux_001_src0_data;                                                          // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                         // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [3:0] rsp_demux_001_src0_channel;                                                       // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                 // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                   // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                         // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [113:0] rsp_demux_001_src1_data;                                                          // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                         // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [3:0] rsp_demux_001_src1_channel;                                                       // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                 // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                   // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                         // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [113:0] rsp_demux_002_src0_data;                                                          // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                         // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [3:0] rsp_demux_002_src0_channel;                                                       // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                 // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                   // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                         // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [113:0] rsp_demux_002_src1_data;                                                          // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                         // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [3:0] rsp_demux_002_src1_channel;                                                       // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                 // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                   // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src2_valid;                                                         // rsp_demux_002:src2_valid -> rsp_mux_002:sink0_valid
	wire  [113:0] rsp_demux_002_src2_data;                                                          // rsp_demux_002:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_002_src2_ready;                                                         // rsp_mux_002:sink0_ready -> rsp_demux_002:src2_ready
	wire    [3:0] rsp_demux_002_src2_channel;                                                       // rsp_demux_002:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_002_src2_startofpacket;                                                 // rsp_demux_002:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                                   // rsp_demux_002:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                                         // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [113:0] rsp_demux_003_src0_data;                                                          // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                         // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire    [3:0] rsp_demux_003_src0_channel;                                                       // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                 // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                   // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                         // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [113:0] rsp_demux_003_src1_data;                                                          // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                                         // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire    [3:0] rsp_demux_003_src1_channel;                                                       // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                                 // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                   // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src2_valid;                                                         // rsp_demux_003:src2_valid -> rsp_mux_002:sink1_valid
	wire  [113:0] rsp_demux_003_src2_data;                                                          // rsp_demux_003:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_003_src2_ready;                                                         // rsp_mux_002:sink1_ready -> rsp_demux_003:src2_ready
	wire    [3:0] rsp_demux_003_src2_channel;                                                       // rsp_demux_003:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_003_src2_startofpacket;                                                 // rsp_demux_003:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                                   // rsp_demux_003:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire    [3:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                                // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [3:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                                // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire    [3:0] hps_to_plasma_dma_read_master_limiter_cmd_valid_data;                             // hps_to_plasma_dma_read_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire          hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_out_valid;                  // hps_to_plasma_dma_control_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_out_data;                   // hps_to_plasma_dma_control_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_out_ready;                  // avalon_st_adapter:in_0_ready -> hps_to_plasma_dma_control_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                    // avalon_st_adapter:out_0_valid -> hps_to_plasma_dma_control_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                     // avalon_st_adapter:out_0_data -> hps_to_plasma_dma_control_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                    // hps_to_plasma_dma_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                    // avalon_st_adapter:out_0_error -> hps_to_plasma_dma_control_port_slave_agent:rdata_fifo_sink_error
	wire          dma_0_control_port_slave_agent_rdata_fifo_out_valid;                              // dma_0_control_port_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] dma_0_control_port_slave_agent_rdata_fifo_out_data;                               // dma_0_control_port_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          dma_0_control_port_slave_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_001:in_0_ready -> dma_0_control_port_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                // avalon_st_adapter_001:out_0_valid -> dma_0_control_port_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                 // avalon_st_adapter_001:out_0_data -> dma_0_control_port_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                // dma_0_control_port_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                // avalon_st_adapter_001:out_0_error -> dma_0_control_port_slave_agent:rdata_fifo_sink_error
	wire          switches_s1_agent_rdata_fifo_out_valid;                                           // switches_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] switches_s1_agent_rdata_fifo_out_data;                                            // switches_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          switches_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_002:in_0_ready -> switches_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                // avalon_st_adapter_002:out_0_valid -> switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                 // avalon_st_adapter_002:out_0_data -> switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                // switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                // avalon_st_adapter_002:out_0_error -> switches_s1_agent:rdata_fifo_sink_error
	wire          keys_s1_agent_rdata_fifo_out_valid;                                               // keys_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] keys_s1_agent_rdata_fifo_out_data;                                                // keys_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          keys_s1_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_003:in_0_ready -> keys_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                // avalon_st_adapter_003:out_0_valid -> keys_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                 // avalon_st_adapter_003:out_0_data -> keys_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                // keys_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                // avalon_st_adapter_003:out_0_error -> keys_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (6),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (21),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) hps_to_plasma_dma_read_master_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                                      //                       clk.clk
		.reset                  (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (hps_to_plasma_dma_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (hps_to_plasma_dma_read_master_waitrequest),                                        //                          .waitrequest
		.av_chipselect          (hps_to_plasma_dma_read_master_chipselect),                                         //                          .chipselect
		.av_read                (hps_to_plasma_dma_read_master_read),                                               //                          .read
		.av_readdata            (hps_to_plasma_dma_read_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (hps_to_plasma_dma_read_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_byteenable          (4'b1111),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_write               (1'b0),                                                                             //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                             //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hps_to_plasma_dma_control_port_slave_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                 //                      clk.clk
		.reset                  (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (hps_to_plasma_dma_control_port_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (hps_to_plasma_dma_control_port_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (hps_to_plasma_dma_control_port_slave_agent_m0_read),          //                         .read
		.uav_write              (hps_to_plasma_dma_control_port_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (hps_to_plasma_dma_control_port_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (hps_to_plasma_dma_control_port_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (hps_to_plasma_dma_control_port_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (hps_to_plasma_dma_control_port_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (hps_to_plasma_dma_control_port_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (hps_to_plasma_dma_control_port_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (hps_to_plasma_dma_control_port_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (hps_to_plasma_dma_control_port_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (hps_to_plasma_dma_control_port_slave_write),                  //                         .write
		.av_readdata            (hps_to_plasma_dma_control_port_slave_readdata),               //                         .readdata
		.av_writedata           (hps_to_plasma_dma_control_port_slave_writedata),              //                         .writedata
		.av_chipselect          (hps_to_plasma_dma_control_port_slave_chipselect),             //                         .chipselect
		.av_read                (),                                                            //              (terminated)
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dma_0_control_port_slave_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                         //                      clk.clk
		.reset                  (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dma_0_control_port_slave_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (dma_0_control_port_slave_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (dma_0_control_port_slave_agent_m0_read),              //                         .read
		.uav_write              (dma_0_control_port_slave_agent_m0_write),             //                         .write
		.uav_waitrequest        (dma_0_control_port_slave_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (dma_0_control_port_slave_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (dma_0_control_port_slave_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (dma_0_control_port_slave_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (dma_0_control_port_slave_agent_m0_writedata),         //                         .writedata
		.uav_lock               (dma_0_control_port_slave_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (dma_0_control_port_slave_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (dma_0_control_port_slave_address),                    //      avalon_anti_slave_0.address
		.av_write               (dma_0_control_port_slave_write),                      //                         .write
		.av_readdata            (dma_0_control_port_slave_readdata),                   //                         .readdata
		.av_writedata           (dma_0_control_port_slave_writedata),                  //                         .writedata
		.av_chipselect          (dma_0_control_port_slave_chipselect),                 //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) switches_s1_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                         //                      clk.clk
		.reset                  (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (switches_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (switches_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (switches_s1_agent_m0_read),                           //                         .read
		.uav_write              (switches_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (switches_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (switches_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (switches_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (switches_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (switches_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (switches_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (switches_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (switches_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (switches_s1_write),                                   //                         .write
		.av_readdata            (switches_s1_readdata),                                //                         .readdata
		.av_writedata           (switches_s1_writedata),                               //                         .writedata
		.av_chipselect          (switches_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) keys_s1_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                         //                      clk.clk
		.reset                  (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (keys_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (keys_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (keys_s1_agent_m0_read),                               //                         .read
		.uav_write              (keys_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (keys_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (keys_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (keys_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (keys_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (keys_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (keys_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (keys_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (keys_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (keys_s1_write),                                       //                         .write
		.av_readdata            (keys_s1_readdata),                                    //                         .readdata
		.av_writedata           (keys_s1_writedata),                                   //                         .writedata
		.av_chipselect          (keys_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                    //              (terminated)
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (90),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (4),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (sys_sdram_pll_0_sys_clk_clk),                                          //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_QOS_H                 (85),
		.PKT_QOS_L                 (85),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_CACHE_H               (108),
		.PKT_CACHE_L               (105),
		.PKT_THREAD_ID_H           (101),
		.PKT_THREAD_ID_L           (90),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (127),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hps_to_plasma_dma_read_master_agent (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                                                      //       clk.clk
		.reset                 (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (hps_to_plasma_dma_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (hps_to_plasma_dma_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (hps_to_plasma_dma_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (hps_to_plasma_dma_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (hps_to_plasma_dma_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (hps_to_plasma_dma_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (hps_to_plasma_dma_read_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (hps_to_plasma_dma_read_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (hps_to_plasma_dma_read_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (hps_to_plasma_dma_read_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (hps_to_plasma_dma_read_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (hps_to_plasma_dma_read_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hps_to_plasma_dma_control_port_slave_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                              //             clk.clk
		.reset                   (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (hps_to_plasma_dma_control_port_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (hps_to_plasma_dma_control_port_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (hps_to_plasma_dma_control_port_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (hps_to_plasma_dma_control_port_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (hps_to_plasma_dma_control_port_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (hps_to_plasma_dma_control_port_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (hps_to_plasma_dma_control_port_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (hps_to_plasma_dma_control_port_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (hps_to_plasma_dma_control_port_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (hps_to_plasma_dma_control_port_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (hps_to_plasma_dma_control_port_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (hps_to_plasma_dma_control_port_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (hps_to_plasma_dma_control_port_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (hps_to_plasma_dma_control_port_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (hps_to_plasma_dma_control_port_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (hps_to_plasma_dma_control_port_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (hps_to_plasma_dma_control_port_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (hps_to_plasma_dma_control_port_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (hps_to_plasma_dma_control_port_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (hps_to_plasma_dma_control_port_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (hps_to_plasma_dma_control_port_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (hps_to_plasma_dma_control_port_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (hps_to_plasma_dma_control_port_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (hps_to_plasma_dma_control_port_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (hps_to_plasma_dma_control_port_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (hps_to_plasma_dma_control_port_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (hps_to_plasma_dma_control_port_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                            //                .error
		.rdata_fifo_src_ready    (hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_to_plasma_dma_control_port_slave_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                           //       clk.clk
		.reset             (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (hps_to_plasma_dma_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (hps_to_plasma_dma_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (hps_to_plasma_dma_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hps_to_plasma_dma_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hps_to_plasma_dma_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hps_to_plasma_dma_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_to_plasma_dma_control_port_slave_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                     //       clk.clk
		.reset             (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dma_0_control_port_slave_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                  //             clk.clk
		.reset                   (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (dma_0_control_port_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dma_0_control_port_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dma_0_control_port_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dma_0_control_port_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dma_0_control_port_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (dma_0_control_port_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dma_0_control_port_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dma_0_control_port_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (dma_0_control_port_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dma_0_control_port_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (dma_0_control_port_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (dma_0_control_port_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dma_0_control_port_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (dma_0_control_port_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (dma_0_control_port_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (dma_0_control_port_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dma_0_control_port_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dma_0_control_port_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dma_0_control_port_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dma_0_control_port_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dma_0_control_port_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dma_0_control_port_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dma_0_control_port_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dma_0_control_port_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dma_0_control_port_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dma_0_control_port_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dma_0_control_port_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dma_0_control_port_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dma_0_control_port_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dma_0_control_port_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (dma_0_control_port_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dma_0_control_port_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dma_0_control_port_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_0_control_port_slave_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                               //       clk.clk
		.reset             (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (dma_0_control_port_slave_agent_rf_source_data),             //        in.data
		.in_valid          (dma_0_control_port_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (dma_0_control_port_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dma_0_control_port_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dma_0_control_port_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dma_0_control_port_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dma_0_control_port_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dma_0_control_port_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dma_0_control_port_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dma_0_control_port_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dma_0_control_port_slave_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset             (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dma_0_control_port_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dma_0_control_port_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dma_0_control_port_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dma_0_control_port_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dma_0_control_port_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dma_0_control_port_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) switches_s1_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                         //             clk.clk
		.reset                   (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (switches_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (switches_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (switches_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (switches_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (switches_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (switches_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (switches_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (switches_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (switches_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (switches_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (switches_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (switches_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (switches_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (switches_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (switches_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (switches_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (switches_s1_burst_adapter_source0_ready),             //              cp.ready
		.cp_valid                (switches_s1_burst_adapter_source0_valid),             //                .valid
		.cp_data                 (switches_s1_burst_adapter_source0_data),              //                .data
		.cp_startofpacket        (switches_s1_burst_adapter_source0_startofpacket),     //                .startofpacket
		.cp_endofpacket          (switches_s1_burst_adapter_source0_endofpacket),       //                .endofpacket
		.cp_channel              (switches_s1_burst_adapter_source0_channel),           //                .channel
		.rf_sink_ready           (switches_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (switches_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (switches_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (switches_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (switches_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (switches_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (switches_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (switches_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (switches_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (switches_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (switches_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (switches_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (switches_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switches_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset             (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (switches_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (switches_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (switches_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (switches_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (switches_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (switches_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (switches_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (switches_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (switches_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (switches_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switches_s1_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset             (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (switches_s1_agent_rdata_fifo_src_data),               //        in.data
		.in_valid          (switches_s1_agent_rdata_fifo_src_valid),              //          .valid
		.in_ready          (switches_s1_agent_rdata_fifo_src_ready),              //          .ready
		.out_data          (switches_s1_agent_rdata_fifo_out_data),               //       out.data
		.out_valid         (switches_s1_agent_rdata_fifo_out_valid),              //          .valid
		.out_ready         (switches_s1_agent_rdata_fifo_out_ready),              //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (113),
		.PKT_ORI_BURST_SIZE_L      (111),
		.PKT_RESPONSE_STATUS_H     (110),
		.PKT_RESPONSE_STATUS_L     (109),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (104),
		.PKT_PROTECTION_L          (102),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (114),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) keys_s1_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                         //             clk.clk
		.reset                   (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (keys_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (keys_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (keys_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (keys_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (keys_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (keys_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (keys_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (keys_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (keys_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (keys_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (keys_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (keys_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (keys_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (keys_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (keys_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (keys_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (keys_s1_burst_adapter_source0_ready),                 //              cp.ready
		.cp_valid                (keys_s1_burst_adapter_source0_valid),                 //                .valid
		.cp_data                 (keys_s1_burst_adapter_source0_data),                  //                .data
		.cp_startofpacket        (keys_s1_burst_adapter_source0_startofpacket),         //                .startofpacket
		.cp_endofpacket          (keys_s1_burst_adapter_source0_endofpacket),           //                .endofpacket
		.cp_channel              (keys_s1_burst_adapter_source0_channel),               //                .channel
		.rf_sink_ready           (keys_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (keys_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (keys_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (keys_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (keys_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (keys_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (keys_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (keys_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (keys_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (keys_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (keys_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (keys_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (keys_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (115),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) keys_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset             (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (keys_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (keys_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (keys_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (keys_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (keys_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (keys_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (keys_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (keys_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (keys_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (keys_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) keys_s1_agent_rdata_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset             (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (keys_s1_agent_rdata_fifo_src_data),                   //        in.data
		.in_valid          (keys_s1_agent_rdata_fifo_src_valid),                  //          .valid
		.in_ready          (keys_s1_agent_rdata_fifo_src_ready),                  //          .ready
		.out_data          (keys_s1_agent_rdata_fifo_out_data),                   //       out.data
		.out_valid         (keys_s1_agent_rdata_fifo_out_valid),                  //          .valid
		.out_ready         (keys_s1_agent_rdata_fifo_out_ready),                  //          .ready
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_startofpacket  (1'b0),                                                // (terminated)
		.in_endofpacket    (1'b0),                                                // (terminated)
		.out_startofpacket (),                                                    // (terminated)
		.out_endofpacket   (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	de1_soc_mm_interconnect_1_router router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                         //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                    //       src.ready
		.src_valid          (router_src_valid),                                                    //          .valid
		.src_data           (router_src_data),                                                     //          .data
		.src_channel        (router_src_channel),                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //          .endofpacket
	);

	de1_soc_mm_interconnect_1_router router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                         //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	de1_soc_mm_interconnect_1_router_002 router_002 (
		.sink_ready         (hps_to_plasma_dma_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (hps_to_plasma_dma_read_master_agent_cp_valid),         //          .valid
		.sink_data          (hps_to_plasma_dma_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (hps_to_plasma_dma_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_to_plasma_dma_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                          //       clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_002_src_ready),                                 //       src.ready
		.src_valid          (router_002_src_valid),                                 //          .valid
		.src_data           (router_002_src_data),                                  //          .data
		.src_channel        (router_002_src_channel),                               //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                            //          .endofpacket
	);

	de1_soc_mm_interconnect_1_router_003 router_003 (
		.sink_ready         (hps_to_plasma_dma_control_port_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (hps_to_plasma_dma_control_port_slave_agent_rp_valid),         //          .valid
		.sink_data          (hps_to_plasma_dma_control_port_slave_agent_rp_data),          //          .data
		.sink_startofpacket (hps_to_plasma_dma_control_port_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hps_to_plasma_dma_control_port_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                 //       clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_003_src_ready),                                        //       src.ready
		.src_valid          (router_003_src_valid),                                        //          .valid
		.src_data           (router_003_src_data),                                         //          .data
		.src_channel        (router_003_src_channel),                                      //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                   //          .endofpacket
	);

	de1_soc_mm_interconnect_1_router_003 router_004 (
		.sink_ready         (dma_0_control_port_slave_agent_rp_ready),             //      sink.ready
		.sink_valid         (dma_0_control_port_slave_agent_rp_valid),             //          .valid
		.sink_data          (dma_0_control_port_slave_agent_rp_data),              //          .data
		.sink_startofpacket (dma_0_control_port_slave_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (dma_0_control_port_slave_agent_rp_endofpacket),       //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                //       src.ready
		.src_valid          (router_004_src_valid),                                //          .valid
		.src_data           (router_004_src_data),                                 //          .data
		.src_channel        (router_004_src_channel),                              //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                           //          .endofpacket
	);

	de1_soc_mm_interconnect_1_router_005 router_005 (
		.sink_ready         (switches_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (switches_s1_agent_rp_valid),                          //          .valid
		.sink_data          (switches_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (switches_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (switches_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                //       src.ready
		.src_valid          (router_005_src_valid),                                //          .valid
		.src_data           (router_005_src_data),                                 //          .data
		.src_channel        (router_005_src_channel),                              //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                           //          .endofpacket
	);

	de1_soc_mm_interconnect_1_router_005 router_006 (
		.sink_ready         (keys_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (keys_s1_agent_rp_valid),                              //          .valid
		.sink_data          (keys_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (keys_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (keys_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                //       src.ready
		.src_valid          (router_006_src_valid),                                //          .valid
		.src_data           (router_006_src_data),                                 //          .data
		.src_channel        (router_006_src_channel),                              //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                           //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                         //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                    //          .valid
		.cmd_sink_data          (router_src_data),                                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                              //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                         //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (89),
		.PKT_DEST_ID_L             (88),
		.PKT_SRC_ID_H              (87),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (4),
		.VALID_WIDTH               (4),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_to_plasma_dma_read_master_limiter (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                 //       clk.clk
		.reset                  (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                        //          .valid
		.cmd_sink_data          (router_002_src_data),                                         //          .data
		.cmd_sink_channel       (router_002_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (hps_to_plasma_dma_read_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (hps_to_plasma_dma_read_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (hps_to_plasma_dma_read_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (hps_to_plasma_dma_read_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (hps_to_plasma_dma_read_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                       //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                       //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                     //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                        //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                               //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                                 //          .endofpacket
		.rsp_src_ready          (hps_to_plasma_dma_read_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (hps_to_plasma_dma_read_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (hps_to_plasma_dma_read_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (hps_to_plasma_dma_read_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (hps_to_plasma_dma_read_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (hps_to_plasma_dma_read_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (hps_to_plasma_dma_read_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hps_to_plasma_dma_control_port_slave_burst_adapter (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                                              //       cr0.clk
		.reset                 (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),                      // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                        //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                         //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                      //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                        //          .ready
		.source0_valid         (hps_to_plasma_dma_control_port_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (hps_to_plasma_dma_control_port_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (hps_to_plasma_dma_control_port_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (hps_to_plasma_dma_control_port_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (hps_to_plasma_dma_control_port_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (hps_to_plasma_dma_control_port_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dma_0_control_port_slave_burst_adapter (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                                  //       cr0.clk
		.reset                 (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                        //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                         //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                      //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                  //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                        //          .ready
		.source0_valid         (dma_0_control_port_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dma_0_control_port_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (dma_0_control_port_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dma_0_control_port_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dma_0_control_port_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dma_0_control_port_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) switches_s1_burst_adapter (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                         //       cr0.clk
		.reset                 (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                               //          .ready
		.source0_valid         (switches_s1_burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (switches_s1_burst_adapter_source0_data),              //          .data
		.source0_channel       (switches_s1_burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (switches_s1_burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (switches_s1_burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (switches_s1_burst_adapter_source0_ready)              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (114),
		.ST_CHANNEL_W              (4),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) keys_s1_burst_adapter (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                         //       cr0.clk
		.reset                 (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                               //          .ready
		.source0_valid         (keys_s1_burst_adapter_source0_valid),                 //   source0.valid
		.source0_data          (keys_s1_burst_adapter_source0_data),                  //          .data
		.source0_channel       (keys_s1_burst_adapter_source0_channel),               //          .channel
		.source0_startofpacket (keys_s1_burst_adapter_source0_startofpacket),         //          .startofpacket
		.source0_endofpacket   (keys_s1_burst_adapter_source0_endofpacket),           //          .endofpacket
		.source0_ready         (keys_s1_burst_adapter_source0_ready)                  //          .ready
	);

	de1_soc_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                         //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                //           .valid
		.src0_data          (cmd_demux_src0_data),                                                 //           .data
		.src0_channel       (cmd_demux_src0_channel),                                              //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                          //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                //           .valid
		.src1_data          (cmd_demux_src1_data),                                                 //           .data
		.src1_channel       (cmd_demux_src1_channel),                                              //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                          //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                //           .valid
		.src2_data          (cmd_demux_src2_data),                                                 //           .data
		.src2_channel       (cmd_demux_src2_channel),                                              //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                          //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                //           .valid
		.src3_data          (cmd_demux_src3_data),                                                 //           .data
		.src3_channel       (cmd_demux_src3_channel),                                              //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                        //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket)                                           //           .endofpacket
	);

	de1_soc_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                         //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket)                                       //           .endofpacket
	);

	de1_soc_mm_interconnect_1_cmd_demux_002 cmd_demux_002 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                                 //        clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready         (hps_to_plasma_dma_read_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (hps_to_plasma_dma_read_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (hps_to_plasma_dma_read_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (hps_to_plasma_dma_read_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (hps_to_plasma_dma_read_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (hps_to_plasma_dma_read_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                    //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                    //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                     //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                                  //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                            //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                              //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                    //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                    //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                     //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                                  //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                            //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                               //           .endofpacket
	);

	de1_soc_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset               (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                   //       src.ready
		.src_valid           (cmd_mux_src_valid),                                   //          .valid
		.src_data            (cmd_mux_src_data),                                    //          .data
		.src_channel         (cmd_mux_src_channel),                                 //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                           //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                             //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                              //          .channel
		.sink0_data          (cmd_demux_src0_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                            //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                          //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                             //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                       //          .endofpacket
	);

	de1_soc_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset               (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                               //          .valid
		.src_data            (cmd_mux_001_src_data),                                //          .data
		.src_channel         (cmd_mux_001_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                              //          .channel
		.sink0_data          (cmd_demux_src1_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                            //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                          //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                             //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                       //          .endofpacket
	);

	de1_soc_mm_interconnect_1_cmd_mux_002 cmd_mux_002 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset               (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                               //          .valid
		.src_data            (cmd_mux_002_src_data),                                //          .data
		.src_channel         (cmd_mux_002_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                              //          .channel
		.sink0_data          (cmd_demux_src2_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                            //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                          //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                             //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                            //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                          //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                             //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket)                       //          .endofpacket
	);

	de1_soc_mm_interconnect_1_cmd_mux_002 cmd_mux_003 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset               (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                               //          .valid
		.src_data            (cmd_mux_003_src_data),                                //          .data
		.src_channel         (cmd_mux_003_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                              //          .channel
		.sink0_data          (cmd_demux_src3_data),                                 //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                          //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                            //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                            //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                          //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                             //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket),                      //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                            //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                            //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                          //          .channel
		.sink2_data          (cmd_demux_002_src1_data),                             //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket)                       //          .endofpacket
	);

	de1_soc_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                //      sink.ready
		.sink_channel       (router_003_src_channel),                              //          .channel
		.sink_data          (router_003_src_data),                                 //          .data
		.sink_startofpacket (router_003_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_003_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                //          .valid
		.src0_data          (rsp_demux_src0_data),                                 //          .data
		.src0_channel       (rsp_demux_src0_channel),                              //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                          //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                //          .valid
		.src1_data          (rsp_demux_src1_data),                                 //          .data
		.src1_channel       (rsp_demux_src1_channel),                              //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                        //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                           //          .endofpacket
	);

	de1_soc_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                //      sink.ready
		.sink_channel       (router_004_src_channel),                              //          .channel
		.sink_data          (router_004_src_data),                                 //          .data
		.sink_startofpacket (router_004_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_004_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_001_src0_data),                             //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_001_src1_data),                             //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                       //          .endofpacket
	);

	de1_soc_mm_interconnect_1_rsp_demux_002 rsp_demux_002 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                //      sink.ready
		.sink_channel       (router_005_src_channel),                              //          .channel
		.sink_data          (router_005_src_data),                                 //          .data
		.sink_startofpacket (router_005_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_005_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_002_src0_data),                             //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_002_src1_data),                             //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_002_src2_data),                             //          .data
		.src2_channel       (rsp_demux_002_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket)                       //          .endofpacket
	);

	de1_soc_mm_interconnect_1_rsp_demux_002 rsp_demux_003 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset              (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                //      sink.ready
		.sink_channel       (router_006_src_channel),                              //          .channel
		.sink_data          (router_006_src_data),                                 //          .data
		.sink_startofpacket (router_006_src_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                          //          .endofpacket
		.sink_valid         (router_006_src_valid),                                //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_003_src0_data),                             //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_003_src1_data),                             //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),                      //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                            //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                            //          .valid
		.src2_data          (rsp_demux_003_src2_data),                             //          .data
		.src2_channel       (rsp_demux_003_src2_channel),                          //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket)                       //          .endofpacket
	);

	de1_soc_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                                         //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                   //          .valid
		.src_data            (rsp_mux_src_data),                                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src0_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                      //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                            //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                            //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                          //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                             //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket)                                       //          .endofpacket
	);

	de1_soc_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                                         //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                                //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                                //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                              //          .channel
		.sink0_data          (rsp_demux_src1_data),                                                 //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket),                                          //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                                      //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                                            //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                                            //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                                          //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                                             //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                                    //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket)                                       //          .endofpacket
	);

	de1_soc_mm_interconnect_1_rsp_mux_002 rsp_mux_002 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                         //       clk.clk
		.reset               (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                               //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                               //          .valid
		.src_data            (rsp_mux_002_src_data),                                //          .data
		.src_channel         (rsp_mux_002_src_channel),                             //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (rsp_demux_002_src2_ready),                            //     sink0.ready
		.sink0_valid         (rsp_demux_002_src2_valid),                            //          .valid
		.sink0_channel       (rsp_demux_002_src2_channel),                          //          .channel
		.sink0_data          (rsp_demux_002_src2_data),                             //          .data
		.sink0_startofpacket (rsp_demux_002_src2_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src2_endofpacket),                      //          .endofpacket
		.sink1_ready         (rsp_demux_003_src2_ready),                            //     sink1.ready
		.sink1_valid         (rsp_demux_003_src2_valid),                            //          .valid
		.sink1_channel       (rsp_demux_003_src2_channel),                          //          .channel
		.sink1_data          (rsp_demux_003_src2_data),                             //          .data
		.sink1_startofpacket (rsp_demux_003_src2_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_003_src2_endofpacket)                       //          .endofpacket
	);

	de1_soc_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (hps_to_plasma_dma_control_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                    //         .error
	);

	de1_soc_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dma_0_control_port_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dma_0_control_port_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dma_0_control_port_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                    //         .error
	);

	de1_soc_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (switches_s1_agent_rdata_fifo_out_data),               //     in_0.data
		.in_0_valid     (switches_s1_agent_rdata_fifo_out_valid),              //         .valid
		.in_0_ready     (switches_s1_agent_rdata_fifo_out_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                    //         .error
	);

	de1_soc_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (hps_to_plasma_dma_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (keys_s1_agent_rdata_fifo_out_data),                   //     in_0.data
		.in_0_valid     (keys_s1_agent_rdata_fifo_out_valid),                  //         .valid
		.in_0_ready     (keys_s1_agent_rdata_fifo_out_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                    //         .error
	);

endmodule
