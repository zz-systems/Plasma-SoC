// de1_soc_mm_interconnect_0.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2018.09.10.04:40:13

`timescale 1 ps / 1 ps
module de1_soc_mm_interconnect_0 (
		input  wire        pll_0_outclk0_clk,                                   //                                 pll_0_outclk0.clk
		input  wire        plasma_soc_0_reset_sink_reset_bridge_in_reset_reset, // plasma_soc_0_reset_sink_reset_bridge_in_reset.reset
		input  wire [31:0] plasma_soc_0_avalon_master_0_address,                //                  plasma_soc_0_avalon_master_0.address
		output wire        plasma_soc_0_avalon_master_0_waitrequest,            //                                              .waitrequest
		input  wire [3:0]  plasma_soc_0_avalon_master_0_byteenable,             //                                              .byteenable
		input  wire        plasma_soc_0_avalon_master_0_read,                   //                                              .read
		output wire [31:0] plasma_soc_0_avalon_master_0_readdata,               //                                              .readdata
		input  wire        plasma_soc_0_avalon_master_0_write,                  //                                              .write
		input  wire [31:0] plasma_soc_0_avalon_master_0_writedata,              //                                              .writedata
		output wire [1:0]  plasma_soc_0_avalon_master_0_response,               //                                              .response
		output wire [1:0]  buttons_s1_address,                                  //                                    buttons_s1.address
		output wire        buttons_s1_write,                                    //                                              .write
		input  wire [31:0] buttons_s1_readdata,                                 //                                              .readdata
		output wire [31:0] buttons_s1_writedata,                                //                                              .writedata
		output wire        buttons_s1_chipselect,                               //                                              .chipselect
		output wire [1:0]  hex_0_s1_address,                                    //                                      hex_0_s1.address
		output wire        hex_0_s1_write,                                      //                                              .write
		input  wire [31:0] hex_0_s1_readdata,                                   //                                              .readdata
		output wire [31:0] hex_0_s1_writedata,                                  //                                              .writedata
		output wire        hex_0_s1_chipselect,                                 //                                              .chipselect
		output wire [1:0]  hex_1_s1_address,                                    //                                      hex_1_s1.address
		output wire        hex_1_s1_write,                                      //                                              .write
		input  wire [31:0] hex_1_s1_readdata,                                   //                                              .readdata
		output wire [31:0] hex_1_s1_writedata,                                  //                                              .writedata
		output wire        hex_1_s1_chipselect,                                 //                                              .chipselect
		output wire [1:0]  hex_2_s1_address,                                    //                                      hex_2_s1.address
		output wire        hex_2_s1_write,                                      //                                              .write
		input  wire [31:0] hex_2_s1_readdata,                                   //                                              .readdata
		output wire [31:0] hex_2_s1_writedata,                                  //                                              .writedata
		output wire        hex_2_s1_chipselect,                                 //                                              .chipselect
		output wire [1:0]  hex_3_s1_address,                                    //                                      hex_3_s1.address
		output wire        hex_3_s1_write,                                      //                                              .write
		input  wire [31:0] hex_3_s1_readdata,                                   //                                              .readdata
		output wire [31:0] hex_3_s1_writedata,                                  //                                              .writedata
		output wire        hex_3_s1_chipselect,                                 //                                              .chipselect
		output wire [1:0]  hex_4_s1_address,                                    //                                      hex_4_s1.address
		output wire        hex_4_s1_write,                                      //                                              .write
		input  wire [31:0] hex_4_s1_readdata,                                   //                                              .readdata
		output wire [31:0] hex_4_s1_writedata,                                  //                                              .writedata
		output wire        hex_4_s1_chipselect,                                 //                                              .chipselect
		output wire [1:0]  hex_5_s1_address,                                    //                                      hex_5_s1.address
		output wire        hex_5_s1_write,                                      //                                              .write
		input  wire [31:0] hex_5_s1_readdata,                                   //                                              .readdata
		output wire [31:0] hex_5_s1_writedata,                                  //                                              .writedata
		output wire        hex_5_s1_chipselect,                                 //                                              .chipselect
		output wire [24:0] sdram_controller_0_s1_address,                       //                         sdram_controller_0_s1.address
		output wire        sdram_controller_0_s1_write,                         //                                              .write
		output wire        sdram_controller_0_s1_read,                          //                                              .read
		input  wire [15:0] sdram_controller_0_s1_readdata,                      //                                              .readdata
		output wire [15:0] sdram_controller_0_s1_writedata,                     //                                              .writedata
		output wire [1:0]  sdram_controller_0_s1_byteenable,                    //                                              .byteenable
		input  wire        sdram_controller_0_s1_readdatavalid,                 //                                              .readdatavalid
		input  wire        sdram_controller_0_s1_waitrequest,                   //                                              .waitrequest
		output wire        sdram_controller_0_s1_chipselect,                    //                                              .chipselect
		output wire [1:0]  switches_s1_address,                                 //                                   switches_s1.address
		output wire        switches_s1_write,                                   //                                              .write
		input  wire [31:0] switches_s1_readdata,                                //                                              .readdata
		output wire [31:0] switches_s1_writedata,                               //                                              .writedata
		output wire        switches_s1_chipselect                               //                                              .chipselect
	);

	wire    [1:0] plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_response;                 // plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:av_response -> plasma_soc_0_avalon_master_0_translator:uav_response
	wire          plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_waitrequest;              // plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:av_waitrequest -> plasma_soc_0_avalon_master_0_translator:uav_waitrequest
	wire    [2:0] plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_burstcount;               // plasma_soc_0_avalon_master_0_translator:uav_burstcount -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_writedata;                // plasma_soc_0_avalon_master_0_translator:uav_writedata -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_address;                  // plasma_soc_0_avalon_master_0_translator:uav_address -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:av_address
	wire          plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_lock;                     // plasma_soc_0_avalon_master_0_translator:uav_lock -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:av_lock
	wire          plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_write;                    // plasma_soc_0_avalon_master_0_translator:uav_write -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:av_write
	wire          plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_read;                     // plasma_soc_0_avalon_master_0_translator:uav_read -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_readdata;                 // plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:av_readdata -> plasma_soc_0_avalon_master_0_translator:uav_readdata
	wire          plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_debugaccess;              // plasma_soc_0_avalon_master_0_translator:uav_debugaccess -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_byteenable;               // plasma_soc_0_avalon_master_0_translator:uav_byteenable -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:av_byteenable
	wire          plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_readdatavalid;            // plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:av_readdatavalid -> plasma_soc_0_avalon_master_0_translator:uav_readdatavalid
	wire          rsp_xbar_mux_src_endofpacket;                                                               // rsp_xbar_mux:src_endofpacket -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                                     // rsp_xbar_mux:src_valid -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_src_startofpacket;                                                             // rsp_xbar_mux:src_startofpacket -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [107:0] rsp_xbar_mux_src_data;                                                                      // rsp_xbar_mux:src_data -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:rp_data
	wire    [8:0] rsp_xbar_mux_src_channel;                                                                   // rsp_xbar_mux:src_channel -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_src_ready;                                                                     // plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux:src_ready
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // sdram_controller_0_s1_translator:uav_waitrequest -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [1:0] sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;              // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> sdram_controller_0_s1_translator:uav_burstcount
	wire   [15:0] sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;               // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> sdram_controller_0_s1_translator:uav_writedata
	wire   [31:0] sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_address;                 // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:m0_address -> sdram_controller_0_s1_translator:uav_address
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_write;                   // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:m0_write -> sdram_controller_0_s1_translator:uav_write
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                    // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> sdram_controller_0_s1_translator:uav_lock
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_read;                    // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:m0_read -> sdram_controller_0_s1_translator:uav_read
	wire   [15:0] sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                // sdram_controller_0_s1_translator:uav_readdata -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // sdram_controller_0_s1_translator:uav_readdatavalid -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> sdram_controller_0_s1_translator:uav_debugaccess
	wire    [1:0] sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;              // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> sdram_controller_0_s1_translator:uav_byteenable
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;            // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire   [90:0] sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;             // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;            // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire   [90:0] sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;       // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [17:0] sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;        // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;       // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                          // hex_0_s1_translator:uav_waitrequest -> hex_0_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hex_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                           // hex_0_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> hex_0_s1_translator:uav_burstcount
	wire   [31:0] hex_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                            // hex_0_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> hex_0_s1_translator:uav_writedata
	wire   [31:0] hex_0_s1_translator_avalon_universal_slave_0_agent_m0_address;                              // hex_0_s1_translator_avalon_universal_slave_0_agent:m0_address -> hex_0_s1_translator:uav_address
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_m0_write;                                // hex_0_s1_translator_avalon_universal_slave_0_agent:m0_write -> hex_0_s1_translator:uav_write
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                 // hex_0_s1_translator_avalon_universal_slave_0_agent:m0_lock -> hex_0_s1_translator:uav_lock
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_m0_read;                                 // hex_0_s1_translator_avalon_universal_slave_0_agent:m0_read -> hex_0_s1_translator:uav_read
	wire   [31:0] hex_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                             // hex_0_s1_translator:uav_readdata -> hex_0_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                        // hex_0_s1_translator:uav_readdatavalid -> hex_0_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                          // hex_0_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> hex_0_s1_translator:uav_debugaccess
	wire    [3:0] hex_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                           // hex_0_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> hex_0_s1_translator:uav_byteenable
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                   // hex_0_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                         // hex_0_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                 // hex_0_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [108:0] hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                          // hex_0_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                         // hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> hex_0_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                // hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> hex_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                      // hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> hex_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;              // hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> hex_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [108:0] hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                       // hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> hex_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                      // hex_0_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                    // hex_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> hex_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                     // hex_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> hex_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                    // hex_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> hex_0_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_001_src_endofpacket;                                                           // cmd_xbar_mux_001:src_endofpacket -> hex_0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_001_src_valid;                                                                 // cmd_xbar_mux_001:src_valid -> hex_0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_001_src_startofpacket;                                                         // cmd_xbar_mux_001:src_startofpacket -> hex_0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [107:0] cmd_xbar_mux_001_src_data;                                                                  // cmd_xbar_mux_001:src_data -> hex_0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire    [8:0] cmd_xbar_mux_001_src_channel;                                                               // cmd_xbar_mux_001:src_channel -> hex_0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_001_src_ready;                                                                 // hex_0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_001:src_ready
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                          // hex_1_s1_translator:uav_waitrequest -> hex_1_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hex_1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                           // hex_1_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> hex_1_s1_translator:uav_burstcount
	wire   [31:0] hex_1_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                            // hex_1_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> hex_1_s1_translator:uav_writedata
	wire   [31:0] hex_1_s1_translator_avalon_universal_slave_0_agent_m0_address;                              // hex_1_s1_translator_avalon_universal_slave_0_agent:m0_address -> hex_1_s1_translator:uav_address
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_m0_write;                                // hex_1_s1_translator_avalon_universal_slave_0_agent:m0_write -> hex_1_s1_translator:uav_write
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                 // hex_1_s1_translator_avalon_universal_slave_0_agent:m0_lock -> hex_1_s1_translator:uav_lock
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_m0_read;                                 // hex_1_s1_translator_avalon_universal_slave_0_agent:m0_read -> hex_1_s1_translator:uav_read
	wire   [31:0] hex_1_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                             // hex_1_s1_translator:uav_readdata -> hex_1_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                        // hex_1_s1_translator:uav_readdatavalid -> hex_1_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                          // hex_1_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> hex_1_s1_translator:uav_debugaccess
	wire    [3:0] hex_1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                           // hex_1_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> hex_1_s1_translator:uav_byteenable
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                   // hex_1_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                         // hex_1_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                 // hex_1_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [108:0] hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                          // hex_1_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                         // hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> hex_1_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                // hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> hex_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                      // hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> hex_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;              // hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> hex_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [108:0] hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                       // hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> hex_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                      // hex_1_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                    // hex_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> hex_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hex_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                     // hex_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> hex_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                    // hex_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> hex_1_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_002_src_endofpacket;                                                           // cmd_xbar_mux_002:src_endofpacket -> hex_1_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_002_src_valid;                                                                 // cmd_xbar_mux_002:src_valid -> hex_1_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_002_src_startofpacket;                                                         // cmd_xbar_mux_002:src_startofpacket -> hex_1_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [107:0] cmd_xbar_mux_002_src_data;                                                                  // cmd_xbar_mux_002:src_data -> hex_1_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire    [8:0] cmd_xbar_mux_002_src_channel;                                                               // cmd_xbar_mux_002:src_channel -> hex_1_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_002_src_ready;                                                                 // hex_1_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_002:src_ready
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                          // hex_2_s1_translator:uav_waitrequest -> hex_2_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hex_2_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                           // hex_2_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> hex_2_s1_translator:uav_burstcount
	wire   [31:0] hex_2_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                            // hex_2_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> hex_2_s1_translator:uav_writedata
	wire   [31:0] hex_2_s1_translator_avalon_universal_slave_0_agent_m0_address;                              // hex_2_s1_translator_avalon_universal_slave_0_agent:m0_address -> hex_2_s1_translator:uav_address
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_m0_write;                                // hex_2_s1_translator_avalon_universal_slave_0_agent:m0_write -> hex_2_s1_translator:uav_write
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                 // hex_2_s1_translator_avalon_universal_slave_0_agent:m0_lock -> hex_2_s1_translator:uav_lock
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_m0_read;                                 // hex_2_s1_translator_avalon_universal_slave_0_agent:m0_read -> hex_2_s1_translator:uav_read
	wire   [31:0] hex_2_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                             // hex_2_s1_translator:uav_readdata -> hex_2_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                        // hex_2_s1_translator:uav_readdatavalid -> hex_2_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                          // hex_2_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> hex_2_s1_translator:uav_debugaccess
	wire    [3:0] hex_2_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                           // hex_2_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> hex_2_s1_translator:uav_byteenable
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                   // hex_2_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                         // hex_2_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                 // hex_2_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [108:0] hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                          // hex_2_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                         // hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> hex_2_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                // hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> hex_2_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                      // hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> hex_2_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;              // hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> hex_2_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [108:0] hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                       // hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> hex_2_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                      // hex_2_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                    // hex_2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> hex_2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hex_2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                     // hex_2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> hex_2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                    // hex_2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> hex_2_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_003_src_endofpacket;                                                           // cmd_xbar_mux_003:src_endofpacket -> hex_2_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_003_src_valid;                                                                 // cmd_xbar_mux_003:src_valid -> hex_2_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_003_src_startofpacket;                                                         // cmd_xbar_mux_003:src_startofpacket -> hex_2_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [107:0] cmd_xbar_mux_003_src_data;                                                                  // cmd_xbar_mux_003:src_data -> hex_2_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire    [8:0] cmd_xbar_mux_003_src_channel;                                                               // cmd_xbar_mux_003:src_channel -> hex_2_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_003_src_ready;                                                                 // hex_2_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_003:src_ready
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                          // hex_3_s1_translator:uav_waitrequest -> hex_3_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hex_3_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                           // hex_3_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> hex_3_s1_translator:uav_burstcount
	wire   [31:0] hex_3_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                            // hex_3_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> hex_3_s1_translator:uav_writedata
	wire   [31:0] hex_3_s1_translator_avalon_universal_slave_0_agent_m0_address;                              // hex_3_s1_translator_avalon_universal_slave_0_agent:m0_address -> hex_3_s1_translator:uav_address
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_m0_write;                                // hex_3_s1_translator_avalon_universal_slave_0_agent:m0_write -> hex_3_s1_translator:uav_write
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                 // hex_3_s1_translator_avalon_universal_slave_0_agent:m0_lock -> hex_3_s1_translator:uav_lock
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_m0_read;                                 // hex_3_s1_translator_avalon_universal_slave_0_agent:m0_read -> hex_3_s1_translator:uav_read
	wire   [31:0] hex_3_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                             // hex_3_s1_translator:uav_readdata -> hex_3_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                        // hex_3_s1_translator:uav_readdatavalid -> hex_3_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                          // hex_3_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> hex_3_s1_translator:uav_debugaccess
	wire    [3:0] hex_3_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                           // hex_3_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> hex_3_s1_translator:uav_byteenable
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                   // hex_3_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                         // hex_3_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                 // hex_3_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [108:0] hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                          // hex_3_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                         // hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> hex_3_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                // hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> hex_3_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                      // hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> hex_3_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;              // hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> hex_3_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [108:0] hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                       // hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> hex_3_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                      // hex_3_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                    // hex_3_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> hex_3_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hex_3_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                     // hex_3_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> hex_3_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                    // hex_3_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> hex_3_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_004_src_endofpacket;                                                           // cmd_xbar_mux_004:src_endofpacket -> hex_3_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_004_src_valid;                                                                 // cmd_xbar_mux_004:src_valid -> hex_3_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_004_src_startofpacket;                                                         // cmd_xbar_mux_004:src_startofpacket -> hex_3_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [107:0] cmd_xbar_mux_004_src_data;                                                                  // cmd_xbar_mux_004:src_data -> hex_3_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire    [8:0] cmd_xbar_mux_004_src_channel;                                                               // cmd_xbar_mux_004:src_channel -> hex_3_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_004_src_ready;                                                                 // hex_3_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_004:src_ready
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                          // hex_4_s1_translator:uav_waitrequest -> hex_4_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hex_4_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                           // hex_4_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> hex_4_s1_translator:uav_burstcount
	wire   [31:0] hex_4_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                            // hex_4_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> hex_4_s1_translator:uav_writedata
	wire   [31:0] hex_4_s1_translator_avalon_universal_slave_0_agent_m0_address;                              // hex_4_s1_translator_avalon_universal_slave_0_agent:m0_address -> hex_4_s1_translator:uav_address
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_m0_write;                                // hex_4_s1_translator_avalon_universal_slave_0_agent:m0_write -> hex_4_s1_translator:uav_write
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                 // hex_4_s1_translator_avalon_universal_slave_0_agent:m0_lock -> hex_4_s1_translator:uav_lock
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_m0_read;                                 // hex_4_s1_translator_avalon_universal_slave_0_agent:m0_read -> hex_4_s1_translator:uav_read
	wire   [31:0] hex_4_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                             // hex_4_s1_translator:uav_readdata -> hex_4_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                        // hex_4_s1_translator:uav_readdatavalid -> hex_4_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                          // hex_4_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> hex_4_s1_translator:uav_debugaccess
	wire    [3:0] hex_4_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                           // hex_4_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> hex_4_s1_translator:uav_byteenable
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                   // hex_4_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                         // hex_4_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                 // hex_4_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [108:0] hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                          // hex_4_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                         // hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> hex_4_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                // hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> hex_4_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                      // hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> hex_4_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;              // hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> hex_4_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [108:0] hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                       // hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> hex_4_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                      // hex_4_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                    // hex_4_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> hex_4_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hex_4_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                     // hex_4_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> hex_4_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                    // hex_4_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> hex_4_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_005_src_endofpacket;                                                           // cmd_xbar_mux_005:src_endofpacket -> hex_4_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_005_src_valid;                                                                 // cmd_xbar_mux_005:src_valid -> hex_4_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_005_src_startofpacket;                                                         // cmd_xbar_mux_005:src_startofpacket -> hex_4_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [107:0] cmd_xbar_mux_005_src_data;                                                                  // cmd_xbar_mux_005:src_data -> hex_4_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire    [8:0] cmd_xbar_mux_005_src_channel;                                                               // cmd_xbar_mux_005:src_channel -> hex_4_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_005_src_ready;                                                                 // hex_4_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_005:src_ready
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                          // hex_5_s1_translator:uav_waitrequest -> hex_5_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] hex_5_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                           // hex_5_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> hex_5_s1_translator:uav_burstcount
	wire   [31:0] hex_5_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                            // hex_5_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> hex_5_s1_translator:uav_writedata
	wire   [31:0] hex_5_s1_translator_avalon_universal_slave_0_agent_m0_address;                              // hex_5_s1_translator_avalon_universal_slave_0_agent:m0_address -> hex_5_s1_translator:uav_address
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_m0_write;                                // hex_5_s1_translator_avalon_universal_slave_0_agent:m0_write -> hex_5_s1_translator:uav_write
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_m0_lock;                                 // hex_5_s1_translator_avalon_universal_slave_0_agent:m0_lock -> hex_5_s1_translator:uav_lock
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_m0_read;                                 // hex_5_s1_translator_avalon_universal_slave_0_agent:m0_read -> hex_5_s1_translator:uav_read
	wire   [31:0] hex_5_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                             // hex_5_s1_translator:uav_readdata -> hex_5_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                        // hex_5_s1_translator:uav_readdatavalid -> hex_5_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                          // hex_5_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> hex_5_s1_translator:uav_debugaccess
	wire    [3:0] hex_5_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                           // hex_5_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> hex_5_s1_translator:uav_byteenable
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                   // hex_5_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                         // hex_5_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                 // hex_5_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [108:0] hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                          // hex_5_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                         // hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> hex_5_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                // hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> hex_5_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                      // hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> hex_5_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;              // hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> hex_5_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [108:0] hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                       // hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> hex_5_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                      // hex_5_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                    // hex_5_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> hex_5_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hex_5_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                     // hex_5_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> hex_5_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                    // hex_5_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> hex_5_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_006_src_endofpacket;                                                           // cmd_xbar_mux_006:src_endofpacket -> hex_5_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_006_src_valid;                                                                 // cmd_xbar_mux_006:src_valid -> hex_5_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_006_src_startofpacket;                                                         // cmd_xbar_mux_006:src_startofpacket -> hex_5_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [107:0] cmd_xbar_mux_006_src_data;                                                                  // cmd_xbar_mux_006:src_data -> hex_5_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire    [8:0] cmd_xbar_mux_006_src_channel;                                                               // cmd_xbar_mux_006:src_channel -> hex_5_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_006_src_ready;                                                                 // hex_5_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_006:src_ready
	wire          switches_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                       // switches_s1_translator:uav_waitrequest -> switches_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] switches_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                        // switches_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> switches_s1_translator:uav_burstcount
	wire   [31:0] switches_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                         // switches_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> switches_s1_translator:uav_writedata
	wire   [31:0] switches_s1_translator_avalon_universal_slave_0_agent_m0_address;                           // switches_s1_translator_avalon_universal_slave_0_agent:m0_address -> switches_s1_translator:uav_address
	wire          switches_s1_translator_avalon_universal_slave_0_agent_m0_write;                             // switches_s1_translator_avalon_universal_slave_0_agent:m0_write -> switches_s1_translator:uav_write
	wire          switches_s1_translator_avalon_universal_slave_0_agent_m0_lock;                              // switches_s1_translator_avalon_universal_slave_0_agent:m0_lock -> switches_s1_translator:uav_lock
	wire          switches_s1_translator_avalon_universal_slave_0_agent_m0_read;                              // switches_s1_translator_avalon_universal_slave_0_agent:m0_read -> switches_s1_translator:uav_read
	wire   [31:0] switches_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                          // switches_s1_translator:uav_readdata -> switches_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          switches_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                     // switches_s1_translator:uav_readdatavalid -> switches_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          switches_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                       // switches_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> switches_s1_translator:uav_debugaccess
	wire    [3:0] switches_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                        // switches_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> switches_s1_translator:uav_byteenable
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                // switches_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                      // switches_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;              // switches_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [108:0] switches_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                       // switches_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                      // switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> switches_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;             // switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> switches_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                   // switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> switches_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;           // switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> switches_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [108:0] switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                    // switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> switches_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                   // switches_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                 // switches_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> switches_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] switches_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                  // switches_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> switches_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                 // switches_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> switches_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_007_src_endofpacket;                                                           // cmd_xbar_mux_007:src_endofpacket -> switches_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_007_src_valid;                                                                 // cmd_xbar_mux_007:src_valid -> switches_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_007_src_startofpacket;                                                         // cmd_xbar_mux_007:src_startofpacket -> switches_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [107:0] cmd_xbar_mux_007_src_data;                                                                  // cmd_xbar_mux_007:src_data -> switches_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire    [8:0] cmd_xbar_mux_007_src_channel;                                                               // cmd_xbar_mux_007:src_channel -> switches_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_007_src_ready;                                                                 // switches_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_007:src_ready
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest;                        // buttons_s1_translator:uav_waitrequest -> buttons_s1_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] buttons_s1_translator_avalon_universal_slave_0_agent_m0_burstcount;                         // buttons_s1_translator_avalon_universal_slave_0_agent:m0_burstcount -> buttons_s1_translator:uav_burstcount
	wire   [31:0] buttons_s1_translator_avalon_universal_slave_0_agent_m0_writedata;                          // buttons_s1_translator_avalon_universal_slave_0_agent:m0_writedata -> buttons_s1_translator:uav_writedata
	wire   [31:0] buttons_s1_translator_avalon_universal_slave_0_agent_m0_address;                            // buttons_s1_translator_avalon_universal_slave_0_agent:m0_address -> buttons_s1_translator:uav_address
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_m0_write;                              // buttons_s1_translator_avalon_universal_slave_0_agent:m0_write -> buttons_s1_translator:uav_write
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_m0_lock;                               // buttons_s1_translator_avalon_universal_slave_0_agent:m0_lock -> buttons_s1_translator:uav_lock
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_m0_read;                               // buttons_s1_translator_avalon_universal_slave_0_agent:m0_read -> buttons_s1_translator:uav_read
	wire   [31:0] buttons_s1_translator_avalon_universal_slave_0_agent_m0_readdata;                           // buttons_s1_translator:uav_readdata -> buttons_s1_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                      // buttons_s1_translator:uav_readdatavalid -> buttons_s1_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess;                        // buttons_s1_translator_avalon_universal_slave_0_agent:m0_debugaccess -> buttons_s1_translator:uav_debugaccess
	wire    [3:0] buttons_s1_translator_avalon_universal_slave_0_agent_m0_byteenable;                         // buttons_s1_translator_avalon_universal_slave_0_agent:m0_byteenable -> buttons_s1_translator:uav_byteenable
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                 // buttons_s1_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_valid;                       // buttons_s1_translator_avalon_universal_slave_0_agent:rf_source_valid -> buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;               // buttons_s1_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [108:0] buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_data;                        // buttons_s1_translator_avalon_universal_slave_0_agent:rf_source_data -> buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_ready;                       // buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> buttons_s1_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;              // buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> buttons_s1_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                    // buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> buttons_s1_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;            // buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> buttons_s1_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [108:0] buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                     // buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> buttons_s1_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                    // buttons_s1_translator_avalon_universal_slave_0_agent:rf_sink_ready -> buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                  // buttons_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> buttons_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] buttons_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                   // buttons_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> buttons_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                  // buttons_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> buttons_s1_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_xbar_mux_008_src_endofpacket;                                                           // cmd_xbar_mux_008:src_endofpacket -> buttons_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          cmd_xbar_mux_008_src_valid;                                                                 // cmd_xbar_mux_008:src_valid -> buttons_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          cmd_xbar_mux_008_src_startofpacket;                                                         // cmd_xbar_mux_008:src_startofpacket -> buttons_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [107:0] cmd_xbar_mux_008_src_data;                                                                  // cmd_xbar_mux_008:src_data -> buttons_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire    [8:0] cmd_xbar_mux_008_src_channel;                                                               // cmd_xbar_mux_008:src_channel -> buttons_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_008_src_ready;                                                                 // buttons_s1_translator_avalon_universal_slave_0_agent:cp_ready -> cmd_xbar_mux_008:src_ready
	wire          plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_endofpacket;     // plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire          plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_valid;           // plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire          plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_startofpacket;   // plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [107:0] plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_data;            // plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire          plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_ready;           // addr_router:sink_ready -> plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_src_endofpacket;                                                                // addr_router:src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          addr_router_src_valid;                                                                      // addr_router:src_valid -> cmd_xbar_demux:sink_valid
	wire          addr_router_src_startofpacket;                                                              // addr_router:src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [107:0] addr_router_src_data;                                                                       // addr_router:src_data -> cmd_xbar_demux:sink_data
	wire    [8:0] addr_router_src_channel;                                                                    // addr_router:src_channel -> cmd_xbar_demux:sink_channel
	wire          addr_router_src_ready;                                                                      // cmd_xbar_demux:sink_ready -> addr_router:src_ready
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                   // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire   [89:0] sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_data;                    // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire          sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router:sink_ready -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                          // hex_0_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                // hex_0_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                        // hex_0_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [107:0] hex_0_s1_translator_avalon_universal_slave_0_agent_rp_data;                                 // hex_0_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire          hex_0_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                // id_router_001:sink_ready -> hex_0_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_001_src_endofpacket;                                                              // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire          id_router_001_src_valid;                                                                    // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire          id_router_001_src_startofpacket;                                                            // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [107:0] id_router_001_src_data;                                                                     // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire    [8:0] id_router_001_src_channel;                                                                  // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire          id_router_001_src_ready;                                                                    // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                          // hex_1_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_002:sink_endofpacket
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                // hex_1_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_002:sink_valid
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                        // hex_1_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_002:sink_startofpacket
	wire  [107:0] hex_1_s1_translator_avalon_universal_slave_0_agent_rp_data;                                 // hex_1_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_002:sink_data
	wire          hex_1_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                // id_router_002:sink_ready -> hex_1_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_002_src_endofpacket;                                                              // id_router_002:src_endofpacket -> rsp_xbar_demux_002:sink_endofpacket
	wire          id_router_002_src_valid;                                                                    // id_router_002:src_valid -> rsp_xbar_demux_002:sink_valid
	wire          id_router_002_src_startofpacket;                                                            // id_router_002:src_startofpacket -> rsp_xbar_demux_002:sink_startofpacket
	wire  [107:0] id_router_002_src_data;                                                                     // id_router_002:src_data -> rsp_xbar_demux_002:sink_data
	wire    [8:0] id_router_002_src_channel;                                                                  // id_router_002:src_channel -> rsp_xbar_demux_002:sink_channel
	wire          id_router_002_src_ready;                                                                    // rsp_xbar_demux_002:sink_ready -> id_router_002:src_ready
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                          // hex_2_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_003:sink_endofpacket
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                // hex_2_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_003:sink_valid
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                        // hex_2_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_003:sink_startofpacket
	wire  [107:0] hex_2_s1_translator_avalon_universal_slave_0_agent_rp_data;                                 // hex_2_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_003:sink_data
	wire          hex_2_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                // id_router_003:sink_ready -> hex_2_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_003_src_endofpacket;                                                              // id_router_003:src_endofpacket -> rsp_xbar_demux_003:sink_endofpacket
	wire          id_router_003_src_valid;                                                                    // id_router_003:src_valid -> rsp_xbar_demux_003:sink_valid
	wire          id_router_003_src_startofpacket;                                                            // id_router_003:src_startofpacket -> rsp_xbar_demux_003:sink_startofpacket
	wire  [107:0] id_router_003_src_data;                                                                     // id_router_003:src_data -> rsp_xbar_demux_003:sink_data
	wire    [8:0] id_router_003_src_channel;                                                                  // id_router_003:src_channel -> rsp_xbar_demux_003:sink_channel
	wire          id_router_003_src_ready;                                                                    // rsp_xbar_demux_003:sink_ready -> id_router_003:src_ready
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                          // hex_3_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_004:sink_endofpacket
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                // hex_3_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_004:sink_valid
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                        // hex_3_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_004:sink_startofpacket
	wire  [107:0] hex_3_s1_translator_avalon_universal_slave_0_agent_rp_data;                                 // hex_3_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_004:sink_data
	wire          hex_3_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                // id_router_004:sink_ready -> hex_3_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_004_src_endofpacket;                                                              // id_router_004:src_endofpacket -> rsp_xbar_demux_004:sink_endofpacket
	wire          id_router_004_src_valid;                                                                    // id_router_004:src_valid -> rsp_xbar_demux_004:sink_valid
	wire          id_router_004_src_startofpacket;                                                            // id_router_004:src_startofpacket -> rsp_xbar_demux_004:sink_startofpacket
	wire  [107:0] id_router_004_src_data;                                                                     // id_router_004:src_data -> rsp_xbar_demux_004:sink_data
	wire    [8:0] id_router_004_src_channel;                                                                  // id_router_004:src_channel -> rsp_xbar_demux_004:sink_channel
	wire          id_router_004_src_ready;                                                                    // rsp_xbar_demux_004:sink_ready -> id_router_004:src_ready
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                          // hex_4_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_005:sink_endofpacket
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                // hex_4_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_005:sink_valid
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                        // hex_4_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_005:sink_startofpacket
	wire  [107:0] hex_4_s1_translator_avalon_universal_slave_0_agent_rp_data;                                 // hex_4_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_005:sink_data
	wire          hex_4_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                // id_router_005:sink_ready -> hex_4_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_005_src_endofpacket;                                                              // id_router_005:src_endofpacket -> rsp_xbar_demux_005:sink_endofpacket
	wire          id_router_005_src_valid;                                                                    // id_router_005:src_valid -> rsp_xbar_demux_005:sink_valid
	wire          id_router_005_src_startofpacket;                                                            // id_router_005:src_startofpacket -> rsp_xbar_demux_005:sink_startofpacket
	wire  [107:0] id_router_005_src_data;                                                                     // id_router_005:src_data -> rsp_xbar_demux_005:sink_data
	wire    [8:0] id_router_005_src_channel;                                                                  // id_router_005:src_channel -> rsp_xbar_demux_005:sink_channel
	wire          id_router_005_src_ready;                                                                    // rsp_xbar_demux_005:sink_ready -> id_router_005:src_ready
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                          // hex_5_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_006:sink_endofpacket
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rp_valid;                                // hex_5_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_006:sink_valid
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                        // hex_5_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_006:sink_startofpacket
	wire  [107:0] hex_5_s1_translator_avalon_universal_slave_0_agent_rp_data;                                 // hex_5_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_006:sink_data
	wire          hex_5_s1_translator_avalon_universal_slave_0_agent_rp_ready;                                // id_router_006:sink_ready -> hex_5_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_006_src_endofpacket;                                                              // id_router_006:src_endofpacket -> rsp_xbar_demux_006:sink_endofpacket
	wire          id_router_006_src_valid;                                                                    // id_router_006:src_valid -> rsp_xbar_demux_006:sink_valid
	wire          id_router_006_src_startofpacket;                                                            // id_router_006:src_startofpacket -> rsp_xbar_demux_006:sink_startofpacket
	wire  [107:0] id_router_006_src_data;                                                                     // id_router_006:src_data -> rsp_xbar_demux_006:sink_data
	wire    [8:0] id_router_006_src_channel;                                                                  // id_router_006:src_channel -> rsp_xbar_demux_006:sink_channel
	wire          id_router_006_src_ready;                                                                    // rsp_xbar_demux_006:sink_ready -> id_router_006:src_ready
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                       // switches_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_007:sink_endofpacket
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rp_valid;                             // switches_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_007:sink_valid
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                     // switches_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_007:sink_startofpacket
	wire  [107:0] switches_s1_translator_avalon_universal_slave_0_agent_rp_data;                              // switches_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_007:sink_data
	wire          switches_s1_translator_avalon_universal_slave_0_agent_rp_ready;                             // id_router_007:sink_ready -> switches_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_007_src_endofpacket;                                                              // id_router_007:src_endofpacket -> rsp_xbar_demux_007:sink_endofpacket
	wire          id_router_007_src_valid;                                                                    // id_router_007:src_valid -> rsp_xbar_demux_007:sink_valid
	wire          id_router_007_src_startofpacket;                                                            // id_router_007:src_startofpacket -> rsp_xbar_demux_007:sink_startofpacket
	wire  [107:0] id_router_007_src_data;                                                                     // id_router_007:src_data -> rsp_xbar_demux_007:sink_data
	wire    [8:0] id_router_007_src_channel;                                                                  // id_router_007:src_channel -> rsp_xbar_demux_007:sink_channel
	wire          id_router_007_src_ready;                                                                    // rsp_xbar_demux_007:sink_ready -> id_router_007:src_ready
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket;                        // buttons_s1_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_008:sink_endofpacket
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rp_valid;                              // buttons_s1_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_008:sink_valid
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket;                      // buttons_s1_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_008:sink_startofpacket
	wire  [107:0] buttons_s1_translator_avalon_universal_slave_0_agent_rp_data;                               // buttons_s1_translator_avalon_universal_slave_0_agent:rp_data -> id_router_008:sink_data
	wire          buttons_s1_translator_avalon_universal_slave_0_agent_rp_ready;                              // id_router_008:sink_ready -> buttons_s1_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_008_src_endofpacket;                                                              // id_router_008:src_endofpacket -> rsp_xbar_demux_008:sink_endofpacket
	wire          id_router_008_src_valid;                                                                    // id_router_008:src_valid -> rsp_xbar_demux_008:sink_valid
	wire          id_router_008_src_startofpacket;                                                            // id_router_008:src_startofpacket -> rsp_xbar_demux_008:sink_startofpacket
	wire  [107:0] id_router_008_src_data;                                                                     // id_router_008:src_data -> rsp_xbar_demux_008:sink_data
	wire    [8:0] id_router_008_src_channel;                                                                  // id_router_008:src_channel -> rsp_xbar_demux_008:sink_channel
	wire          id_router_008_src_ready;                                                                    // rsp_xbar_demux_008:sink_ready -> id_router_008:src_ready
	wire          burst_adapter_source0_endofpacket;                                                          // burst_adapter:source0_endofpacket -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_source0_valid;                                                                // burst_adapter:source0_valid -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_source0_startofpacket;                                                        // burst_adapter:source0_startofpacket -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire   [89:0] burst_adapter_source0_data;                                                                 // burst_adapter:source0_data -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_source0_ready;                                                                // sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire    [8:0] burst_adapter_source0_channel;                                                              // burst_adapter:source0_channel -> sdram_controller_0_s1_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_demux_src0_endofpacket;                                                            // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                                  // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                          // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [107:0] cmd_xbar_demux_src0_data;                                                                   // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire    [8:0] cmd_xbar_demux_src0_channel;                                                                // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire          cmd_xbar_demux_src0_ready;                                                                  // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire          cmd_xbar_demux_src1_endofpacket;                                                            // cmd_xbar_demux:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire          cmd_xbar_demux_src1_valid;                                                                  // cmd_xbar_demux:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire          cmd_xbar_demux_src1_startofpacket;                                                          // cmd_xbar_demux:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [107:0] cmd_xbar_demux_src1_data;                                                                   // cmd_xbar_demux:src1_data -> cmd_xbar_mux_001:sink0_data
	wire    [8:0] cmd_xbar_demux_src1_channel;                                                                // cmd_xbar_demux:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire          cmd_xbar_demux_src1_ready;                                                                  // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux:src1_ready
	wire          cmd_xbar_demux_src2_endofpacket;                                                            // cmd_xbar_demux:src2_endofpacket -> cmd_xbar_mux_002:sink0_endofpacket
	wire          cmd_xbar_demux_src2_valid;                                                                  // cmd_xbar_demux:src2_valid -> cmd_xbar_mux_002:sink0_valid
	wire          cmd_xbar_demux_src2_startofpacket;                                                          // cmd_xbar_demux:src2_startofpacket -> cmd_xbar_mux_002:sink0_startofpacket
	wire  [107:0] cmd_xbar_demux_src2_data;                                                                   // cmd_xbar_demux:src2_data -> cmd_xbar_mux_002:sink0_data
	wire    [8:0] cmd_xbar_demux_src2_channel;                                                                // cmd_xbar_demux:src2_channel -> cmd_xbar_mux_002:sink0_channel
	wire          cmd_xbar_demux_src2_ready;                                                                  // cmd_xbar_mux_002:sink0_ready -> cmd_xbar_demux:src2_ready
	wire          cmd_xbar_demux_src3_endofpacket;                                                            // cmd_xbar_demux:src3_endofpacket -> cmd_xbar_mux_003:sink0_endofpacket
	wire          cmd_xbar_demux_src3_valid;                                                                  // cmd_xbar_demux:src3_valid -> cmd_xbar_mux_003:sink0_valid
	wire          cmd_xbar_demux_src3_startofpacket;                                                          // cmd_xbar_demux:src3_startofpacket -> cmd_xbar_mux_003:sink0_startofpacket
	wire  [107:0] cmd_xbar_demux_src3_data;                                                                   // cmd_xbar_demux:src3_data -> cmd_xbar_mux_003:sink0_data
	wire    [8:0] cmd_xbar_demux_src3_channel;                                                                // cmd_xbar_demux:src3_channel -> cmd_xbar_mux_003:sink0_channel
	wire          cmd_xbar_demux_src3_ready;                                                                  // cmd_xbar_mux_003:sink0_ready -> cmd_xbar_demux:src3_ready
	wire          cmd_xbar_demux_src4_endofpacket;                                                            // cmd_xbar_demux:src4_endofpacket -> cmd_xbar_mux_004:sink0_endofpacket
	wire          cmd_xbar_demux_src4_valid;                                                                  // cmd_xbar_demux:src4_valid -> cmd_xbar_mux_004:sink0_valid
	wire          cmd_xbar_demux_src4_startofpacket;                                                          // cmd_xbar_demux:src4_startofpacket -> cmd_xbar_mux_004:sink0_startofpacket
	wire  [107:0] cmd_xbar_demux_src4_data;                                                                   // cmd_xbar_demux:src4_data -> cmd_xbar_mux_004:sink0_data
	wire    [8:0] cmd_xbar_demux_src4_channel;                                                                // cmd_xbar_demux:src4_channel -> cmd_xbar_mux_004:sink0_channel
	wire          cmd_xbar_demux_src4_ready;                                                                  // cmd_xbar_mux_004:sink0_ready -> cmd_xbar_demux:src4_ready
	wire          cmd_xbar_demux_src5_endofpacket;                                                            // cmd_xbar_demux:src5_endofpacket -> cmd_xbar_mux_005:sink0_endofpacket
	wire          cmd_xbar_demux_src5_valid;                                                                  // cmd_xbar_demux:src5_valid -> cmd_xbar_mux_005:sink0_valid
	wire          cmd_xbar_demux_src5_startofpacket;                                                          // cmd_xbar_demux:src5_startofpacket -> cmd_xbar_mux_005:sink0_startofpacket
	wire  [107:0] cmd_xbar_demux_src5_data;                                                                   // cmd_xbar_demux:src5_data -> cmd_xbar_mux_005:sink0_data
	wire    [8:0] cmd_xbar_demux_src5_channel;                                                                // cmd_xbar_demux:src5_channel -> cmd_xbar_mux_005:sink0_channel
	wire          cmd_xbar_demux_src5_ready;                                                                  // cmd_xbar_mux_005:sink0_ready -> cmd_xbar_demux:src5_ready
	wire          cmd_xbar_demux_src6_endofpacket;                                                            // cmd_xbar_demux:src6_endofpacket -> cmd_xbar_mux_006:sink0_endofpacket
	wire          cmd_xbar_demux_src6_valid;                                                                  // cmd_xbar_demux:src6_valid -> cmd_xbar_mux_006:sink0_valid
	wire          cmd_xbar_demux_src6_startofpacket;                                                          // cmd_xbar_demux:src6_startofpacket -> cmd_xbar_mux_006:sink0_startofpacket
	wire  [107:0] cmd_xbar_demux_src6_data;                                                                   // cmd_xbar_demux:src6_data -> cmd_xbar_mux_006:sink0_data
	wire    [8:0] cmd_xbar_demux_src6_channel;                                                                // cmd_xbar_demux:src6_channel -> cmd_xbar_mux_006:sink0_channel
	wire          cmd_xbar_demux_src6_ready;                                                                  // cmd_xbar_mux_006:sink0_ready -> cmd_xbar_demux:src6_ready
	wire          cmd_xbar_demux_src7_endofpacket;                                                            // cmd_xbar_demux:src7_endofpacket -> cmd_xbar_mux_007:sink0_endofpacket
	wire          cmd_xbar_demux_src7_valid;                                                                  // cmd_xbar_demux:src7_valid -> cmd_xbar_mux_007:sink0_valid
	wire          cmd_xbar_demux_src7_startofpacket;                                                          // cmd_xbar_demux:src7_startofpacket -> cmd_xbar_mux_007:sink0_startofpacket
	wire  [107:0] cmd_xbar_demux_src7_data;                                                                   // cmd_xbar_demux:src7_data -> cmd_xbar_mux_007:sink0_data
	wire    [8:0] cmd_xbar_demux_src7_channel;                                                                // cmd_xbar_demux:src7_channel -> cmd_xbar_mux_007:sink0_channel
	wire          cmd_xbar_demux_src7_ready;                                                                  // cmd_xbar_mux_007:sink0_ready -> cmd_xbar_demux:src7_ready
	wire          cmd_xbar_demux_src8_endofpacket;                                                            // cmd_xbar_demux:src8_endofpacket -> cmd_xbar_mux_008:sink0_endofpacket
	wire          cmd_xbar_demux_src8_valid;                                                                  // cmd_xbar_demux:src8_valid -> cmd_xbar_mux_008:sink0_valid
	wire          cmd_xbar_demux_src8_startofpacket;                                                          // cmd_xbar_demux:src8_startofpacket -> cmd_xbar_mux_008:sink0_startofpacket
	wire  [107:0] cmd_xbar_demux_src8_data;                                                                   // cmd_xbar_demux:src8_data -> cmd_xbar_mux_008:sink0_data
	wire    [8:0] cmd_xbar_demux_src8_channel;                                                                // cmd_xbar_demux:src8_channel -> cmd_xbar_mux_008:sink0_channel
	wire          cmd_xbar_demux_src8_ready;                                                                  // cmd_xbar_mux_008:sink0_ready -> cmd_xbar_demux:src8_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                                            // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                                  // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                          // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [107:0] rsp_xbar_demux_src0_data;                                                                   // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire    [8:0] rsp_xbar_demux_src0_channel;                                                                // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire          rsp_xbar_demux_src0_ready;                                                                  // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire          rsp_xbar_demux_001_src0_endofpacket;                                                        // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire          rsp_xbar_demux_001_src0_valid;                                                              // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux:sink1_valid
	wire          rsp_xbar_demux_001_src0_startofpacket;                                                      // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [107:0] rsp_xbar_demux_001_src0_data;                                                               // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux:sink1_data
	wire    [8:0] rsp_xbar_demux_001_src0_channel;                                                            // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux:sink1_channel
	wire          rsp_xbar_demux_001_src0_ready;                                                              // rsp_xbar_mux:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire          rsp_xbar_demux_002_src0_endofpacket;                                                        // rsp_xbar_demux_002:src0_endofpacket -> rsp_xbar_mux:sink2_endofpacket
	wire          rsp_xbar_demux_002_src0_valid;                                                              // rsp_xbar_demux_002:src0_valid -> rsp_xbar_mux:sink2_valid
	wire          rsp_xbar_demux_002_src0_startofpacket;                                                      // rsp_xbar_demux_002:src0_startofpacket -> rsp_xbar_mux:sink2_startofpacket
	wire  [107:0] rsp_xbar_demux_002_src0_data;                                                               // rsp_xbar_demux_002:src0_data -> rsp_xbar_mux:sink2_data
	wire    [8:0] rsp_xbar_demux_002_src0_channel;                                                            // rsp_xbar_demux_002:src0_channel -> rsp_xbar_mux:sink2_channel
	wire          rsp_xbar_demux_002_src0_ready;                                                              // rsp_xbar_mux:sink2_ready -> rsp_xbar_demux_002:src0_ready
	wire          rsp_xbar_demux_003_src0_endofpacket;                                                        // rsp_xbar_demux_003:src0_endofpacket -> rsp_xbar_mux:sink3_endofpacket
	wire          rsp_xbar_demux_003_src0_valid;                                                              // rsp_xbar_demux_003:src0_valid -> rsp_xbar_mux:sink3_valid
	wire          rsp_xbar_demux_003_src0_startofpacket;                                                      // rsp_xbar_demux_003:src0_startofpacket -> rsp_xbar_mux:sink3_startofpacket
	wire  [107:0] rsp_xbar_demux_003_src0_data;                                                               // rsp_xbar_demux_003:src0_data -> rsp_xbar_mux:sink3_data
	wire    [8:0] rsp_xbar_demux_003_src0_channel;                                                            // rsp_xbar_demux_003:src0_channel -> rsp_xbar_mux:sink3_channel
	wire          rsp_xbar_demux_003_src0_ready;                                                              // rsp_xbar_mux:sink3_ready -> rsp_xbar_demux_003:src0_ready
	wire          rsp_xbar_demux_004_src0_endofpacket;                                                        // rsp_xbar_demux_004:src0_endofpacket -> rsp_xbar_mux:sink4_endofpacket
	wire          rsp_xbar_demux_004_src0_valid;                                                              // rsp_xbar_demux_004:src0_valid -> rsp_xbar_mux:sink4_valid
	wire          rsp_xbar_demux_004_src0_startofpacket;                                                      // rsp_xbar_demux_004:src0_startofpacket -> rsp_xbar_mux:sink4_startofpacket
	wire  [107:0] rsp_xbar_demux_004_src0_data;                                                               // rsp_xbar_demux_004:src0_data -> rsp_xbar_mux:sink4_data
	wire    [8:0] rsp_xbar_demux_004_src0_channel;                                                            // rsp_xbar_demux_004:src0_channel -> rsp_xbar_mux:sink4_channel
	wire          rsp_xbar_demux_004_src0_ready;                                                              // rsp_xbar_mux:sink4_ready -> rsp_xbar_demux_004:src0_ready
	wire          rsp_xbar_demux_005_src0_endofpacket;                                                        // rsp_xbar_demux_005:src0_endofpacket -> rsp_xbar_mux:sink5_endofpacket
	wire          rsp_xbar_demux_005_src0_valid;                                                              // rsp_xbar_demux_005:src0_valid -> rsp_xbar_mux:sink5_valid
	wire          rsp_xbar_demux_005_src0_startofpacket;                                                      // rsp_xbar_demux_005:src0_startofpacket -> rsp_xbar_mux:sink5_startofpacket
	wire  [107:0] rsp_xbar_demux_005_src0_data;                                                               // rsp_xbar_demux_005:src0_data -> rsp_xbar_mux:sink5_data
	wire    [8:0] rsp_xbar_demux_005_src0_channel;                                                            // rsp_xbar_demux_005:src0_channel -> rsp_xbar_mux:sink5_channel
	wire          rsp_xbar_demux_005_src0_ready;                                                              // rsp_xbar_mux:sink5_ready -> rsp_xbar_demux_005:src0_ready
	wire          rsp_xbar_demux_006_src0_endofpacket;                                                        // rsp_xbar_demux_006:src0_endofpacket -> rsp_xbar_mux:sink6_endofpacket
	wire          rsp_xbar_demux_006_src0_valid;                                                              // rsp_xbar_demux_006:src0_valid -> rsp_xbar_mux:sink6_valid
	wire          rsp_xbar_demux_006_src0_startofpacket;                                                      // rsp_xbar_demux_006:src0_startofpacket -> rsp_xbar_mux:sink6_startofpacket
	wire  [107:0] rsp_xbar_demux_006_src0_data;                                                               // rsp_xbar_demux_006:src0_data -> rsp_xbar_mux:sink6_data
	wire    [8:0] rsp_xbar_demux_006_src0_channel;                                                            // rsp_xbar_demux_006:src0_channel -> rsp_xbar_mux:sink6_channel
	wire          rsp_xbar_demux_006_src0_ready;                                                              // rsp_xbar_mux:sink6_ready -> rsp_xbar_demux_006:src0_ready
	wire          rsp_xbar_demux_007_src0_endofpacket;                                                        // rsp_xbar_demux_007:src0_endofpacket -> rsp_xbar_mux:sink7_endofpacket
	wire          rsp_xbar_demux_007_src0_valid;                                                              // rsp_xbar_demux_007:src0_valid -> rsp_xbar_mux:sink7_valid
	wire          rsp_xbar_demux_007_src0_startofpacket;                                                      // rsp_xbar_demux_007:src0_startofpacket -> rsp_xbar_mux:sink7_startofpacket
	wire  [107:0] rsp_xbar_demux_007_src0_data;                                                               // rsp_xbar_demux_007:src0_data -> rsp_xbar_mux:sink7_data
	wire    [8:0] rsp_xbar_demux_007_src0_channel;                                                            // rsp_xbar_demux_007:src0_channel -> rsp_xbar_mux:sink7_channel
	wire          rsp_xbar_demux_007_src0_ready;                                                              // rsp_xbar_mux:sink7_ready -> rsp_xbar_demux_007:src0_ready
	wire          rsp_xbar_demux_008_src0_endofpacket;                                                        // rsp_xbar_demux_008:src0_endofpacket -> rsp_xbar_mux:sink8_endofpacket
	wire          rsp_xbar_demux_008_src0_valid;                                                              // rsp_xbar_demux_008:src0_valid -> rsp_xbar_mux:sink8_valid
	wire          rsp_xbar_demux_008_src0_startofpacket;                                                      // rsp_xbar_demux_008:src0_startofpacket -> rsp_xbar_mux:sink8_startofpacket
	wire  [107:0] rsp_xbar_demux_008_src0_data;                                                               // rsp_xbar_demux_008:src0_data -> rsp_xbar_mux:sink8_data
	wire    [8:0] rsp_xbar_demux_008_src0_channel;                                                            // rsp_xbar_demux_008:src0_channel -> rsp_xbar_mux:sink8_channel
	wire          rsp_xbar_demux_008_src0_ready;                                                              // rsp_xbar_mux:sink8_ready -> rsp_xbar_demux_008:src0_ready
	wire          id_router_src_endofpacket;                                                                  // id_router:src_endofpacket -> width_adapter:in_endofpacket
	wire          id_router_src_valid;                                                                        // id_router:src_valid -> width_adapter:in_valid
	wire          id_router_src_startofpacket;                                                                // id_router:src_startofpacket -> width_adapter:in_startofpacket
	wire   [89:0] id_router_src_data;                                                                         // id_router:src_data -> width_adapter:in_data
	wire    [8:0] id_router_src_channel;                                                                      // id_router:src_channel -> width_adapter:in_channel
	wire          id_router_src_ready;                                                                        // width_adapter:in_ready -> id_router:src_ready
	wire          width_adapter_src_endofpacket;                                                              // width_adapter:out_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          width_adapter_src_valid;                                                                    // width_adapter:out_valid -> rsp_xbar_demux:sink_valid
	wire          width_adapter_src_startofpacket;                                                            // width_adapter:out_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [107:0] width_adapter_src_data;                                                                     // width_adapter:out_data -> rsp_xbar_demux:sink_data
	wire          width_adapter_src_ready;                                                                    // rsp_xbar_demux:sink_ready -> width_adapter:out_ready
	wire    [8:0] width_adapter_src_channel;                                                                  // width_adapter:out_channel -> rsp_xbar_demux:sink_channel
	wire          cmd_xbar_mux_src_endofpacket;                                                               // cmd_xbar_mux:src_endofpacket -> width_adapter_001:in_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                                     // cmd_xbar_mux:src_valid -> width_adapter_001:in_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                             // cmd_xbar_mux:src_startofpacket -> width_adapter_001:in_startofpacket
	wire  [107:0] cmd_xbar_mux_src_data;                                                                      // cmd_xbar_mux:src_data -> width_adapter_001:in_data
	wire    [8:0] cmd_xbar_mux_src_channel;                                                                   // cmd_xbar_mux:src_channel -> width_adapter_001:in_channel
	wire          cmd_xbar_mux_src_ready;                                                                     // width_adapter_001:in_ready -> cmd_xbar_mux:src_ready
	wire          width_adapter_001_src_endofpacket;                                                          // width_adapter_001:out_endofpacket -> burst_adapter:sink0_endofpacket
	wire          width_adapter_001_src_valid;                                                                // width_adapter_001:out_valid -> burst_adapter:sink0_valid
	wire          width_adapter_001_src_startofpacket;                                                        // width_adapter_001:out_startofpacket -> burst_adapter:sink0_startofpacket
	wire   [89:0] width_adapter_001_src_data;                                                                 // width_adapter_001:out_data -> burst_adapter:sink0_data
	wire          width_adapter_001_src_ready;                                                                // burst_adapter:sink0_ready -> width_adapter_001:out_ready
	wire    [8:0] width_adapter_001_src_channel;                                                              // width_adapter_001:out_channel -> burst_adapter:sink0_channel

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (1),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) plasma_soc_0_avalon_master_0_translator (
		.clk                      (pll_0_outclk0_clk),                                                               //                       clk.clk
		.reset                    (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                             //                     reset.reset
		.uav_address              (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.uav_response             (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_response),      //                          .response
		.av_address               (plasma_soc_0_avalon_master_0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (plasma_soc_0_avalon_master_0_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (plasma_soc_0_avalon_master_0_byteenable),                                         //                          .byteenable
		.av_read                  (plasma_soc_0_avalon_master_0_read),                                               //                          .read
		.av_readdata              (plasma_soc_0_avalon_master_0_readdata),                                           //                          .readdata
		.av_write                 (plasma_soc_0_avalon_master_0_write),                                              //                          .write
		.av_writedata             (plasma_soc_0_avalon_master_0_writedata),                                          //                          .writedata
		.av_response              (plasma_soc_0_avalon_master_0_response),                                           //                          .response
		.av_burstcount            (1'b1),                                                                            //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                            //               (terminated)
		.av_begintransfer         (1'b0),                                                                            //               (terminated)
		.av_chipselect            (1'b0),                                                                            //               (terminated)
		.av_readdatavalid         (),                                                                                //               (terminated)
		.av_lock                  (1'b0),                                                                            //               (terminated)
		.av_debugaccess           (1'b0),                                                                            //               (terminated)
		.uav_clken                (),                                                                                //               (terminated)
		.av_clken                 (1'b1),                                                                            //               (terminated)
		.uav_writeresponserequest (),                                                                                //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                            //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid    ()                                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_controller_0_s1_translator (
		.clk                      (pll_0_outclk0_clk),                                                                //                      clk.clk
		.reset                    (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                              //                    reset.reset
		.uav_address              (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sdram_controller_0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (sdram_controller_0_s1_write),                                                      //                         .write
		.av_read                  (sdram_controller_0_s1_read),                                                       //                         .read
		.av_readdata              (sdram_controller_0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (sdram_controller_0_s1_writedata),                                                  //                         .writedata
		.av_byteenable            (sdram_controller_0_s1_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (sdram_controller_0_s1_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (sdram_controller_0_s1_waitrequest),                                                //                         .waitrequest
		.av_chipselect            (sdram_controller_0_s1_chipselect),                                                 //                         .chipselect
		.av_begintransfer         (),                                                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                                                 //              (terminated)
		.av_burstcount            (),                                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                                 //              (terminated)
		.av_lock                  (),                                                                                 //              (terminated)
		.av_clken                 (),                                                                                 //              (terminated)
		.uav_clken                (1'b0),                                                                             //              (terminated)
		.av_debugaccess           (),                                                                                 //              (terminated)
		.av_outputenable          (),                                                                                 //              (terminated)
		.uav_response             (),                                                                                 //              (terminated)
		.av_response              (2'b00),                                                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                                                 //              (terminated)
		.av_writeresponserequest  (),                                                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_0_s1_translator (
		.clk                      (pll_0_outclk0_clk),                                                   //                      clk.clk
		.reset                    (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (hex_0_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (hex_0_s1_write),                                                      //                         .write
		.av_readdata              (hex_0_s1_readdata),                                                   //                         .readdata
		.av_writedata             (hex_0_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (hex_0_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_1_s1_translator (
		.clk                      (pll_0_outclk0_clk),                                                   //                      clk.clk
		.reset                    (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (hex_1_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (hex_1_s1_write),                                                      //                         .write
		.av_readdata              (hex_1_s1_readdata),                                                   //                         .readdata
		.av_writedata             (hex_1_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (hex_1_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_2_s1_translator (
		.clk                      (pll_0_outclk0_clk),                                                   //                      clk.clk
		.reset                    (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (hex_2_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (hex_2_s1_write),                                                      //                         .write
		.av_readdata              (hex_2_s1_readdata),                                                   //                         .readdata
		.av_writedata             (hex_2_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (hex_2_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_3_s1_translator (
		.clk                      (pll_0_outclk0_clk),                                                   //                      clk.clk
		.reset                    (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (hex_3_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (hex_3_s1_write),                                                      //                         .write
		.av_readdata              (hex_3_s1_readdata),                                                   //                         .readdata
		.av_writedata             (hex_3_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (hex_3_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_4_s1_translator (
		.clk                      (pll_0_outclk0_clk),                                                   //                      clk.clk
		.reset                    (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (hex_4_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (hex_4_s1_write),                                                      //                         .write
		.av_readdata              (hex_4_s1_readdata),                                                   //                         .readdata
		.av_writedata             (hex_4_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (hex_4_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_5_s1_translator (
		.clk                      (pll_0_outclk0_clk),                                                   //                      clk.clk
		.reset                    (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address              (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (hex_5_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (hex_5_s1_write),                                                      //                         .write
		.av_readdata              (hex_5_s1_readdata),                                                   //                         .readdata
		.av_writedata             (hex_5_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (hex_5_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                    //              (terminated)
		.av_begintransfer         (),                                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                                    //              (terminated)
		.av_burstcount            (),                                                                    //              (terminated)
		.av_byteenable            (),                                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                                //              (terminated)
		.av_writebyteenable       (),                                                                    //              (terminated)
		.av_lock                  (),                                                                    //              (terminated)
		.av_clken                 (),                                                                    //              (terminated)
		.uav_clken                (1'b0),                                                                //              (terminated)
		.av_debugaccess           (),                                                                    //              (terminated)
		.av_outputenable          (),                                                                    //              (terminated)
		.uav_response             (),                                                                    //              (terminated)
		.av_response              (2'b00),                                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                                    //              (terminated)
		.av_writeresponserequest  (),                                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) switches_s1_translator (
		.clk                      (pll_0_outclk0_clk),                                                      //                      clk.clk
		.reset                    (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                    //                    reset.reset
		.uav_address              (switches_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (switches_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (switches_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (switches_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (switches_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (switches_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (switches_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (switches_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (switches_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (switches_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (switches_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (switches_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (switches_s1_write),                                                      //                         .write
		.av_readdata              (switches_s1_readdata),                                                   //                         .readdata
		.av_writedata             (switches_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (switches_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                       //              (terminated)
		.av_begintransfer         (),                                                                       //              (terminated)
		.av_beginbursttransfer    (),                                                                       //              (terminated)
		.av_burstcount            (),                                                                       //              (terminated)
		.av_byteenable            (),                                                                       //              (terminated)
		.av_readdatavalid         (1'b0),                                                                   //              (terminated)
		.av_waitrequest           (1'b0),                                                                   //              (terminated)
		.av_writebyteenable       (),                                                                       //              (terminated)
		.av_lock                  (),                                                                       //              (terminated)
		.av_clken                 (),                                                                       //              (terminated)
		.uav_clken                (1'b0),                                                                   //              (terminated)
		.av_debugaccess           (),                                                                       //              (terminated)
		.av_outputenable          (),                                                                       //              (terminated)
		.uav_response             (),                                                                       //              (terminated)
		.av_response              (2'b00),                                                                  //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                   //              (terminated)
		.uav_writeresponsevalid   (),                                                                       //              (terminated)
		.av_writeresponserequest  (),                                                                       //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) buttons_s1_translator (
		.clk                      (pll_0_outclk0_clk),                                                     //                      clk.clk
		.reset                    (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                   //                    reset.reset
		.uav_address              (buttons_s1_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (buttons_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (buttons_s1_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (buttons_s1_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (buttons_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (buttons_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (buttons_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (buttons_s1_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (buttons_s1_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (buttons_s1_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (buttons_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (buttons_s1_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (buttons_s1_write),                                                      //                         .write
		.av_readdata              (buttons_s1_readdata),                                                   //                         .readdata
		.av_writedata             (buttons_s1_writedata),                                                  //                         .writedata
		.av_chipselect            (buttons_s1_chipselect),                                                 //                         .chipselect
		.av_read                  (),                                                                      //              (terminated)
		.av_begintransfer         (),                                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                                      //              (terminated)
		.av_burstcount            (),                                                                      //              (terminated)
		.av_byteenable            (),                                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                                  //              (terminated)
		.av_writebyteenable       (),                                                                      //              (terminated)
		.av_lock                  (),                                                                      //              (terminated)
		.av_clken                 (),                                                                      //              (terminated)
		.uav_clken                (1'b0),                                                                  //              (terminated)
		.av_debugaccess           (),                                                                      //              (terminated)
		.av_outputenable          (),                                                                      //              (terminated)
		.uav_response             (),                                                                      //              (terminated)
		.av_response              (2'b00),                                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                                      //              (terminated)
		.av_writeresponserequest  (),                                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BEGIN_BURST           (85),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (9),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (1),
		.USE_WRITERESPONSE         (0)
	) plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent (
		.clk                     (pll_0_outclk0_clk),                                                                        //       clk.clk
		.reset                   (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.av_address              (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_lock),                   //          .lock
		.av_response             (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_response),               //          .response
		.cp_valid                (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_src_valid),                                                                   //        rp.valid
		.rp_data                 (rsp_xbar_mux_src_data),                                                                    //          .data
		.rp_channel              (rsp_xbar_mux_src_channel),                                                                 //          .channel
		.rp_startofpacket        (rsp_xbar_mux_src_startofpacket),                                                           //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_src_endofpacket),                                                             //          .endofpacket
		.rp_ready                (rsp_xbar_mux_src_ready),                                                                   //          .ready
		.av_writeresponserequest (1'b0),                                                                                     // (terminated)
		.av_writeresponsevalid   ()                                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (67),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_TRANS_LOCK            (54),
		.PKT_SRC_ID_H              (72),
		.PKT_SRC_ID_L              (69),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (73),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_ORI_BURST_SIZE_L      (87),
		.PKT_ORI_BURST_SIZE_H      (89),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (90),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sdram_controller_0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_0_outclk0_clk),                                                                          //             clk.clk
		.reset                   (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                                        //       clk_reset.reset
		.m0_address              (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                                //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                                //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                                 //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                                        //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                                          //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                                              //                .channel
		.rf_sink_ready           (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                      //     (terminated)
		.m0_writeresponserequest (),                                                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (91),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                                          //       clk.clk
		.reset             (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_data           (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                      // (terminated)
		.csr_read          (1'b0),                                                                                       // (terminated)
		.csr_write         (1'b0),                                                                                       // (terminated)
		.csr_readdata      (),                                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                       // (terminated)
		.almost_full_data  (),                                                                                           // (terminated)
		.almost_empty_data (),                                                                                           // (terminated)
		.in_empty          (1'b0),                                                                                       // (terminated)
		.out_empty         (),                                                                                           // (terminated)
		.in_error          (1'b0),                                                                                       // (terminated)
		.out_error         (),                                                                                           // (terminated)
		.in_channel        (1'b0),                                                                                       // (terminated)
		.out_channel       ()                                                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                                                    //       clk.clk
		.reset             (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_data           (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                // (terminated)
		.csr_read          (1'b0),                                                                                 // (terminated)
		.csr_write         (1'b0),                                                                                 // (terminated)
		.csr_readdata      (),                                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                 // (terminated)
		.almost_full_data  (),                                                                                     // (terminated)
		.almost_empty_data (),                                                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                                                 // (terminated)
		.out_startofpacket (),                                                                                     // (terminated)
		.out_endofpacket   (),                                                                                     // (terminated)
		.in_empty          (1'b0),                                                                                 // (terminated)
		.out_empty         (),                                                                                     // (terminated)
		.in_error          (1'b0),                                                                                 // (terminated)
		.out_error         (),                                                                                     // (terminated)
		.in_channel        (1'b0),                                                                                 // (terminated)
		.out_channel       ()                                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hex_0_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_0_outclk0_clk),                                                             //             clk.clk
		.reset                   (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_0_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_0_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_001_src_ready),                                                    //              cp.ready
		.cp_valid                (cmd_xbar_mux_001_src_valid),                                                    //                .valid
		.cp_data                 (cmd_xbar_mux_001_src_data),                                                     //                .data
		.cp_startofpacket        (cmd_xbar_mux_001_src_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_001_src_endofpacket),                                              //                .endofpacket
		.cp_channel              (cmd_xbar_mux_001_src_channel),                                                  //                .channel
		.rf_sink_ready           (hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (hex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (hex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_0_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                             //       clk.clk
		.reset             (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_0_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_0_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hex_1_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_0_outclk0_clk),                                                             //             clk.clk
		.reset                   (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_1_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_1_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_1_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_1_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_002_src_ready),                                                    //              cp.ready
		.cp_valid                (cmd_xbar_mux_002_src_valid),                                                    //                .valid
		.cp_data                 (cmd_xbar_mux_002_src_data),                                                     //                .data
		.cp_startofpacket        (cmd_xbar_mux_002_src_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_002_src_endofpacket),                                              //                .endofpacket
		.cp_channel              (cmd_xbar_mux_002_src_channel),                                                  //                .channel
		.rf_sink_ready           (hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hex_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hex_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (hex_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (hex_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_1_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                             //       clk.clk
		.reset             (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_1_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_1_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hex_2_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_0_outclk0_clk),                                                             //             clk.clk
		.reset                   (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_2_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_2_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_2_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_2_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_2_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_2_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_003_src_ready),                                                    //              cp.ready
		.cp_valid                (cmd_xbar_mux_003_src_valid),                                                    //                .valid
		.cp_data                 (cmd_xbar_mux_003_src_data),                                                     //                .data
		.cp_startofpacket        (cmd_xbar_mux_003_src_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_003_src_endofpacket),                                              //                .endofpacket
		.cp_channel              (cmd_xbar_mux_003_src_channel),                                                  //                .channel
		.rf_sink_ready           (hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hex_2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hex_2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (hex_2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (hex_2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_2_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                             //       clk.clk
		.reset             (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_2_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_2_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hex_3_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_0_outclk0_clk),                                                             //             clk.clk
		.reset                   (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_3_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_3_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_3_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_3_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_3_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_3_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_004_src_ready),                                                    //              cp.ready
		.cp_valid                (cmd_xbar_mux_004_src_valid),                                                    //                .valid
		.cp_data                 (cmd_xbar_mux_004_src_data),                                                     //                .data
		.cp_startofpacket        (cmd_xbar_mux_004_src_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_004_src_endofpacket),                                              //                .endofpacket
		.cp_channel              (cmd_xbar_mux_004_src_channel),                                                  //                .channel
		.rf_sink_ready           (hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hex_3_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hex_3_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (hex_3_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (hex_3_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_3_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_3_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                             //       clk.clk
		.reset             (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_3_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_3_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hex_4_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_0_outclk0_clk),                                                             //             clk.clk
		.reset                   (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_4_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_4_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_4_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_4_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_4_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_4_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_005_src_ready),                                                    //              cp.ready
		.cp_valid                (cmd_xbar_mux_005_src_valid),                                                    //                .valid
		.cp_data                 (cmd_xbar_mux_005_src_data),                                                     //                .data
		.cp_startofpacket        (cmd_xbar_mux_005_src_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_005_src_endofpacket),                                              //                .endofpacket
		.cp_channel              (cmd_xbar_mux_005_src_channel),                                                  //                .channel
		.rf_sink_ready           (hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hex_4_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hex_4_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (hex_4_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (hex_4_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_4_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_4_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                             //       clk.clk
		.reset             (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_4_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_4_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hex_5_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_0_outclk0_clk),                                                             //             clk.clk
		.reset                   (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_5_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_5_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_5_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_5_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_5_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_5_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_006_src_ready),                                                    //              cp.ready
		.cp_valid                (cmd_xbar_mux_006_src_valid),                                                    //                .valid
		.cp_data                 (cmd_xbar_mux_006_src_data),                                                     //                .data
		.cp_startofpacket        (cmd_xbar_mux_006_src_startofpacket),                                            //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_006_src_endofpacket),                                              //                .endofpacket
		.cp_channel              (cmd_xbar_mux_006_src_channel),                                                  //                .channel
		.rf_sink_ready           (hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hex_5_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hex_5_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (hex_5_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (hex_5_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_5_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_5_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponserequest (),                                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                             //       clk.clk
		.reset             (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_5_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_5_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) switches_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_0_outclk0_clk),                                                                //             clk.clk
		.reset                   (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                              //       clk_reset.reset
		.m0_address              (switches_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (switches_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (switches_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (switches_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (switches_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (switches_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (switches_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (switches_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (switches_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (switches_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (switches_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (switches_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (switches_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (switches_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (switches_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (switches_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_007_src_ready),                                                       //              cp.ready
		.cp_valid                (cmd_xbar_mux_007_src_valid),                                                       //                .valid
		.cp_data                 (cmd_xbar_mux_007_src_data),                                                        //                .data
		.cp_startofpacket        (cmd_xbar_mux_007_src_startofpacket),                                               //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_007_src_endofpacket),                                                 //                .endofpacket
		.cp_channel              (cmd_xbar_mux_007_src_channel),                                                     //                .channel
		.rf_sink_ready           (switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (switches_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (switches_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (switches_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (switches_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (switches_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (switches_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (switches_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (switches_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (switches_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (switches_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (switches_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                            //     (terminated)
		.m0_writeresponserequest (),                                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                                //       clk.clk
		.reset             (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_data           (switches_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (switches_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (switches_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (switches_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (switches_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (switches_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                            // (terminated)
		.csr_read          (1'b0),                                                                             // (terminated)
		.csr_write         (1'b0),                                                                             // (terminated)
		.csr_readdata      (),                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                             // (terminated)
		.almost_full_data  (),                                                                                 // (terminated)
		.almost_empty_data (),                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                             // (terminated)
		.out_empty         (),                                                                                 // (terminated)
		.in_error          (1'b0),                                                                             // (terminated)
		.out_error         (),                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                             // (terminated)
		.out_channel       ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (90),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (91),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_ORI_BURST_SIZE_H      (107),
		.ST_CHANNEL_W              (9),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) buttons_s1_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_0_outclk0_clk),                                                               //             clk.clk
		.reset                   (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (buttons_s1_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (buttons_s1_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (buttons_s1_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (buttons_s1_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (buttons_s1_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (buttons_s1_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (buttons_s1_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (buttons_s1_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (buttons_s1_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (buttons_s1_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (buttons_s1_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (buttons_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (buttons_s1_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (buttons_s1_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (buttons_s1_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (buttons_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_xbar_mux_008_src_ready),                                                      //              cp.ready
		.cp_valid                (cmd_xbar_mux_008_src_valid),                                                      //                .valid
		.cp_data                 (cmd_xbar_mux_008_src_data),                                                       //                .data
		.cp_startofpacket        (cmd_xbar_mux_008_src_startofpacket),                                              //                .startofpacket
		.cp_endofpacket          (cmd_xbar_mux_008_src_endofpacket),                                                //                .endofpacket
		.cp_channel              (cmd_xbar_mux_008_src_channel),                                                    //                .channel
		.rf_sink_ready           (buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (buttons_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (buttons_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (buttons_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (buttons_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (buttons_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (buttons_s1_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                               //       clk.clk
		.reset             (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.in_data           (buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (buttons_s1_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (buttons_s1_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                           // (terminated)
		.csr_read          (1'b0),                                                                            // (terminated)
		.csr_write         (1'b0),                                                                            // (terminated)
		.csr_readdata      (),                                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                            // (terminated)
		.almost_full_data  (),                                                                                // (terminated)
		.almost_empty_data (),                                                                                // (terminated)
		.in_empty          (1'b0),                                                                            // (terminated)
		.out_empty         (),                                                                                // (terminated)
		.in_error          (1'b0),                                                                            // (terminated)
		.out_error         (),                                                                                // (terminated)
		.in_channel        (1'b0),                                                                            // (terminated)
		.out_channel       ()                                                                                 // (terminated)
	);

	de1_soc_mm_interconnect_0_addr_router addr_router (
		.sink_ready         (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (plasma_soc_0_avalon_master_0_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                                        //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                                    //       src.ready
		.src_valid          (addr_router_src_valid),                                                                    //          .valid
		.src_data           (addr_router_src_data),                                                                     //          .data
		.src_channel        (addr_router_src_channel),                                                                  //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                                            //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                               //          .endofpacket
	);

	de1_soc_mm_interconnect_0_id_router id_router (
		.sink_ready         (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_controller_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                                //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                              //       src.ready
		.src_valid          (id_router_src_valid),                                                              //          .valid
		.src_data           (id_router_src_data),                                                               //          .data
		.src_channel        (id_router_src_channel),                                                            //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                                         //          .endofpacket
	);

	de1_soc_mm_interconnect_0_id_router_001 id_router_001 (
		.sink_ready         (hex_0_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hex_0_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hex_0_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hex_0_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hex_0_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                             //       src.ready
		.src_valid          (id_router_001_src_valid),                                             //          .valid
		.src_data           (id_router_001_src_data),                                              //          .data
		.src_channel        (id_router_001_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                        //          .endofpacket
	);

	de1_soc_mm_interconnect_0_id_router_001 id_router_002 (
		.sink_ready         (hex_1_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hex_1_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hex_1_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hex_1_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hex_1_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_002_src_ready),                                             //       src.ready
		.src_valid          (id_router_002_src_valid),                                             //          .valid
		.src_data           (id_router_002_src_data),                                              //          .data
		.src_channel        (id_router_002_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_002_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_002_src_endofpacket)                                        //          .endofpacket
	);

	de1_soc_mm_interconnect_0_id_router_001 id_router_003 (
		.sink_ready         (hex_2_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hex_2_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hex_2_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hex_2_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hex_2_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_003_src_ready),                                             //       src.ready
		.src_valid          (id_router_003_src_valid),                                             //          .valid
		.src_data           (id_router_003_src_data),                                              //          .data
		.src_channel        (id_router_003_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_003_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_003_src_endofpacket)                                        //          .endofpacket
	);

	de1_soc_mm_interconnect_0_id_router_001 id_router_004 (
		.sink_ready         (hex_3_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hex_3_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hex_3_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hex_3_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hex_3_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_004_src_ready),                                             //       src.ready
		.src_valid          (id_router_004_src_valid),                                             //          .valid
		.src_data           (id_router_004_src_data),                                              //          .data
		.src_channel        (id_router_004_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_004_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_004_src_endofpacket)                                        //          .endofpacket
	);

	de1_soc_mm_interconnect_0_id_router_001 id_router_005 (
		.sink_ready         (hex_4_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hex_4_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hex_4_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hex_4_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hex_4_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_005_src_ready),                                             //       src.ready
		.src_valid          (id_router_005_src_valid),                                             //          .valid
		.src_data           (id_router_005_src_data),                                              //          .data
		.src_channel        (id_router_005_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_005_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_005_src_endofpacket)                                        //          .endofpacket
	);

	de1_soc_mm_interconnect_0_id_router_001 id_router_006 (
		.sink_ready         (hex_5_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (hex_5_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (hex_5_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (hex_5_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (hex_5_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (id_router_006_src_ready),                                             //       src.ready
		.src_valid          (id_router_006_src_valid),                                             //          .valid
		.src_data           (id_router_006_src_data),                                              //          .data
		.src_channel        (id_router_006_src_channel),                                           //          .channel
		.src_startofpacket  (id_router_006_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (id_router_006_src_endofpacket)                                        //          .endofpacket
	);

	de1_soc_mm_interconnect_0_id_router_001 id_router_007 (
		.sink_ready         (switches_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (switches_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (switches_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (switches_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (switches_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                      //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.src_ready          (id_router_007_src_ready),                                                //       src.ready
		.src_valid          (id_router_007_src_valid),                                                //          .valid
		.src_data           (id_router_007_src_data),                                                 //          .data
		.src_channel        (id_router_007_src_channel),                                              //          .channel
		.src_startofpacket  (id_router_007_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (id_router_007_src_endofpacket)                                           //          .endofpacket
	);

	de1_soc_mm_interconnect_0_id_router_001 id_router_008 (
		.sink_ready         (buttons_s1_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (buttons_s1_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (buttons_s1_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (buttons_s1_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (buttons_s1_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                     //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready          (id_router_008_src_ready),                                               //       src.ready
		.src_valid          (id_router_008_src_valid),                                               //          .valid
		.src_data           (id_router_008_src_data),                                                //          .data
		.src_channel        (id_router_008_src_channel),                                             //          .channel
		.src_startofpacket  (id_router_008_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (id_router_008_src_endofpacket)                                          //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (67),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (62),
		.PKT_BURST_SIZE_L          (60),
		.PKT_BURST_TYPE_H          (64),
		.PKT_BURST_TYPE_L          (63),
		.PKT_BURSTWRAP_H           (59),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (9),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (59),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1)
	) burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                   //       cr0.clk
		.reset                 (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (width_adapter_001_src_valid),                         //     sink0.valid
		.sink0_data            (width_adapter_001_src_data),                          //          .data
		.sink0_channel         (width_adapter_001_src_channel),                       //          .channel
		.sink0_startofpacket   (width_adapter_001_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket     (width_adapter_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready           (width_adapter_001_src_ready),                         //          .ready
		.source0_valid         (burst_adapter_source0_valid),                         //   source0.valid
		.source0_data          (burst_adapter_source0_data),                          //          .data
		.source0_channel       (burst_adapter_source0_channel),                       //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),                 //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),                   //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)                          //          .ready
	);

	de1_soc_mm_interconnect_0_cmd_xbar_demux cmd_xbar_demux (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_src_ready),                               //      sink.ready
		.sink_channel       (addr_router_src_channel),                             //          .channel
		.sink_data          (addr_router_src_data),                                //          .data
		.sink_startofpacket (addr_router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (addr_router_src_endofpacket),                         //          .endofpacket
		.sink_valid         (addr_router_src_valid),                               //          .valid
		.src0_ready         (cmd_xbar_demux_src0_ready),                           //      src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                           //          .valid
		.src0_data          (cmd_xbar_demux_src0_data),                            //          .data
		.src0_channel       (cmd_xbar_demux_src0_channel),                         //          .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (cmd_xbar_demux_src1_ready),                           //      src1.ready
		.src1_valid         (cmd_xbar_demux_src1_valid),                           //          .valid
		.src1_data          (cmd_xbar_demux_src1_data),                            //          .data
		.src1_channel       (cmd_xbar_demux_src1_channel),                         //          .channel
		.src1_startofpacket (cmd_xbar_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready         (cmd_xbar_demux_src2_ready),                           //      src2.ready
		.src2_valid         (cmd_xbar_demux_src2_valid),                           //          .valid
		.src2_data          (cmd_xbar_demux_src2_data),                            //          .data
		.src2_channel       (cmd_xbar_demux_src2_channel),                         //          .channel
		.src2_startofpacket (cmd_xbar_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket   (cmd_xbar_demux_src2_endofpacket),                     //          .endofpacket
		.src3_ready         (cmd_xbar_demux_src3_ready),                           //      src3.ready
		.src3_valid         (cmd_xbar_demux_src3_valid),                           //          .valid
		.src3_data          (cmd_xbar_demux_src3_data),                            //          .data
		.src3_channel       (cmd_xbar_demux_src3_channel),                         //          .channel
		.src3_startofpacket (cmd_xbar_demux_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket   (cmd_xbar_demux_src3_endofpacket),                     //          .endofpacket
		.src4_ready         (cmd_xbar_demux_src4_ready),                           //      src4.ready
		.src4_valid         (cmd_xbar_demux_src4_valid),                           //          .valid
		.src4_data          (cmd_xbar_demux_src4_data),                            //          .data
		.src4_channel       (cmd_xbar_demux_src4_channel),                         //          .channel
		.src4_startofpacket (cmd_xbar_demux_src4_startofpacket),                   //          .startofpacket
		.src4_endofpacket   (cmd_xbar_demux_src4_endofpacket),                     //          .endofpacket
		.src5_ready         (cmd_xbar_demux_src5_ready),                           //      src5.ready
		.src5_valid         (cmd_xbar_demux_src5_valid),                           //          .valid
		.src5_data          (cmd_xbar_demux_src5_data),                            //          .data
		.src5_channel       (cmd_xbar_demux_src5_channel),                         //          .channel
		.src5_startofpacket (cmd_xbar_demux_src5_startofpacket),                   //          .startofpacket
		.src5_endofpacket   (cmd_xbar_demux_src5_endofpacket),                     //          .endofpacket
		.src6_ready         (cmd_xbar_demux_src6_ready),                           //      src6.ready
		.src6_valid         (cmd_xbar_demux_src6_valid),                           //          .valid
		.src6_data          (cmd_xbar_demux_src6_data),                            //          .data
		.src6_channel       (cmd_xbar_demux_src6_channel),                         //          .channel
		.src6_startofpacket (cmd_xbar_demux_src6_startofpacket),                   //          .startofpacket
		.src6_endofpacket   (cmd_xbar_demux_src6_endofpacket),                     //          .endofpacket
		.src7_ready         (cmd_xbar_demux_src7_ready),                           //      src7.ready
		.src7_valid         (cmd_xbar_demux_src7_valid),                           //          .valid
		.src7_data          (cmd_xbar_demux_src7_data),                            //          .data
		.src7_channel       (cmd_xbar_demux_src7_channel),                         //          .channel
		.src7_startofpacket (cmd_xbar_demux_src7_startofpacket),                   //          .startofpacket
		.src7_endofpacket   (cmd_xbar_demux_src7_endofpacket),                     //          .endofpacket
		.src8_ready         (cmd_xbar_demux_src8_ready),                           //      src8.ready
		.src8_valid         (cmd_xbar_demux_src8_valid),                           //          .valid
		.src8_data          (cmd_xbar_demux_src8_data),                            //          .data
		.src8_channel       (cmd_xbar_demux_src8_channel),                         //          .channel
		.src8_startofpacket (cmd_xbar_demux_src8_startofpacket),                   //          .startofpacket
		.src8_endofpacket   (cmd_xbar_demux_src8_endofpacket)                      //          .endofpacket
	);

	de1_soc_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (pll_0_outclk0_clk),                                   //       clk.clk
		.reset               (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                              //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                              //          .valid
		.src_data            (cmd_xbar_mux_src_data),                               //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                            //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),                           //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),                         //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                            //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket)                      //          .endofpacket
	);

	de1_soc_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_001 (
		.clk                 (pll_0_outclk0_clk),                                   //       clk.clk
		.reset               (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src1_valid),                           //          .valid
		.sink0_channel       (cmd_xbar_demux_src1_channel),                         //          .channel
		.sink0_data          (cmd_xbar_demux_src1_data),                            //          .data
		.sink0_startofpacket (cmd_xbar_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src1_endofpacket)                      //          .endofpacket
	);

	de1_soc_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_002 (
		.clk                 (pll_0_outclk0_clk),                                   //       clk.clk
		.reset               (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_002_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src2_valid),                           //          .valid
		.sink0_channel       (cmd_xbar_demux_src2_channel),                         //          .channel
		.sink0_data          (cmd_xbar_demux_src2_data),                            //          .data
		.sink0_startofpacket (cmd_xbar_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src2_endofpacket)                      //          .endofpacket
	);

	de1_soc_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_003 (
		.clk                 (pll_0_outclk0_clk),                                   //       clk.clk
		.reset               (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_003_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src3_valid),                           //          .valid
		.sink0_channel       (cmd_xbar_demux_src3_channel),                         //          .channel
		.sink0_data          (cmd_xbar_demux_src3_data),                            //          .data
		.sink0_startofpacket (cmd_xbar_demux_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src3_endofpacket)                      //          .endofpacket
	);

	de1_soc_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_004 (
		.clk                 (pll_0_outclk0_clk),                                   //       clk.clk
		.reset               (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_004_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_004_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_004_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src4_ready),                           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src4_valid),                           //          .valid
		.sink0_channel       (cmd_xbar_demux_src4_channel),                         //          .channel
		.sink0_data          (cmd_xbar_demux_src4_data),                            //          .data
		.sink0_startofpacket (cmd_xbar_demux_src4_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src4_endofpacket)                      //          .endofpacket
	);

	de1_soc_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_005 (
		.clk                 (pll_0_outclk0_clk),                                   //       clk.clk
		.reset               (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_005_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src5_ready),                           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src5_valid),                           //          .valid
		.sink0_channel       (cmd_xbar_demux_src5_channel),                         //          .channel
		.sink0_data          (cmd_xbar_demux_src5_data),                            //          .data
		.sink0_startofpacket (cmd_xbar_demux_src5_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src5_endofpacket)                      //          .endofpacket
	);

	de1_soc_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_006 (
		.clk                 (pll_0_outclk0_clk),                                   //       clk.clk
		.reset               (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_006_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_006_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_006_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_006_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src6_ready),                           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src6_valid),                           //          .valid
		.sink0_channel       (cmd_xbar_demux_src6_channel),                         //          .channel
		.sink0_data          (cmd_xbar_demux_src6_data),                            //          .data
		.sink0_startofpacket (cmd_xbar_demux_src6_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src6_endofpacket)                      //          .endofpacket
	);

	de1_soc_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_007 (
		.clk                 (pll_0_outclk0_clk),                                   //       clk.clk
		.reset               (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_007_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_007_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_007_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_007_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src7_ready),                           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src7_valid),                           //          .valid
		.sink0_channel       (cmd_xbar_demux_src7_channel),                         //          .channel
		.sink0_data          (cmd_xbar_demux_src7_data),                            //          .data
		.sink0_startofpacket (cmd_xbar_demux_src7_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src7_endofpacket)                      //          .endofpacket
	);

	de1_soc_mm_interconnect_0_cmd_xbar_mux cmd_xbar_mux_008 (
		.clk                 (pll_0_outclk0_clk),                                   //       clk.clk
		.reset               (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_008_src_ready),                          //       src.ready
		.src_valid           (cmd_xbar_mux_008_src_valid),                          //          .valid
		.src_data            (cmd_xbar_mux_008_src_data),                           //          .data
		.src_channel         (cmd_xbar_mux_008_src_channel),                        //          .channel
		.src_startofpacket   (cmd_xbar_mux_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_008_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src8_ready),                           //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src8_valid),                           //          .valid
		.sink0_channel       (cmd_xbar_demux_src8_channel),                         //          .channel
		.sink0_data          (cmd_xbar_demux_src8_data),                            //          .data
		.sink0_startofpacket (cmd_xbar_demux_src8_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src8_endofpacket)                      //          .endofpacket
	);

	de1_soc_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_src_ready),                             //      sink.ready
		.sink_channel       (width_adapter_src_channel),                           //          .channel
		.sink_data          (width_adapter_src_data),                              //          .data
		.sink_startofpacket (width_adapter_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (width_adapter_src_endofpacket),                       //          .endofpacket
		.sink_valid         (width_adapter_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                           //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                            //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket)                      //          .endofpacket
	);

	de1_soc_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_001 (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),                             //      sink.ready
		.sink_channel       (id_router_001_src_channel),                           //          .channel
		.sink_data          (id_router_001_src_data),                              //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_001_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	de1_soc_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_002 (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_002_src_ready),                             //      sink.ready
		.sink_channel       (id_router_002_src_channel),                           //          .channel
		.sink_data          (id_router_002_src_data),                              //          .data
		.sink_startofpacket (id_router_002_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_002_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_002_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_002_src0_endofpacket)                  //          .endofpacket
	);

	de1_soc_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_003 (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_003_src_ready),                             //      sink.ready
		.sink_channel       (id_router_003_src_channel),                           //          .channel
		.sink_data          (id_router_003_src_data),                              //          .data
		.sink_startofpacket (id_router_003_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_003_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_003_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_003_src0_endofpacket)                  //          .endofpacket
	);

	de1_soc_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_004 (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_004_src_ready),                             //      sink.ready
		.sink_channel       (id_router_004_src_channel),                           //          .channel
		.sink_data          (id_router_004_src_data),                              //          .data
		.sink_startofpacket (id_router_004_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_004_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_004_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_004_src0_endofpacket)                  //          .endofpacket
	);

	de1_soc_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_005 (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_005_src_ready),                             //      sink.ready
		.sink_channel       (id_router_005_src_channel),                           //          .channel
		.sink_data          (id_router_005_src_data),                              //          .data
		.sink_startofpacket (id_router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_005_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_005_src0_endofpacket)                  //          .endofpacket
	);

	de1_soc_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_006 (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_006_src_ready),                             //      sink.ready
		.sink_channel       (id_router_006_src_channel),                           //          .channel
		.sink_data          (id_router_006_src_data),                              //          .data
		.sink_startofpacket (id_router_006_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_006_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_006_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_006_src0_endofpacket)                  //          .endofpacket
	);

	de1_soc_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_007 (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_007_src_ready),                             //      sink.ready
		.sink_channel       (id_router_007_src_channel),                           //          .channel
		.sink_data          (id_router_007_src_data),                              //          .data
		.sink_startofpacket (id_router_007_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_007_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_007_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_007_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_007_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_007_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_007_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_007_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_007_src0_endofpacket)                  //          .endofpacket
	);

	de1_soc_mm_interconnect_0_rsp_xbar_demux rsp_xbar_demux_008 (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_008_src_ready),                             //      sink.ready
		.sink_channel       (id_router_008_src_channel),                           //          .channel
		.sink_data          (id_router_008_src_data),                              //          .data
		.sink_startofpacket (id_router_008_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (id_router_008_src_endofpacket),                       //          .endofpacket
		.sink_valid         (id_router_008_src_valid),                             //          .valid
		.src0_ready         (rsp_xbar_demux_008_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_xbar_demux_008_src0_valid),                       //          .valid
		.src0_data          (rsp_xbar_demux_008_src0_data),                        //          .data
		.src0_channel       (rsp_xbar_demux_008_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_xbar_demux_008_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_008_src0_endofpacket)                  //          .endofpacket
	);

	de1_soc_mm_interconnect_0_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (pll_0_outclk0_clk),                                   //       clk.clk
		.reset               (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                              //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                              //          .valid
		.src_data            (rsp_xbar_mux_src_data),                               //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                            //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),                           //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),                         //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                            //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src0_channel),                     //          .channel
		.sink1_data          (rsp_xbar_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),                 //          .endofpacket
		.sink2_ready         (rsp_xbar_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid         (rsp_xbar_demux_002_src0_valid),                       //          .valid
		.sink2_channel       (rsp_xbar_demux_002_src0_channel),                     //          .channel
		.sink2_data          (rsp_xbar_demux_002_src0_data),                        //          .data
		.sink2_startofpacket (rsp_xbar_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (rsp_xbar_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready         (rsp_xbar_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid         (rsp_xbar_demux_003_src0_valid),                       //          .valid
		.sink3_channel       (rsp_xbar_demux_003_src0_channel),                     //          .channel
		.sink3_data          (rsp_xbar_demux_003_src0_data),                        //          .data
		.sink3_startofpacket (rsp_xbar_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket   (rsp_xbar_demux_003_src0_endofpacket),                 //          .endofpacket
		.sink4_ready         (rsp_xbar_demux_004_src0_ready),                       //     sink4.ready
		.sink4_valid         (rsp_xbar_demux_004_src0_valid),                       //          .valid
		.sink4_channel       (rsp_xbar_demux_004_src0_channel),                     //          .channel
		.sink4_data          (rsp_xbar_demux_004_src0_data),                        //          .data
		.sink4_startofpacket (rsp_xbar_demux_004_src0_startofpacket),               //          .startofpacket
		.sink4_endofpacket   (rsp_xbar_demux_004_src0_endofpacket),                 //          .endofpacket
		.sink5_ready         (rsp_xbar_demux_005_src0_ready),                       //     sink5.ready
		.sink5_valid         (rsp_xbar_demux_005_src0_valid),                       //          .valid
		.sink5_channel       (rsp_xbar_demux_005_src0_channel),                     //          .channel
		.sink5_data          (rsp_xbar_demux_005_src0_data),                        //          .data
		.sink5_startofpacket (rsp_xbar_demux_005_src0_startofpacket),               //          .startofpacket
		.sink5_endofpacket   (rsp_xbar_demux_005_src0_endofpacket),                 //          .endofpacket
		.sink6_ready         (rsp_xbar_demux_006_src0_ready),                       //     sink6.ready
		.sink6_valid         (rsp_xbar_demux_006_src0_valid),                       //          .valid
		.sink6_channel       (rsp_xbar_demux_006_src0_channel),                     //          .channel
		.sink6_data          (rsp_xbar_demux_006_src0_data),                        //          .data
		.sink6_startofpacket (rsp_xbar_demux_006_src0_startofpacket),               //          .startofpacket
		.sink6_endofpacket   (rsp_xbar_demux_006_src0_endofpacket),                 //          .endofpacket
		.sink7_ready         (rsp_xbar_demux_007_src0_ready),                       //     sink7.ready
		.sink7_valid         (rsp_xbar_demux_007_src0_valid),                       //          .valid
		.sink7_channel       (rsp_xbar_demux_007_src0_channel),                     //          .channel
		.sink7_data          (rsp_xbar_demux_007_src0_data),                        //          .data
		.sink7_startofpacket (rsp_xbar_demux_007_src0_startofpacket),               //          .startofpacket
		.sink7_endofpacket   (rsp_xbar_demux_007_src0_endofpacket),                 //          .endofpacket
		.sink8_ready         (rsp_xbar_demux_008_src0_ready),                       //     sink8.ready
		.sink8_valid         (rsp_xbar_demux_008_src0_valid),                       //          .valid
		.sink8_channel       (rsp_xbar_demux_008_src0_channel),                     //          .channel
		.sink8_data          (rsp_xbar_demux_008_src0_data),                        //          .data
		.sink8_startofpacket (rsp_xbar_demux_008_src0_startofpacket),               //          .startofpacket
		.sink8_endofpacket   (rsp_xbar_demux_008_src0_endofpacket)                  //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_BURSTWRAP_H            (59),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (62),
		.IN_PKT_BURST_SIZE_L           (60),
		.IN_PKT_RESPONSE_STATUS_H      (86),
		.IN_PKT_RESPONSE_STATUS_L      (85),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (64),
		.IN_PKT_BURST_TYPE_L           (63),
		.IN_PKT_ORI_BURST_SIZE_L       (87),
		.IN_PKT_ORI_BURST_SIZE_H       (89),
		.IN_ST_DATA_W                  (90),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (80),
		.OUT_PKT_BURST_SIZE_L          (78),
		.OUT_PKT_RESPONSE_STATUS_H     (104),
		.OUT_PKT_RESPONSE_STATUS_L     (103),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (82),
		.OUT_PKT_BURST_TYPE_L          (81),
		.OUT_PKT_ORI_BURST_SIZE_L      (105),
		.OUT_PKT_ORI_BURST_SIZE_H      (107),
		.OUT_ST_DATA_W                 (108),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter (
		.clk                  (pll_0_outclk0_clk),                                   //       clk.clk
		.reset                (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (id_router_src_valid),                                 //      sink.valid
		.in_channel           (id_router_src_channel),                               //          .channel
		.in_startofpacket     (id_router_src_startofpacket),                         //          .startofpacket
		.in_endofpacket       (id_router_src_endofpacket),                           //          .endofpacket
		.in_ready             (id_router_src_ready),                                 //          .ready
		.in_data              (id_router_src_data),                                  //          .data
		.out_endofpacket      (width_adapter_src_endofpacket),                       //       src.endofpacket
		.out_data             (width_adapter_src_data),                              //          .data
		.out_channel          (width_adapter_src_channel),                           //          .channel
		.out_valid            (width_adapter_src_valid),                             //          .valid
		.out_ready            (width_adapter_src_ready),                             //          .ready
		.out_startofpacket    (width_adapter_src_startofpacket),                     //          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (77),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (80),
		.IN_PKT_BURST_SIZE_L           (78),
		.IN_PKT_RESPONSE_STATUS_H      (104),
		.IN_PKT_RESPONSE_STATUS_L      (103),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (82),
		.IN_PKT_BURST_TYPE_L           (81),
		.IN_PKT_ORI_BURST_SIZE_L       (105),
		.IN_PKT_ORI_BURST_SIZE_H       (107),
		.IN_ST_DATA_W                  (108),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (62),
		.OUT_PKT_BURST_SIZE_L          (60),
		.OUT_PKT_RESPONSE_STATUS_H     (86),
		.OUT_PKT_RESPONSE_STATUS_L     (85),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (64),
		.OUT_PKT_BURST_TYPE_L          (63),
		.OUT_PKT_ORI_BURST_SIZE_L      (87),
		.OUT_PKT_ORI_BURST_SIZE_H      (89),
		.OUT_ST_DATA_W                 (90),
		.ST_CHANNEL_W                  (9),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_001 (
		.clk                  (pll_0_outclk0_clk),                                   //       clk.clk
		.reset                (plasma_soc_0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_mux_src_valid),                              //      sink.valid
		.in_channel           (cmd_xbar_mux_src_channel),                            //          .channel
		.in_startofpacket     (cmd_xbar_mux_src_startofpacket),                      //          .startofpacket
		.in_endofpacket       (cmd_xbar_mux_src_endofpacket),                        //          .endofpacket
		.in_ready             (cmd_xbar_mux_src_ready),                              //          .ready
		.in_data              (cmd_xbar_mux_src_data),                               //          .data
		.out_endofpacket      (width_adapter_001_src_endofpacket),                   //       src.endofpacket
		.out_data             (width_adapter_001_src_data),                          //          .data
		.out_channel          (width_adapter_001_src_channel),                       //          .channel
		.out_valid            (width_adapter_001_src_valid),                         //          .valid
		.out_ready            (width_adapter_001_src_ready),                         //          .ready
		.out_startofpacket    (width_adapter_001_src_startofpacket),                 //          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated)
	);

endmodule
