// de1_soc_alternative_mm_interconnect_2.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 162 at 2018.09.07.19:19:43

`timescale 1 ps / 1 ps
module de1_soc_alternative_mm_interconnect_2 (
		input  wire [11:0]  hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0]  hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]   hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]   hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]   hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]   hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]   hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]   hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire         hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire         hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0]  hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [127:0] hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [15:0]  hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire         hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire         hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire         hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0]  hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]   hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire         hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire         hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0]  hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0]  hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]   hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]   hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]   hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]   hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]   hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]   hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire         hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire         hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0]  hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [127:0] hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]   hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire         hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire         hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire         hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire         pll_0_outclk0_clk,                                                //                                              pll_0_outclk0.clk
		input  wire         hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire         mm_bridge_0_reset_reset_bridge_in_reset_reset,                    //                    mm_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire         plasma_master_clk_reset_reset_bridge_in_reset_reset,              //              plasma_master_clk_reset_reset_bridge_in_reset.reset
		input  wire [31:0]  plasma_master_master_address,                                     //                                       plasma_master_master.address
		output wire         plasma_master_master_waitrequest,                                 //                                                           .waitrequest
		input  wire [3:0]   plasma_master_master_byteenable,                                  //                                                           .byteenable
		input  wire         plasma_master_master_read,                                        //                                                           .read
		output wire [31:0]  plasma_master_master_readdata,                                    //                                                           .readdata
		output wire         plasma_master_master_readdatavalid,                               //                                                           .readdatavalid
		input  wire         plasma_master_master_write,                                       //                                                           .write
		input  wire [31:0]  plasma_master_master_writedata,                                   //                                                           .writedata
		output wire [27:0]  mm_bridge_0_s0_address,                                           //                                             mm_bridge_0_s0.address
		output wire         mm_bridge_0_s0_write,                                             //                                                           .write
		output wire         mm_bridge_0_s0_read,                                              //                                                           .read
		input  wire [31:0]  mm_bridge_0_s0_readdata,                                          //                                                           .readdata
		output wire [31:0]  mm_bridge_0_s0_writedata,                                         //                                                           .writedata
		output wire [0:0]   mm_bridge_0_s0_burstcount,                                        //                                                           .burstcount
		output wire [3:0]   mm_bridge_0_s0_byteenable,                                        //                                                           .byteenable
		input  wire         mm_bridge_0_s0_readdatavalid,                                     //                                                           .readdatavalid
		input  wire         mm_bridge_0_s0_waitrequest,                                       //                                                           .waitrequest
		output wire         mm_bridge_0_s0_debugaccess,                                       //                                                           .debugaccess
		output wire [31:0]  plasma_soc_0_avalon_slave_0_address,                              //                                plasma_soc_0_avalon_slave_0.address
		output wire         plasma_soc_0_avalon_slave_0_write,                                //                                                           .write
		output wire         plasma_soc_0_avalon_slave_0_read,                                 //                                                           .read
		input  wire [31:0]  plasma_soc_0_avalon_slave_0_readdata,                             //                                                           .readdata
		output wire [31:0]  plasma_soc_0_avalon_slave_0_writedata,                            //                                                           .writedata
		output wire [3:0]   plasma_soc_0_avalon_slave_0_byteenable,                           //                                                           .byteenable
		input  wire         plasma_soc_0_avalon_slave_0_waitrequest,                          //                                                           .waitrequest
		input  wire [1:0]   plasma_soc_0_avalon_slave_0_response                              //                                                           .response
	);

	wire          plasma_master_master_translator_avalon_universal_master_0_waitrequest;                            // plasma_master_master_translator_avalon_universal_master_0_agent:av_waitrequest -> plasma_master_master_translator:uav_waitrequest
	wire    [2:0] plasma_master_master_translator_avalon_universal_master_0_burstcount;                             // plasma_master_master_translator:uav_burstcount -> plasma_master_master_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] plasma_master_master_translator_avalon_universal_master_0_writedata;                              // plasma_master_master_translator:uav_writedata -> plasma_master_master_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] plasma_master_master_translator_avalon_universal_master_0_address;                                // plasma_master_master_translator:uav_address -> plasma_master_master_translator_avalon_universal_master_0_agent:av_address
	wire          plasma_master_master_translator_avalon_universal_master_0_lock;                                   // plasma_master_master_translator:uav_lock -> plasma_master_master_translator_avalon_universal_master_0_agent:av_lock
	wire          plasma_master_master_translator_avalon_universal_master_0_write;                                  // plasma_master_master_translator:uav_write -> plasma_master_master_translator_avalon_universal_master_0_agent:av_write
	wire          plasma_master_master_translator_avalon_universal_master_0_read;                                   // plasma_master_master_translator:uav_read -> plasma_master_master_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] plasma_master_master_translator_avalon_universal_master_0_readdata;                               // plasma_master_master_translator_avalon_universal_master_0_agent:av_readdata -> plasma_master_master_translator:uav_readdata
	wire          plasma_master_master_translator_avalon_universal_master_0_debugaccess;                            // plasma_master_master_translator:uav_debugaccess -> plasma_master_master_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] plasma_master_master_translator_avalon_universal_master_0_byteenable;                             // plasma_master_master_translator:uav_byteenable -> plasma_master_master_translator_avalon_universal_master_0_agent:av_byteenable
	wire          plasma_master_master_translator_avalon_universal_master_0_readdatavalid;                          // plasma_master_master_translator_avalon_universal_master_0_agent:av_readdatavalid -> plasma_master_master_translator:uav_readdatavalid
	wire          rsp_xbar_mux_002_src_endofpacket;                                                                 // rsp_xbar_mux_002:src_endofpacket -> plasma_master_master_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_002_src_valid;                                                                       // rsp_xbar_mux_002:src_valid -> plasma_master_master_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_002_src_startofpacket;                                                               // rsp_xbar_mux_002:src_startofpacket -> plasma_master_master_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [126:0] rsp_xbar_mux_002_src_data;                                                                        // rsp_xbar_mux_002:src_data -> plasma_master_master_translator_avalon_universal_master_0_agent:rp_data
	wire    [2:0] rsp_xbar_mux_002_src_channel;                                                                     // rsp_xbar_mux_002:src_channel -> plasma_master_master_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_002_src_ready;                                                                       // plasma_master_master_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_002:src_ready
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest;                          // mm_bridge_0_s0_translator:uav_waitrequest -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount;                           // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_burstcount -> mm_bridge_0_s0_translator:uav_burstcount
	wire   [31:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata;                            // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_writedata -> mm_bridge_0_s0_translator:uav_writedata
	wire   [31:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_address;                              // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_address -> mm_bridge_0_s0_translator:uav_address
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_write;                                // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_write -> mm_bridge_0_s0_translator:uav_write
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_lock;                                 // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_lock -> mm_bridge_0_s0_translator:uav_lock
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_read;                                 // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_read -> mm_bridge_0_s0_translator:uav_read
	wire   [31:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata;                             // mm_bridge_0_s0_translator:uav_readdata -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;                        // mm_bridge_0_s0_translator:uav_readdatavalid -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess;                          // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> mm_bridge_0_s0_translator:uav_debugaccess
	wire    [3:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable;                           // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:m0_byteenable -> mm_bridge_0_s0_translator:uav_byteenable
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;                   // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid;                         // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_source_valid -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;                 // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [127:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data;                          // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_source_data -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready;                         // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;                // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;                      // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket;              // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [127:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;                       // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;                      // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;                    // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;                     // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;                    // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;                    // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;                     // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;                    // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire    [1:0] plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_response;                // plasma_soc_0_avalon_slave_0_translator:uav_response -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_response
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // plasma_soc_0_avalon_slave_0_translator:uav_waitrequest -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire    [2:0] plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_burstcount;              // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_burstcount -> plasma_soc_0_avalon_slave_0_translator:uav_burstcount
	wire   [31:0] plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_writedata;               // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_writedata -> plasma_soc_0_avalon_slave_0_translator:uav_writedata
	wire   [31:0] plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_address;                 // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_address -> plasma_soc_0_avalon_slave_0_translator:uav_address
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_write;                   // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_write -> plasma_soc_0_avalon_slave_0_translator:uav_write
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_lock;                    // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_lock -> plasma_soc_0_avalon_slave_0_translator:uav_lock
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_read;                    // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_read -> plasma_soc_0_avalon_slave_0_translator:uav_read
	wire   [31:0] plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdata;                // plasma_soc_0_avalon_slave_0_translator:uav_readdata -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // plasma_soc_0_avalon_slave_0_translator:uav_readdatavalid -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_debugaccess -> plasma_soc_0_avalon_slave_0_translator:uav_debugaccess
	wire    [3:0] plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_byteenable;              // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:m0_byteenable -> plasma_soc_0_avalon_slave_0_translator:uav_byteenable
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_valid;            // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_valid -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [127:0] plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_data;             // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_data -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_ready;            // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [127:0] plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rf_sink_ready -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_data
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:in_ready -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid;       // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_valid -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data;        // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_data -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready;       // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo:out_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                                                  // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> addr_router:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                                                        // hps_0_h2f_axi_master_agent:write_cp_valid -> addr_router:sink_valid
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                                                // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> addr_router:sink_startofpacket
	wire  [234:0] hps_0_h2f_axi_master_agent_write_cp_data;                                                         // hps_0_h2f_axi_master_agent:write_cp_data -> addr_router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                                                        // addr_router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                                                   // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> addr_router_001:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                                                         // hps_0_h2f_axi_master_agent:read_cp_valid -> addr_router_001:sink_valid
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                                                 // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [234:0] hps_0_h2f_axi_master_agent_read_cp_data;                                                          // hps_0_h2f_axi_master_agent:read_cp_data -> addr_router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                                                         // addr_router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          plasma_master_master_translator_avalon_universal_master_0_agent_cp_endofpacket;                   // plasma_master_master_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_002:sink_endofpacket
	wire          plasma_master_master_translator_avalon_universal_master_0_agent_cp_valid;                         // plasma_master_master_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_002:sink_valid
	wire          plasma_master_master_translator_avalon_universal_master_0_agent_cp_startofpacket;                 // plasma_master_master_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_002:sink_startofpacket
	wire  [126:0] plasma_master_master_translator_avalon_universal_master_0_agent_cp_data;                          // plasma_master_master_translator_avalon_universal_master_0_agent:cp_data -> addr_router_002:sink_data
	wire          plasma_master_master_translator_avalon_universal_master_0_agent_cp_ready;                         // addr_router_002:sink_ready -> plasma_master_master_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_002_src_endofpacket;                                                                  // addr_router_002:src_endofpacket -> cmd_xbar_demux_002:sink_endofpacket
	wire          addr_router_002_src_valid;                                                                        // addr_router_002:src_valid -> cmd_xbar_demux_002:sink_valid
	wire          addr_router_002_src_startofpacket;                                                                // addr_router_002:src_startofpacket -> cmd_xbar_demux_002:sink_startofpacket
	wire  [126:0] addr_router_002_src_data;                                                                         // addr_router_002:src_data -> cmd_xbar_demux_002:sink_data
	wire    [2:0] addr_router_002_src_channel;                                                                      // addr_router_002:src_channel -> cmd_xbar_demux_002:sink_channel
	wire          addr_router_002_src_ready;                                                                        // cmd_xbar_demux_002:sink_ready -> addr_router_002:src_ready
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket;                          // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router:sink_endofpacket
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_valid;                                // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router:sink_valid
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket;                        // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router:sink_startofpacket
	wire  [126:0] mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_data;                                 // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rp_data -> id_router:sink_data
	wire          mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_ready;                                // id_router:sink_ready -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_src_endofpacket;                                                                        // id_router:src_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          id_router_src_valid;                                                                              // id_router:src_valid -> rsp_xbar_demux:sink_valid
	wire          id_router_src_startofpacket;                                                                      // id_router:src_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [126:0] id_router_src_data;                                                                               // id_router:src_data -> rsp_xbar_demux:sink_data
	wire    [2:0] id_router_src_channel;                                                                            // id_router:src_channel -> rsp_xbar_demux:sink_channel
	wire          id_router_src_ready;                                                                              // rsp_xbar_demux:sink_ready -> id_router:src_ready
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_endofpacket -> id_router_001:sink_endofpacket
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_valid;                   // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_valid -> id_router_001:sink_valid
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_startofpacket -> id_router_001:sink_startofpacket
	wire  [126:0] plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_data;                    // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_data -> id_router_001:sink_data
	wire          plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_ready;                   // id_router_001:sink_ready -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:rp_ready
	wire          id_router_001_src_endofpacket;                                                                    // id_router_001:src_endofpacket -> rsp_xbar_demux_001:sink_endofpacket
	wire          id_router_001_src_valid;                                                                          // id_router_001:src_valid -> rsp_xbar_demux_001:sink_valid
	wire          id_router_001_src_startofpacket;                                                                  // id_router_001:src_startofpacket -> rsp_xbar_demux_001:sink_startofpacket
	wire  [126:0] id_router_001_src_data;                                                                           // id_router_001:src_data -> rsp_xbar_demux_001:sink_data
	wire    [2:0] id_router_001_src_channel;                                                                        // id_router_001:src_channel -> rsp_xbar_demux_001:sink_channel
	wire          id_router_001_src_ready;                                                                          // rsp_xbar_demux_001:sink_ready -> id_router_001:src_ready
	wire          addr_router_src_endofpacket;                                                                      // addr_router:src_endofpacket -> limiter:cmd_sink_endofpacket
	wire          addr_router_src_valid;                                                                            // addr_router:src_valid -> limiter:cmd_sink_valid
	wire          addr_router_src_startofpacket;                                                                    // addr_router:src_startofpacket -> limiter:cmd_sink_startofpacket
	wire  [234:0] addr_router_src_data;                                                                             // addr_router:src_data -> limiter:cmd_sink_data
	wire    [2:0] addr_router_src_channel;                                                                          // addr_router:src_channel -> limiter:cmd_sink_channel
	wire          addr_router_src_ready;                                                                            // limiter:cmd_sink_ready -> addr_router:src_ready
	wire          limiter_rsp_src_endofpacket;                                                                      // limiter:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          limiter_rsp_src_valid;                                                                            // limiter:rsp_src_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire          limiter_rsp_src_startofpacket;                                                                    // limiter:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire  [234:0] limiter_rsp_src_data;                                                                             // limiter:rsp_src_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire    [2:0] limiter_rsp_src_channel;                                                                          // limiter:rsp_src_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          limiter_rsp_src_ready;                                                                            // hps_0_h2f_axi_master_agent:write_rp_ready -> limiter:rsp_src_ready
	wire          addr_router_001_src_endofpacket;                                                                  // addr_router_001:src_endofpacket -> limiter_001:cmd_sink_endofpacket
	wire          addr_router_001_src_valid;                                                                        // addr_router_001:src_valid -> limiter_001:cmd_sink_valid
	wire          addr_router_001_src_startofpacket;                                                                // addr_router_001:src_startofpacket -> limiter_001:cmd_sink_startofpacket
	wire  [234:0] addr_router_001_src_data;                                                                         // addr_router_001:src_data -> limiter_001:cmd_sink_data
	wire    [2:0] addr_router_001_src_channel;                                                                      // addr_router_001:src_channel -> limiter_001:cmd_sink_channel
	wire          addr_router_001_src_ready;                                                                        // limiter_001:cmd_sink_ready -> addr_router_001:src_ready
	wire          limiter_001_rsp_src_endofpacket;                                                                  // limiter_001:rsp_src_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          limiter_001_rsp_src_valid;                                                                        // limiter_001:rsp_src_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire          limiter_001_rsp_src_startofpacket;                                                                // limiter_001:rsp_src_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire  [234:0] limiter_001_rsp_src_data;                                                                         // limiter_001:rsp_src_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire    [2:0] limiter_001_rsp_src_channel;                                                                      // limiter_001:rsp_src_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          limiter_001_rsp_src_ready;                                                                        // hps_0_h2f_axi_master_agent:read_rp_ready -> limiter_001:rsp_src_ready
	wire          cmd_xbar_mux_src_endofpacket;                                                                     // cmd_xbar_mux:src_endofpacket -> burst_adapter:sink0_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                                           // cmd_xbar_mux:src_valid -> burst_adapter:sink0_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                                   // cmd_xbar_mux:src_startofpacket -> burst_adapter:sink0_startofpacket
	wire  [126:0] cmd_xbar_mux_src_data;                                                                            // cmd_xbar_mux:src_data -> burst_adapter:sink0_data
	wire    [2:0] cmd_xbar_mux_src_channel;                                                                         // cmd_xbar_mux:src_channel -> burst_adapter:sink0_channel
	wire          cmd_xbar_mux_src_ready;                                                                           // burst_adapter:sink0_ready -> cmd_xbar_mux:src_ready
	wire          burst_adapter_source0_endofpacket;                                                                // burst_adapter:source0_endofpacket -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_source0_valid;                                                                      // burst_adapter:source0_valid -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_source0_startofpacket;                                                              // burst_adapter:source0_startofpacket -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [126:0] burst_adapter_source0_data;                                                                       // burst_adapter:source0_data -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_source0_ready;                                                                      // mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter:source0_ready
	wire    [2:0] burst_adapter_source0_channel;                                                                    // burst_adapter:source0_channel -> mm_bridge_0_s0_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_mux_001_src_endofpacket;                                                                 // cmd_xbar_mux_001:src_endofpacket -> burst_adapter_001:sink0_endofpacket
	wire          cmd_xbar_mux_001_src_valid;                                                                       // cmd_xbar_mux_001:src_valid -> burst_adapter_001:sink0_valid
	wire          cmd_xbar_mux_001_src_startofpacket;                                                               // cmd_xbar_mux_001:src_startofpacket -> burst_adapter_001:sink0_startofpacket
	wire  [126:0] cmd_xbar_mux_001_src_data;                                                                        // cmd_xbar_mux_001:src_data -> burst_adapter_001:sink0_data
	wire    [2:0] cmd_xbar_mux_001_src_channel;                                                                     // cmd_xbar_mux_001:src_channel -> burst_adapter_001:sink0_channel
	wire          cmd_xbar_mux_001_src_ready;                                                                       // burst_adapter_001:sink0_ready -> cmd_xbar_mux_001:src_ready
	wire          burst_adapter_001_source0_endofpacket;                                                            // burst_adapter_001:source0_endofpacket -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          burst_adapter_001_source0_valid;                                                                  // burst_adapter_001:source0_valid -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_valid
	wire          burst_adapter_001_source0_startofpacket;                                                          // burst_adapter_001:source0_startofpacket -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [126:0] burst_adapter_001_source0_data;                                                                   // burst_adapter_001:source0_data -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_data
	wire          burst_adapter_001_source0_ready;                                                                  // plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_ready -> burst_adapter_001:source0_ready
	wire    [2:0] burst_adapter_001_source0_channel;                                                                // burst_adapter_001:source0_channel -> plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent:cp_channel
	wire          cmd_xbar_demux_src0_endofpacket;                                                                  // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                                        // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                                // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [126:0] cmd_xbar_demux_src0_data;                                                                         // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire    [2:0] cmd_xbar_demux_src0_channel;                                                                      // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire          cmd_xbar_demux_src0_ready;                                                                        // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire          cmd_xbar_demux_src1_endofpacket;                                                                  // cmd_xbar_demux:src1_endofpacket -> cmd_xbar_mux_001:sink0_endofpacket
	wire          cmd_xbar_demux_src1_valid;                                                                        // cmd_xbar_demux:src1_valid -> cmd_xbar_mux_001:sink0_valid
	wire          cmd_xbar_demux_src1_startofpacket;                                                                // cmd_xbar_demux:src1_startofpacket -> cmd_xbar_mux_001:sink0_startofpacket
	wire  [126:0] cmd_xbar_demux_src1_data;                                                                         // cmd_xbar_demux:src1_data -> cmd_xbar_mux_001:sink0_data
	wire    [2:0] cmd_xbar_demux_src1_channel;                                                                      // cmd_xbar_demux:src1_channel -> cmd_xbar_mux_001:sink0_channel
	wire          cmd_xbar_demux_src1_ready;                                                                        // cmd_xbar_mux_001:sink0_ready -> cmd_xbar_demux:src1_ready
	wire          cmd_xbar_demux_001_src0_endofpacket;                                                              // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire          cmd_xbar_demux_001_src0_valid;                                                                    // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire          cmd_xbar_demux_001_src0_startofpacket;                                                            // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [126:0] cmd_xbar_demux_001_src0_data;                                                                     // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire    [2:0] cmd_xbar_demux_001_src0_channel;                                                                  // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire          cmd_xbar_demux_001_src0_ready;                                                                    // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire          cmd_xbar_demux_001_src1_endofpacket;                                                              // cmd_xbar_demux_001:src1_endofpacket -> cmd_xbar_mux_001:sink1_endofpacket
	wire          cmd_xbar_demux_001_src1_valid;                                                                    // cmd_xbar_demux_001:src1_valid -> cmd_xbar_mux_001:sink1_valid
	wire          cmd_xbar_demux_001_src1_startofpacket;                                                            // cmd_xbar_demux_001:src1_startofpacket -> cmd_xbar_mux_001:sink1_startofpacket
	wire  [126:0] cmd_xbar_demux_001_src1_data;                                                                     // cmd_xbar_demux_001:src1_data -> cmd_xbar_mux_001:sink1_data
	wire    [2:0] cmd_xbar_demux_001_src1_channel;                                                                  // cmd_xbar_demux_001:src1_channel -> cmd_xbar_mux_001:sink1_channel
	wire          cmd_xbar_demux_001_src1_ready;                                                                    // cmd_xbar_mux_001:sink1_ready -> cmd_xbar_demux_001:src1_ready
	wire          cmd_xbar_demux_002_src0_endofpacket;                                                              // cmd_xbar_demux_002:src0_endofpacket -> cmd_xbar_mux_001:sink2_endofpacket
	wire          cmd_xbar_demux_002_src0_valid;                                                                    // cmd_xbar_demux_002:src0_valid -> cmd_xbar_mux_001:sink2_valid
	wire          cmd_xbar_demux_002_src0_startofpacket;                                                            // cmd_xbar_demux_002:src0_startofpacket -> cmd_xbar_mux_001:sink2_startofpacket
	wire  [126:0] cmd_xbar_demux_002_src0_data;                                                                     // cmd_xbar_demux_002:src0_data -> cmd_xbar_mux_001:sink2_data
	wire    [2:0] cmd_xbar_demux_002_src0_channel;                                                                  // cmd_xbar_demux_002:src0_channel -> cmd_xbar_mux_001:sink2_channel
	wire          cmd_xbar_demux_002_src0_ready;                                                                    // cmd_xbar_mux_001:sink2_ready -> cmd_xbar_demux_002:src0_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                                                  // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                                        // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                                // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [126:0] rsp_xbar_demux_src0_data;                                                                         // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire    [2:0] rsp_xbar_demux_src0_channel;                                                                      // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire          rsp_xbar_demux_src0_ready;                                                                        // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire          rsp_xbar_demux_src1_endofpacket;                                                                  // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire          rsp_xbar_demux_src1_valid;                                                                        // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire          rsp_xbar_demux_src1_startofpacket;                                                                // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [126:0] rsp_xbar_demux_src1_data;                                                                         // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire    [2:0] rsp_xbar_demux_src1_channel;                                                                      // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire          rsp_xbar_demux_src1_ready;                                                                        // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire          rsp_xbar_demux_001_src0_endofpacket;                                                              // rsp_xbar_demux_001:src0_endofpacket -> rsp_xbar_mux:sink1_endofpacket
	wire          rsp_xbar_demux_001_src0_valid;                                                                    // rsp_xbar_demux_001:src0_valid -> rsp_xbar_mux:sink1_valid
	wire          rsp_xbar_demux_001_src0_startofpacket;                                                            // rsp_xbar_demux_001:src0_startofpacket -> rsp_xbar_mux:sink1_startofpacket
	wire  [126:0] rsp_xbar_demux_001_src0_data;                                                                     // rsp_xbar_demux_001:src0_data -> rsp_xbar_mux:sink1_data
	wire    [2:0] rsp_xbar_demux_001_src0_channel;                                                                  // rsp_xbar_demux_001:src0_channel -> rsp_xbar_mux:sink1_channel
	wire          rsp_xbar_demux_001_src0_ready;                                                                    // rsp_xbar_mux:sink1_ready -> rsp_xbar_demux_001:src0_ready
	wire          rsp_xbar_demux_001_src1_endofpacket;                                                              // rsp_xbar_demux_001:src1_endofpacket -> rsp_xbar_mux_001:sink1_endofpacket
	wire          rsp_xbar_demux_001_src1_valid;                                                                    // rsp_xbar_demux_001:src1_valid -> rsp_xbar_mux_001:sink1_valid
	wire          rsp_xbar_demux_001_src1_startofpacket;                                                            // rsp_xbar_demux_001:src1_startofpacket -> rsp_xbar_mux_001:sink1_startofpacket
	wire  [126:0] rsp_xbar_demux_001_src1_data;                                                                     // rsp_xbar_demux_001:src1_data -> rsp_xbar_mux_001:sink1_data
	wire    [2:0] rsp_xbar_demux_001_src1_channel;                                                                  // rsp_xbar_demux_001:src1_channel -> rsp_xbar_mux_001:sink1_channel
	wire          rsp_xbar_demux_001_src1_ready;                                                                    // rsp_xbar_mux_001:sink1_ready -> rsp_xbar_demux_001:src1_ready
	wire          rsp_xbar_demux_001_src2_endofpacket;                                                              // rsp_xbar_demux_001:src2_endofpacket -> rsp_xbar_mux_002:sink0_endofpacket
	wire          rsp_xbar_demux_001_src2_valid;                                                                    // rsp_xbar_demux_001:src2_valid -> rsp_xbar_mux_002:sink0_valid
	wire          rsp_xbar_demux_001_src2_startofpacket;                                                            // rsp_xbar_demux_001:src2_startofpacket -> rsp_xbar_mux_002:sink0_startofpacket
	wire  [126:0] rsp_xbar_demux_001_src2_data;                                                                     // rsp_xbar_demux_001:src2_data -> rsp_xbar_mux_002:sink0_data
	wire    [2:0] rsp_xbar_demux_001_src2_channel;                                                                  // rsp_xbar_demux_001:src2_channel -> rsp_xbar_mux_002:sink0_channel
	wire          rsp_xbar_demux_001_src2_ready;                                                                    // rsp_xbar_mux_002:sink0_ready -> rsp_xbar_demux_001:src2_ready
	wire          limiter_cmd_src_endofpacket;                                                                      // limiter:cmd_src_endofpacket -> width_adapter:in_endofpacket
	wire    [0:0] limiter_cmd_src_valid;                                                                            // limiter:cmd_src_valid -> width_adapter:in_valid
	wire          limiter_cmd_src_startofpacket;                                                                    // limiter:cmd_src_startofpacket -> width_adapter:in_startofpacket
	wire  [234:0] limiter_cmd_src_data;                                                                             // limiter:cmd_src_data -> width_adapter:in_data
	wire    [2:0] limiter_cmd_src_channel;                                                                          // limiter:cmd_src_channel -> width_adapter:in_channel
	wire          limiter_cmd_src_ready;                                                                            // width_adapter:in_ready -> limiter:cmd_src_ready
	wire          width_adapter_src_endofpacket;                                                                    // width_adapter:out_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          width_adapter_src_valid;                                                                          // width_adapter:out_valid -> cmd_xbar_demux:sink_valid
	wire          width_adapter_src_startofpacket;                                                                  // width_adapter:out_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [126:0] width_adapter_src_data;                                                                           // width_adapter:out_data -> cmd_xbar_demux:sink_data
	wire          width_adapter_src_ready;                                                                          // cmd_xbar_demux:sink_ready -> width_adapter:out_ready
	wire    [2:0] width_adapter_src_channel;                                                                        // width_adapter:out_channel -> cmd_xbar_demux:sink_channel
	wire          rsp_xbar_mux_src_endofpacket;                                                                     // rsp_xbar_mux:src_endofpacket -> width_adapter_001:in_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                                           // rsp_xbar_mux:src_valid -> width_adapter_001:in_valid
	wire          rsp_xbar_mux_src_startofpacket;                                                                   // rsp_xbar_mux:src_startofpacket -> width_adapter_001:in_startofpacket
	wire  [126:0] rsp_xbar_mux_src_data;                                                                            // rsp_xbar_mux:src_data -> width_adapter_001:in_data
	wire    [2:0] rsp_xbar_mux_src_channel;                                                                         // rsp_xbar_mux:src_channel -> width_adapter_001:in_channel
	wire          rsp_xbar_mux_src_ready;                                                                           // width_adapter_001:in_ready -> rsp_xbar_mux:src_ready
	wire          width_adapter_001_src_endofpacket;                                                                // width_adapter_001:out_endofpacket -> limiter:rsp_sink_endofpacket
	wire          width_adapter_001_src_valid;                                                                      // width_adapter_001:out_valid -> limiter:rsp_sink_valid
	wire          width_adapter_001_src_startofpacket;                                                              // width_adapter_001:out_startofpacket -> limiter:rsp_sink_startofpacket
	wire  [234:0] width_adapter_001_src_data;                                                                       // width_adapter_001:out_data -> limiter:rsp_sink_data
	wire          width_adapter_001_src_ready;                                                                      // limiter:rsp_sink_ready -> width_adapter_001:out_ready
	wire    [2:0] width_adapter_001_src_channel;                                                                    // width_adapter_001:out_channel -> limiter:rsp_sink_channel
	wire          limiter_001_cmd_src_endofpacket;                                                                  // limiter_001:cmd_src_endofpacket -> width_adapter_002:in_endofpacket
	wire    [0:0] limiter_001_cmd_src_valid;                                                                        // limiter_001:cmd_src_valid -> width_adapter_002:in_valid
	wire          limiter_001_cmd_src_startofpacket;                                                                // limiter_001:cmd_src_startofpacket -> width_adapter_002:in_startofpacket
	wire  [234:0] limiter_001_cmd_src_data;                                                                         // limiter_001:cmd_src_data -> width_adapter_002:in_data
	wire    [2:0] limiter_001_cmd_src_channel;                                                                      // limiter_001:cmd_src_channel -> width_adapter_002:in_channel
	wire          limiter_001_cmd_src_ready;                                                                        // width_adapter_002:in_ready -> limiter_001:cmd_src_ready
	wire          width_adapter_002_src_endofpacket;                                                                // width_adapter_002:out_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire          width_adapter_002_src_valid;                                                                      // width_adapter_002:out_valid -> cmd_xbar_demux_001:sink_valid
	wire          width_adapter_002_src_startofpacket;                                                              // width_adapter_002:out_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [126:0] width_adapter_002_src_data;                                                                       // width_adapter_002:out_data -> cmd_xbar_demux_001:sink_data
	wire          width_adapter_002_src_ready;                                                                      // cmd_xbar_demux_001:sink_ready -> width_adapter_002:out_ready
	wire    [2:0] width_adapter_002_src_channel;                                                                    // width_adapter_002:out_channel -> cmd_xbar_demux_001:sink_channel
	wire          rsp_xbar_mux_001_src_endofpacket;                                                                 // rsp_xbar_mux_001:src_endofpacket -> width_adapter_003:in_endofpacket
	wire          rsp_xbar_mux_001_src_valid;                                                                       // rsp_xbar_mux_001:src_valid -> width_adapter_003:in_valid
	wire          rsp_xbar_mux_001_src_startofpacket;                                                               // rsp_xbar_mux_001:src_startofpacket -> width_adapter_003:in_startofpacket
	wire  [126:0] rsp_xbar_mux_001_src_data;                                                                        // rsp_xbar_mux_001:src_data -> width_adapter_003:in_data
	wire    [2:0] rsp_xbar_mux_001_src_channel;                                                                     // rsp_xbar_mux_001:src_channel -> width_adapter_003:in_channel
	wire          rsp_xbar_mux_001_src_ready;                                                                       // width_adapter_003:in_ready -> rsp_xbar_mux_001:src_ready
	wire          width_adapter_003_src_endofpacket;                                                                // width_adapter_003:out_endofpacket -> limiter_001:rsp_sink_endofpacket
	wire          width_adapter_003_src_valid;                                                                      // width_adapter_003:out_valid -> limiter_001:rsp_sink_valid
	wire          width_adapter_003_src_startofpacket;                                                              // width_adapter_003:out_startofpacket -> limiter_001:rsp_sink_startofpacket
	wire  [234:0] width_adapter_003_src_data;                                                                       // width_adapter_003:out_data -> limiter_001:rsp_sink_data
	wire          width_adapter_003_src_ready;                                                                      // limiter_001:rsp_sink_ready -> width_adapter_003:out_ready
	wire    [2:0] width_adapter_003_src_channel;                                                                    // width_adapter_003:out_channel -> limiter_001:rsp_sink_channel

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) plasma_master_master_translator (
		.clk                      (pll_0_outclk0_clk),                                                       //                       clk.clk
		.reset                    (mm_bridge_0_reset_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address              (plasma_master_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (plasma_master_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (plasma_master_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (plasma_master_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (plasma_master_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (plasma_master_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (plasma_master_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (plasma_master_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (plasma_master_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (plasma_master_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (plasma_master_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (plasma_master_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (plasma_master_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (plasma_master_master_byteenable),                                         //                          .byteenable
		.av_read                  (plasma_master_master_read),                                               //                          .read
		.av_readdata              (plasma_master_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (plasma_master_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (plasma_master_master_write),                                              //                          .write
		.av_writedata             (plasma_master_master_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                    //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                    //               (terminated)
		.av_begintransfer         (1'b0),                                                                    //               (terminated)
		.av_chipselect            (1'b0),                                                                    //               (terminated)
		.av_lock                  (1'b0),                                                                    //               (terminated)
		.av_debugaccess           (1'b0),                                                                    //               (terminated)
		.uav_clken                (),                                                                        //               (terminated)
		.av_clken                 (1'b1),                                                                    //               (terminated)
		.uav_response             (2'b00),                                                                   //               (terminated)
		.av_response              (),                                                                        //               (terminated)
		.uav_writeresponserequest (),                                                                        //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                    //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid    ()                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (28),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_bridge_0_s0_translator (
		.clk                      (pll_0_outclk0_clk),                                                         //                      clk.clk
		.reset                    (mm_bridge_0_reset_reset_bridge_in_reset_reset),                             //                    reset.reset
		.uav_address              (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (mm_bridge_0_s0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (mm_bridge_0_s0_write),                                                      //                         .write
		.av_read                  (mm_bridge_0_s0_read),                                                       //                         .read
		.av_readdata              (mm_bridge_0_s0_readdata),                                                   //                         .readdata
		.av_writedata             (mm_bridge_0_s0_writedata),                                                  //                         .writedata
		.av_burstcount            (mm_bridge_0_s0_burstcount),                                                 //                         .burstcount
		.av_byteenable            (mm_bridge_0_s0_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (mm_bridge_0_s0_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (mm_bridge_0_s0_waitrequest),                                                //                         .waitrequest
		.av_debugaccess           (mm_bridge_0_s0_debugaccess),                                                //                         .debugaccess
		.av_begintransfer         (),                                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                                          //              (terminated)
		.av_writebyteenable       (),                                                                          //              (terminated)
		.av_lock                  (),                                                                          //              (terminated)
		.av_chipselect            (),                                                                          //              (terminated)
		.av_clken                 (),                                                                          //              (terminated)
		.uav_clken                (1'b0),                                                                      //              (terminated)
		.av_outputenable          (),                                                                          //              (terminated)
		.uav_response             (),                                                                          //              (terminated)
		.av_response              (2'b00),                                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                                          //              (terminated)
		.av_writeresponserequest  (),                                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (32),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (1),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) plasma_soc_0_avalon_slave_0_translator (
		.clk                      (pll_0_outclk0_clk),                                                                      //                      clk.clk
		.reset                    (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                          //                    reset.reset
		.uav_address              (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.uav_response             (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_response),      //                         .response
		.av_address               (plasma_soc_0_avalon_slave_0_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (plasma_soc_0_avalon_slave_0_write),                                                      //                         .write
		.av_read                  (plasma_soc_0_avalon_slave_0_read),                                                       //                         .read
		.av_readdata              (plasma_soc_0_avalon_slave_0_readdata),                                                   //                         .readdata
		.av_writedata             (plasma_soc_0_avalon_slave_0_writedata),                                                  //                         .writedata
		.av_byteenable            (plasma_soc_0_avalon_slave_0_byteenable),                                                 //                         .byteenable
		.av_waitrequest           (plasma_soc_0_avalon_slave_0_waitrequest),                                                //                         .waitrequest
		.av_response              (plasma_soc_0_avalon_slave_0_response),                                                   //                         .response
		.av_begintransfer         (),                                                                                       //              (terminated)
		.av_beginbursttransfer    (),                                                                                       //              (terminated)
		.av_burstcount            (),                                                                                       //              (terminated)
		.av_readdatavalid         (1'b0),                                                                                   //              (terminated)
		.av_writebyteenable       (),                                                                                       //              (terminated)
		.av_lock                  (),                                                                                       //              (terminated)
		.av_chipselect            (),                                                                                       //              (terminated)
		.av_clken                 (),                                                                                       //              (terminated)
		.uav_clken                (1'b0),                                                                                   //              (terminated)
		.av_debugaccess           (),                                                                                       //              (terminated)
		.av_outputenable          (),                                                                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                                   //              (terminated)
		.uav_writeresponsevalid   (),                                                                                       //              (terminated)
		.av_writeresponserequest  (),                                                                                       //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                                    //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (207),
		.PKT_CACHE_H               (229),
		.PKT_CACHE_L               (226),
		.PKT_ADDR_SIDEBAND_H       (205),
		.PKT_ADDR_SIDEBAND_L       (205),
		.PKT_PROTECTION_H          (225),
		.PKT_PROTECTION_L          (223),
		.PKT_BURST_SIZE_H          (202),
		.PKT_BURST_SIZE_L          (200),
		.PKT_BURST_TYPE_H          (204),
		.PKT_BURST_TYPE_L          (203),
		.PKT_RESPONSE_STATUS_L     (230),
		.PKT_RESPONSE_STATUS_H     (231),
		.PKT_BURSTWRAP_H           (199),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (209),
		.PKT_SRC_ID_L              (209),
		.PKT_DEST_ID_H             (210),
		.PKT_DEST_ID_L             (210),
		.PKT_THREAD_ID_H           (222),
		.PKT_THREAD_ID_L           (211),
		.PKT_QOS_L                 (208),
		.PKT_QOS_H                 (208),
		.PKT_ORI_BURST_SIZE_L      (232),
		.PKT_ORI_BURST_SIZE_H      (234),
		.PKT_DATA_SIDEBAND_H       (206),
		.PKT_DATA_SIDEBAND_L       (206),
		.ST_DATA_W                 (235),
		.ST_CHANNEL_W              (3),
		.ID                        (0)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (pll_0_outclk0_clk),                                                 //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (limiter_rsp_src_valid),                                             //         write_rp.valid
		.write_rp_data          (limiter_rsp_src_data),                                              //                 .data
		.write_rp_channel       (limiter_rsp_src_channel),                                           //                 .channel
		.write_rp_startofpacket (limiter_rsp_src_startofpacket),                                     //                 .startofpacket
		.write_rp_endofpacket   (limiter_rsp_src_endofpacket),                                       //                 .endofpacket
		.write_rp_ready         (limiter_rsp_src_ready),                                             //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (limiter_001_rsp_src_valid),                                         //          read_rp.valid
		.read_rp_data           (limiter_001_rsp_src_data),                                          //                 .data
		.read_rp_channel        (limiter_001_rsp_src_channel),                                       //                 .channel
		.read_rp_startofpacket  (limiter_001_rsp_src_startofpacket),                                 //                 .startofpacket
		.read_rp_endofpacket    (limiter_001_rsp_src_endofpacket),                                   //                 .endofpacket
		.read_rp_ready          (limiter_001_rsp_src_ready),                                         //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (8'b00000000),                                                       //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (117),
		.PKT_PROTECTION_L          (115),
		.PKT_BEGIN_BURST           (99),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (102),
		.PKT_THREAD_ID_H           (114),
		.PKT_THREAD_ID_L           (103),
		.PKT_CACHE_H               (121),
		.PKT_CACHE_L               (118),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_RESPONSE_STATUS_H     (123),
		.PKT_RESPONSE_STATUS_L     (122),
		.PKT_ORI_BURST_SIZE_L      (124),
		.PKT_ORI_BURST_SIZE_H      (126),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) plasma_master_master_translator_avalon_universal_master_0_agent (
		.clk                     (pll_0_outclk0_clk),                                                                //       clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.av_address              (plasma_master_master_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (plasma_master_master_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (plasma_master_master_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (plasma_master_master_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (plasma_master_master_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (plasma_master_master_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (plasma_master_master_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (plasma_master_master_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (plasma_master_master_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (plasma_master_master_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (plasma_master_master_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (plasma_master_master_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (plasma_master_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (plasma_master_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (plasma_master_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (plasma_master_master_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_002_src_valid),                                                       //        rp.valid
		.rp_data                 (rsp_xbar_mux_002_src_data),                                                        //          .data
		.rp_channel              (rsp_xbar_mux_002_src_channel),                                                     //          .channel
		.rp_startofpacket        (rsp_xbar_mux_002_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_002_src_endofpacket),                                                 //          .endofpacket
		.rp_ready                (rsp_xbar_mux_002_src_ready),                                                       //          .ready
		.av_response             (),                                                                                 // (terminated)
		.av_writeresponserequest (1'b0),                                                                             // (terminated)
		.av_writeresponsevalid   ()                                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (99),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (102),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (117),
		.PKT_PROTECTION_L          (115),
		.PKT_RESPONSE_STATUS_H     (123),
		.PKT_RESPONSE_STATUS_L     (122),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_ORI_BURST_SIZE_L      (124),
		.PKT_ORI_BURST_SIZE_H      (126),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (127),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_0_s0_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_0_outclk0_clk),                                                                   //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                       //       clk_reset.reset
		.m0_address              (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_source0_ready),                                                         //              cp.ready
		.cp_valid                (burst_adapter_source0_valid),                                                         //                .valid
		.cp_data                 (burst_adapter_source0_data),                                                          //                .data
		.cp_startofpacket        (burst_adapter_source0_startofpacket),                                                 //                .startofpacket
		.cp_endofpacket          (burst_adapter_source0_endofpacket),                                                   //                .endofpacket
		.cp_channel              (burst_adapter_source0_channel),                                                       //                .channel
		.rf_sink_ready           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                               //     (terminated)
		.m0_writeresponserequest (),                                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (128),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                                   //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                       // clk_reset.reset
		.in_data           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                               // (terminated)
		.csr_read          (1'b0),                                                                                // (terminated)
		.csr_write         (1'b0),                                                                                // (terminated)
		.csr_readdata      (),                                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                // (terminated)
		.almost_full_data  (),                                                                                    // (terminated)
		.almost_empty_data (),                                                                                    // (terminated)
		.in_empty          (1'b0),                                                                                // (terminated)
		.out_empty         (),                                                                                    // (terminated)
		.in_error          (1'b0),                                                                                // (terminated)
		.out_error         (),                                                                                    // (terminated)
		.in_channel        (1'b0),                                                                                // (terminated)
		.out_channel       ()                                                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                                             //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                 // clk_reset.reset
		.in_data           (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_startofpacket  (1'b0),                                                                          // (terminated)
		.in_endofpacket    (1'b0),                                                                          // (terminated)
		.out_startofpacket (),                                                                              // (terminated)
		.out_endofpacket   (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (99),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (101),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (102),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (117),
		.PKT_PROTECTION_L          (115),
		.PKT_RESPONSE_STATUS_H     (123),
		.PKT_RESPONSE_STATUS_L     (122),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_ORI_BURST_SIZE_L      (124),
		.PKT_ORI_BURST_SIZE_H      (126),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (127),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (1),
		.USE_WRITERESPONSE         (0)
	) plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_0_outclk0_clk),                                                                                //             clk.clk
		.reset                   (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                                    //       clk_reset.reset
		.m0_address              (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.m0_response             (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_m0_response),                //                .response
		.rp_endofpacket          (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (burst_adapter_001_source0_ready),                                                                  //              cp.ready
		.cp_valid                (burst_adapter_001_source0_valid),                                                                  //                .valid
		.cp_data                 (burst_adapter_001_source0_data),                                                                   //                .data
		.cp_startofpacket        (burst_adapter_001_source0_startofpacket),                                                          //                .startofpacket
		.cp_endofpacket          (burst_adapter_001_source0_endofpacket),                                                            //                .endofpacket
		.cp_channel              (burst_adapter_001_source0_channel),                                                                //                .channel
		.rf_sink_ready           (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid),       //                .valid
		.rdata_fifo_sink_data    (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),        //                .data
		.rdata_fifo_src_ready    (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_writeresponserequest (),                                                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (128),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                                                //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                                    // clk_reset.reset
		.in_data           (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                            // (terminated)
		.csr_read          (1'b0),                                                                                             // (terminated)
		.csr_write         (1'b0),                                                                                             // (terminated)
		.csr_readdata      (),                                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                             // (terminated)
		.almost_full_data  (),                                                                                                 // (terminated)
		.almost_empty_data (),                                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                                             // (terminated)
		.out_empty         (),                                                                                                 // (terminated)
		.in_error          (1'b0),                                                                                             // (terminated)
		.out_error         (),                                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                                             // (terminated)
		.out_channel       ()                                                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                                                          //       clk.clk
		.reset             (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                              // clk_reset.reset
		.in_data           (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                                      // (terminated)
		.csr_read          (1'b0),                                                                                       // (terminated)
		.csr_write         (1'b0),                                                                                       // (terminated)
		.csr_readdata      (),                                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                       // (terminated)
		.almost_full_data  (),                                                                                           // (terminated)
		.almost_empty_data (),                                                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                                                       // (terminated)
		.out_startofpacket (),                                                                                           // (terminated)
		.out_endofpacket   (),                                                                                           // (terminated)
		.in_empty          (1'b0),                                                                                       // (terminated)
		.out_empty         (),                                                                                           // (terminated)
		.in_error          (1'b0),                                                                                       // (terminated)
		.out_error         (),                                                                                           // (terminated)
		.in_channel        (1'b0),                                                                                       // (terminated)
		.out_channel       ()                                                                                            // (terminated)
	);

	de1_soc_alternative_mm_interconnect_2_addr_router addr_router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                            //       src.ready
		.src_valid          (addr_router_src_valid),                                            //          .valid
		.src_data           (addr_router_src_data),                                             //          .data
		.src_channel        (addr_router_src_channel),                                          //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                       //          .endofpacket
	);

	de1_soc_alternative_mm_interconnect_2_addr_router addr_router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                        //       src.ready
		.src_valid          (addr_router_001_src_valid),                                        //          .valid
		.src_data           (addr_router_001_src_data),                                         //          .data
		.src_channel        (addr_router_001_src_channel),                                      //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                   //          .endofpacket
	);

	de1_soc_alternative_mm_interconnect_2_addr_router_002 addr_router_002 (
		.sink_ready         (plasma_master_master_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (plasma_master_master_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (plasma_master_master_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (plasma_master_master_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (plasma_master_master_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                                //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                    // clk_reset.reset
		.src_ready          (addr_router_002_src_ready),                                                        //       src.ready
		.src_valid          (addr_router_002_src_valid),                                                        //          .valid
		.src_data           (addr_router_002_src_data),                                                         //          .data
		.src_channel        (addr_router_002_src_channel),                                                      //          .channel
		.src_startofpacket  (addr_router_002_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket    (addr_router_002_src_endofpacket)                                                   //          .endofpacket
	);

	de1_soc_alternative_mm_interconnect_2_id_router id_router (
		.sink_ready         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mm_bridge_0_s0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                         //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                       //       src.ready
		.src_valid          (id_router_src_valid),                                                       //          .valid
		.src_data           (id_router_src_data),                                                        //          .data
		.src_channel        (id_router_src_channel),                                                     //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                               //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                                  //          .endofpacket
	);

	de1_soc_alternative_mm_interconnect_2_id_router_001 id_router_001 (
		.sink_ready         (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (plasma_soc_0_avalon_slave_0_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                                                      //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.src_ready          (id_router_001_src_ready),                                                                //       src.ready
		.src_valid          (id_router_001_src_valid),                                                                //          .valid
		.src_data           (id_router_001_src_data),                                                                 //          .data
		.src_channel        (id_router_001_src_channel),                                                              //          .channel
		.src_startofpacket  (id_router_001_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket    (id_router_001_src_endofpacket)                                                           //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (210),
		.PKT_DEST_ID_L             (210),
		.PKT_SRC_ID_H              (209),
		.PKT_SRC_ID_L              (209),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.MAX_OUTSTANDING_RESPONSES (6),
		.PIPELINED                 (0),
		.ST_DATA_W                 (235),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.REORDER                   (0)
	) limiter (
		.clk                    (pll_0_outclk0_clk),                                                //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_src_ready),                                            //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_src_valid),                                            //          .valid
		.cmd_sink_data          (addr_router_src_data),                                             //          .data
		.cmd_sink_channel       (addr_router_src_channel),                                          //          .channel
		.cmd_sink_startofpacket (addr_router_src_startofpacket),                                    //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_src_endofpacket),                                      //          .endofpacket
		.cmd_src_ready          (limiter_cmd_src_ready),                                            //   cmd_src.ready
		.cmd_src_data           (limiter_cmd_src_data),                                             //          .data
		.cmd_src_channel        (limiter_cmd_src_channel),                                          //          .channel
		.cmd_src_startofpacket  (limiter_cmd_src_startofpacket),                                    //          .startofpacket
		.cmd_src_endofpacket    (limiter_cmd_src_endofpacket),                                      //          .endofpacket
		.cmd_src_valid          (limiter_cmd_src_valid),                                            //          .valid
		.rsp_sink_ready         (width_adapter_001_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (width_adapter_001_src_valid),                                      //          .valid
		.rsp_sink_channel       (width_adapter_001_src_channel),                                    //          .channel
		.rsp_sink_data          (width_adapter_001_src_data),                                       //          .data
		.rsp_sink_startofpacket (width_adapter_001_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (width_adapter_001_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (limiter_rsp_src_ready),                                            //   rsp_src.ready
		.rsp_src_valid          (limiter_rsp_src_valid),                                            //          .valid
		.rsp_src_data           (limiter_rsp_src_data),                                             //          .data
		.rsp_src_channel        (limiter_rsp_src_channel),                                          //          .channel
		.rsp_src_startofpacket  (limiter_rsp_src_startofpacket),                                    //          .startofpacket
		.rsp_src_endofpacket    (limiter_rsp_src_endofpacket)                                       //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (210),
		.PKT_DEST_ID_L             (210),
		.PKT_SRC_ID_H              (209),
		.PKT_SRC_ID_L              (209),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.MAX_OUTSTANDING_RESPONSES (6),
		.PIPELINED                 (0),
		.ST_DATA_W                 (235),
		.ST_CHANNEL_W              (3),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.REORDER                   (0)
	) limiter_001 (
		.clk                    (pll_0_outclk0_clk),                                                //       clk.clk
		.reset                  (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (addr_router_001_src_ready),                                        //  cmd_sink.ready
		.cmd_sink_valid         (addr_router_001_src_valid),                                        //          .valid
		.cmd_sink_data          (addr_router_001_src_data),                                         //          .data
		.cmd_sink_channel       (addr_router_001_src_channel),                                      //          .channel
		.cmd_sink_startofpacket (addr_router_001_src_startofpacket),                                //          .startofpacket
		.cmd_sink_endofpacket   (addr_router_001_src_endofpacket),                                  //          .endofpacket
		.cmd_src_ready          (limiter_001_cmd_src_ready),                                        //   cmd_src.ready
		.cmd_src_data           (limiter_001_cmd_src_data),                                         //          .data
		.cmd_src_channel        (limiter_001_cmd_src_channel),                                      //          .channel
		.cmd_src_startofpacket  (limiter_001_cmd_src_startofpacket),                                //          .startofpacket
		.cmd_src_endofpacket    (limiter_001_cmd_src_endofpacket),                                  //          .endofpacket
		.cmd_src_valid          (limiter_001_cmd_src_valid),                                        //          .valid
		.rsp_sink_ready         (width_adapter_003_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (width_adapter_003_src_valid),                                      //          .valid
		.rsp_sink_channel       (width_adapter_003_src_channel),                                    //          .channel
		.rsp_sink_data          (width_adapter_003_src_data),                                       //          .data
		.rsp_sink_startofpacket (width_adapter_003_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (width_adapter_003_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (limiter_001_rsp_src_ready),                                        //   rsp_src.ready
		.rsp_src_valid          (limiter_001_rsp_src_valid),                                        //          .valid
		.rsp_src_data           (limiter_001_rsp_src_data),                                         //          .data
		.rsp_src_channel        (limiter_001_rsp_src_channel),                                      //          .channel
		.rsp_src_startofpacket  (limiter_001_rsp_src_startofpacket),                                //          .startofpacket
		.rsp_src_endofpacket    (limiter_001_rsp_src_endofpacket)                                   //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter (
		.clk                   (pll_0_outclk0_clk),                             //       cr0.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_src_valid),                        //     sink0.valid
		.sink0_data            (cmd_xbar_mux_src_data),                         //          .data
		.sink0_channel         (cmd_xbar_mux_src_channel),                      //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_src_startofpacket),                //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_src_endofpacket),                  //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_src_ready),                        //          .ready
		.source0_valid         (burst_adapter_source0_valid),                   //   source0.valid
		.source0_data          (burst_adapter_source0_data),                    //          .data
		.source0_channel       (burst_adapter_source0_channel),                 //          .channel
		.source0_startofpacket (burst_adapter_source0_startofpacket),           //          .startofpacket
		.source0_endofpacket   (burst_adapter_source0_endofpacket),             //          .endofpacket
		.source0_ready         (burst_adapter_source0_ready)                    //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (127),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0)
	) burst_adapter_001 (
		.clk                   (pll_0_outclk0_clk),                             //       cr0.clk
		.reset                 (mm_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_xbar_mux_001_src_valid),                    //     sink0.valid
		.sink0_data            (cmd_xbar_mux_001_src_data),                     //          .data
		.sink0_channel         (cmd_xbar_mux_001_src_channel),                  //          .channel
		.sink0_startofpacket   (cmd_xbar_mux_001_src_startofpacket),            //          .startofpacket
		.sink0_endofpacket     (cmd_xbar_mux_001_src_endofpacket),              //          .endofpacket
		.sink0_ready           (cmd_xbar_mux_001_src_ready),                    //          .ready
		.source0_valid         (burst_adapter_001_source0_valid),               //   source0.valid
		.source0_data          (burst_adapter_001_source0_data),                //          .data
		.source0_channel       (burst_adapter_001_source0_channel),             //          .channel
		.source0_startofpacket (burst_adapter_001_source0_startofpacket),       //          .startofpacket
		.source0_endofpacket   (burst_adapter_001_source0_endofpacket),         //          .endofpacket
		.source0_ready         (burst_adapter_001_source0_ready)                //          .ready
	);

	de1_soc_alternative_mm_interconnect_2_cmd_xbar_demux cmd_xbar_demux (
		.clk                (pll_0_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_src_ready),                                          //      sink.ready
		.sink_channel       (width_adapter_src_channel),                                        //          .channel
		.sink_data          (width_adapter_src_data),                                           //          .data
		.sink_startofpacket (width_adapter_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (width_adapter_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (width_adapter_src_valid),                                          //          .valid
		.src0_ready         (cmd_xbar_demux_src0_ready),                                        //      src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                                        //          .valid
		.src0_data          (cmd_xbar_demux_src0_data),                                         //          .data
		.src0_channel       (cmd_xbar_demux_src0_channel),                                      //          .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (cmd_xbar_demux_src1_ready),                                        //      src1.ready
		.src1_valid         (cmd_xbar_demux_src1_valid),                                        //          .valid
		.src1_data          (cmd_xbar_demux_src1_data),                                         //          .data
		.src1_channel       (cmd_xbar_demux_src1_channel),                                      //          .channel
		.src1_startofpacket (cmd_xbar_demux_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_src1_endofpacket)                                   //          .endofpacket
	);

	de1_soc_alternative_mm_interconnect_2_cmd_xbar_demux cmd_xbar_demux_001 (
		.clk                (pll_0_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_002_src_ready),                                      //      sink.ready
		.sink_channel       (width_adapter_002_src_channel),                                    //          .channel
		.sink_data          (width_adapter_002_src_data),                                       //          .data
		.sink_startofpacket (width_adapter_002_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (width_adapter_002_src_endofpacket),                                //          .endofpacket
		.sink_valid         (width_adapter_002_src_valid),                                      //          .valid
		.src0_ready         (cmd_xbar_demux_001_src0_ready),                                    //      src0.ready
		.src0_valid         (cmd_xbar_demux_001_src0_valid),                                    //          .valid
		.src0_data          (cmd_xbar_demux_001_src0_data),                                     //          .data
		.src0_channel       (cmd_xbar_demux_001_src0_channel),                                  //          .channel
		.src0_startofpacket (cmd_xbar_demux_001_src0_startofpacket),                            //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_001_src0_endofpacket),                              //          .endofpacket
		.src1_ready         (cmd_xbar_demux_001_src1_ready),                                    //      src1.ready
		.src1_valid         (cmd_xbar_demux_001_src1_valid),                                    //          .valid
		.src1_data          (cmd_xbar_demux_001_src1_data),                                     //          .data
		.src1_channel       (cmd_xbar_demux_001_src1_channel),                                  //          .channel
		.src1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),                            //          .startofpacket
		.src1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket)                               //          .endofpacket
	);

	de1_soc_alternative_mm_interconnect_2_cmd_xbar_demux_002 cmd_xbar_demux_002 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_002_src_ready),                     //      sink.ready
		.sink_channel       (addr_router_002_src_channel),                   //          .channel
		.sink_data          (addr_router_002_src_data),                      //          .data
		.sink_startofpacket (addr_router_002_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (addr_router_002_src_endofpacket),               //          .endofpacket
		.sink_valid         (addr_router_002_src_valid),                     //          .valid
		.src0_ready         (cmd_xbar_demux_002_src0_ready),                 //      src0.ready
		.src0_valid         (cmd_xbar_demux_002_src0_valid),                 //          .valid
		.src0_data          (cmd_xbar_demux_002_src0_data),                  //          .data
		.src0_channel       (cmd_xbar_demux_002_src0_channel),               //          .channel
		.src0_startofpacket (cmd_xbar_demux_002_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_002_src0_endofpacket)            //          .endofpacket
	);

	de1_soc_alternative_mm_interconnect_2_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                        //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                        //          .valid
		.src_data            (cmd_xbar_mux_src_data),                         //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                      //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),                     //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),                     //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),                   //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                      //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),                 //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),                 //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),               //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),                  //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)            //          .endofpacket
	);

	de1_soc_alternative_mm_interconnect_2_cmd_xbar_mux_001 cmd_xbar_mux_001 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_001_src_ready),                    //       src.ready
		.src_valid           (cmd_xbar_mux_001_src_valid),                    //          .valid
		.src_data            (cmd_xbar_mux_001_src_data),                     //          .data
		.src_channel         (cmd_xbar_mux_001_src_channel),                  //          .channel
		.src_startofpacket   (cmd_xbar_mux_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_001_src_endofpacket),              //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src1_ready),                     //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src1_valid),                     //          .valid
		.sink0_channel       (cmd_xbar_demux_src1_channel),                   //          .channel
		.sink0_data          (cmd_xbar_demux_src1_data),                      //          .data
		.sink0_startofpacket (cmd_xbar_demux_src1_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src1_endofpacket),               //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src1_ready),                 //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src1_valid),                 //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src1_channel),               //          .channel
		.sink1_data          (cmd_xbar_demux_001_src1_data),                  //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src1_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src1_endofpacket),           //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src0_ready),                 //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src0_valid),                 //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src0_channel),               //          .channel
		.sink2_data          (cmd_xbar_demux_002_src0_data),                  //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src0_endofpacket)            //          .endofpacket
	);

	de1_soc_alternative_mm_interconnect_2_cmd_xbar_demux rsp_xbar_demux (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_src_ready),                           //      sink.ready
		.sink_channel       (id_router_src_channel),                         //          .channel
		.sink_data          (id_router_src_data),                            //          .data
		.sink_startofpacket (id_router_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (id_router_src_endofpacket),                     //          .endofpacket
		.sink_valid         (id_router_src_valid),                           //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                     //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                      //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),                     //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),                      //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket)                //          .endofpacket
	);

	de1_soc_alternative_mm_interconnect_2_rsp_xbar_demux_001 rsp_xbar_demux_001 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (id_router_001_src_ready),                       //      sink.ready
		.sink_channel       (id_router_001_src_channel),                     //          .channel
		.sink_data          (id_router_001_src_data),                        //          .data
		.sink_startofpacket (id_router_001_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (id_router_001_src_endofpacket),                 //          .endofpacket
		.sink_valid         (id_router_001_src_valid),                       //          .valid
		.src0_ready         (rsp_xbar_demux_001_src0_ready),                 //      src0.ready
		.src0_valid         (rsp_xbar_demux_001_src0_valid),                 //          .valid
		.src0_data          (rsp_xbar_demux_001_src0_data),                  //          .data
		.src0_channel       (rsp_xbar_demux_001_src0_channel),               //          .channel
		.src0_startofpacket (rsp_xbar_demux_001_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_001_src0_endofpacket),           //          .endofpacket
		.src1_ready         (rsp_xbar_demux_001_src1_ready),                 //      src1.ready
		.src1_valid         (rsp_xbar_demux_001_src1_valid),                 //          .valid
		.src1_data          (rsp_xbar_demux_001_src1_data),                  //          .data
		.src1_channel       (rsp_xbar_demux_001_src1_channel),               //          .channel
		.src1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),         //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket),           //          .endofpacket
		.src2_ready         (rsp_xbar_demux_001_src2_ready),                 //      src2.ready
		.src2_valid         (rsp_xbar_demux_001_src2_valid),                 //          .valid
		.src2_data          (rsp_xbar_demux_001_src2_data),                  //          .data
		.src2_channel       (rsp_xbar_demux_001_src2_channel),               //          .channel
		.src2_startofpacket (rsp_xbar_demux_001_src2_startofpacket),         //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_001_src2_endofpacket)            //          .endofpacket
	);

	de1_soc_alternative_mm_interconnect_2_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (pll_0_outclk0_clk),                                                //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                                           //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                                           //          .valid
		.src_data            (rsp_xbar_mux_src_data),                                            //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                                         //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),                                        //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),                                        //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),                                      //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                                         //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket),                                  //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src0_ready),                                    //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src0_valid),                                    //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src0_channel),                                  //          .channel
		.sink1_data          (rsp_xbar_demux_001_src0_data),                                     //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src0_startofpacket),                            //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src0_endofpacket)                               //          .endofpacket
	);

	de1_soc_alternative_mm_interconnect_2_rsp_xbar_mux rsp_xbar_mux_001 (
		.clk                 (pll_0_outclk0_clk),                                                //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_001_src_ready),                                       //       src.ready
		.src_valid           (rsp_xbar_mux_001_src_valid),                                       //          .valid
		.src_data            (rsp_xbar_mux_001_src_data),                                        //          .data
		.src_channel         (rsp_xbar_mux_001_src_channel),                                     //          .channel
		.src_startofpacket   (rsp_xbar_mux_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_001_src_endofpacket),                                 //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src1_ready),                                        //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src1_valid),                                        //          .valid
		.sink0_channel       (rsp_xbar_demux_src1_channel),                                      //          .channel
		.sink0_data          (rsp_xbar_demux_src1_data),                                         //          .data
		.sink0_startofpacket (rsp_xbar_demux_src1_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src1_endofpacket),                                  //          .endofpacket
		.sink1_ready         (rsp_xbar_demux_001_src1_ready),                                    //     sink1.ready
		.sink1_valid         (rsp_xbar_demux_001_src1_valid),                                    //          .valid
		.sink1_channel       (rsp_xbar_demux_001_src1_channel),                                  //          .channel
		.sink1_data          (rsp_xbar_demux_001_src1_data),                                     //          .data
		.sink1_startofpacket (rsp_xbar_demux_001_src1_startofpacket),                            //          .startofpacket
		.sink1_endofpacket   (rsp_xbar_demux_001_src1_endofpacket)                               //          .endofpacket
	);

	de1_soc_alternative_mm_interconnect_2_rsp_xbar_mux_002 rsp_xbar_mux_002 (
		.clk                 (pll_0_outclk0_clk),                             //       clk.clk
		.reset               (mm_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_002_src_ready),                    //       src.ready
		.src_valid           (rsp_xbar_mux_002_src_valid),                    //          .valid
		.src_data            (rsp_xbar_mux_002_src_data),                     //          .data
		.src_channel         (rsp_xbar_mux_002_src_channel),                  //          .channel
		.src_startofpacket   (rsp_xbar_mux_002_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_002_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_001_src2_ready),                 //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_001_src2_valid),                 //          .valid
		.sink0_channel       (rsp_xbar_demux_001_src2_channel),               //          .channel
		.sink0_data          (rsp_xbar_demux_001_src2_data),                  //          .data
		.sink0_startofpacket (rsp_xbar_demux_001_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_001_src2_endofpacket)            //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (231),
		.IN_PKT_RESPONSE_STATUS_L      (230),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (232),
		.IN_PKT_ORI_BURST_SIZE_H       (234),
		.IN_ST_DATA_W                  (235),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0)
	) width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (limiter_cmd_src_valid),                                            //      sink.valid
		.in_channel           (limiter_cmd_src_channel),                                          //          .channel
		.in_startofpacket     (limiter_cmd_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (limiter_cmd_src_endofpacket),                                      //          .endofpacket
		.in_ready             (limiter_cmd_src_ready),                                            //          .ready
		.in_data              (limiter_cmd_src_data),                                             //          .data
		.out_endofpacket      (width_adapter_src_endofpacket),                                    //       src.endofpacket
		.out_data             (width_adapter_src_data),                                           //          .data
		.out_channel          (width_adapter_src_channel),                                        //          .channel
		.out_valid            (width_adapter_src_valid),                                          //          .valid
		.out_ready            (width_adapter_src_ready),                                          //          .ready
		.out_startofpacket    (width_adapter_src_startofpacket),                                  //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (231),
		.OUT_PKT_RESPONSE_STATUS_L     (230),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (232),
		.OUT_PKT_ORI_BURST_SIZE_H      (234),
		.OUT_ST_DATA_W                 (235),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1)
	) width_adapter_001 (
		.clk                  (pll_0_outclk0_clk),                                                //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_xbar_mux_src_valid),                                           //      sink.valid
		.in_channel           (rsp_xbar_mux_src_channel),                                         //          .channel
		.in_startofpacket     (rsp_xbar_mux_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (rsp_xbar_mux_src_endofpacket),                                     //          .endofpacket
		.in_ready             (rsp_xbar_mux_src_ready),                                           //          .ready
		.in_data              (rsp_xbar_mux_src_data),                                            //          .data
		.out_endofpacket      (width_adapter_001_src_endofpacket),                                //       src.endofpacket
		.out_data             (width_adapter_001_src_data),                                       //          .data
		.out_channel          (width_adapter_001_src_channel),                                    //          .channel
		.out_valid            (width_adapter_001_src_valid),                                      //          .valid
		.out_ready            (width_adapter_001_src_ready),                                      //          .ready
		.out_startofpacket    (width_adapter_001_src_startofpacket),                              //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (231),
		.IN_PKT_RESPONSE_STATUS_L      (230),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (232),
		.IN_PKT_ORI_BURST_SIZE_H       (234),
		.IN_ST_DATA_W                  (235),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (123),
		.OUT_PKT_RESPONSE_STATUS_L     (122),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (124),
		.OUT_PKT_ORI_BURST_SIZE_H      (126),
		.OUT_ST_DATA_W                 (127),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0)
	) width_adapter_002 (
		.clk                  (pll_0_outclk0_clk),                                                //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (limiter_001_cmd_src_valid),                                        //      sink.valid
		.in_channel           (limiter_001_cmd_src_channel),                                      //          .channel
		.in_startofpacket     (limiter_001_cmd_src_startofpacket),                                //          .startofpacket
		.in_endofpacket       (limiter_001_cmd_src_endofpacket),                                  //          .endofpacket
		.in_ready             (limiter_001_cmd_src_ready),                                        //          .ready
		.in_data              (limiter_001_cmd_src_data),                                         //          .data
		.out_endofpacket      (width_adapter_002_src_endofpacket),                                //       src.endofpacket
		.out_data             (width_adapter_002_src_data),                                       //          .data
		.out_channel          (width_adapter_002_src_channel),                                    //          .channel
		.out_valid            (width_adapter_002_src_valid),                                      //          .valid
		.out_ready            (width_adapter_002_src_ready),                                      //          .ready
		.out_startofpacket    (width_adapter_002_src_startofpacket),                              //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (123),
		.IN_PKT_RESPONSE_STATUS_L      (122),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (124),
		.IN_PKT_ORI_BURST_SIZE_H       (126),
		.IN_ST_DATA_W                  (127),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (231),
		.OUT_PKT_RESPONSE_STATUS_L     (230),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (232),
		.OUT_PKT_ORI_BURST_SIZE_H      (234),
		.OUT_ST_DATA_W                 (235),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1)
	) width_adapter_003 (
		.clk                  (pll_0_outclk0_clk),                                                //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_xbar_mux_001_src_valid),                                       //      sink.valid
		.in_channel           (rsp_xbar_mux_001_src_channel),                                     //          .channel
		.in_startofpacket     (rsp_xbar_mux_001_src_startofpacket),                               //          .startofpacket
		.in_endofpacket       (rsp_xbar_mux_001_src_endofpacket),                                 //          .endofpacket
		.in_ready             (rsp_xbar_mux_001_src_ready),                                       //          .ready
		.in_data              (rsp_xbar_mux_001_src_data),                                        //          .data
		.out_endofpacket      (width_adapter_003_src_endofpacket),                                //       src.endofpacket
		.out_data             (width_adapter_003_src_data),                                       //          .data
		.out_channel          (width_adapter_003_src_channel),                                    //          .channel
		.out_valid            (width_adapter_003_src_valid),                                      //          .valid
		.out_ready            (width_adapter_003_src_ready),                                      //          .ready
		.out_startofpacket    (width_adapter_003_src_startofpacket),                              //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

endmodule
